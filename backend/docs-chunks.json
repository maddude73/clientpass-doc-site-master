[
  {
    "doc_id": "68e2f5e277e8ead370b13ccd",
    "content": "<h1>Affiliate Authentication</h1>\n<p>This document describes the authentication process for affiliates.</p>\n<h2>Overview</h2>\n<p>The affiliate authentication is handled by the <code>AffiliateAuthPage.tsx</code> component. It provides a login and sign-up form for affiliates.</p>\n<h3>Login</h3>\n<p>The login form is implemented in the <code>AffiliateLoginForm</code> component.</p>\n<h3>Sign-up</h3>\n<p>The sign-up form is implemented in the <code>AffiliateSignUpForm</code> component.</p>",
    "start_char": 0,
    "end_char": 488,
    "source_file": "AFFILIATE_AUTHENTICATION.md",
    "frontmatter": {
      "id": "68e2f5e277e8ead370b13ccd",
      "revision": 11
    }
  },
  {
    "doc_id": "AFFILIATE_DASHBOARD",
    "content": "<h1>Affiliate Dashboard</h1>\n<p>This document provides a detailed description of the Affiliate Dashboard, a dedicated portal for affiliate partners to track their performance, manage their network, and access marketing materials.</p>\n<h2>1. Overview</h2>\n<p>The Affiliate Dashboard serves as the central hub for affiliate partners. It provides a comprehensive set of tools and information to help affiliates succeed in promoting ClientPass and its associated products. The dashboard's content dynamic",
    "start_char": 0,
    "end_char": 500,
    "source_file": "AFFILIATE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AFFILIATE_DASHBOARD",
    "content": "ally adapts based on the affiliate's account status.</p>\n<p>The dashboard is implemented in the <code>AffiliateDashboard.tsx</code> component.</p>\n<h2>2. Key Features and Account Statuses</h2>\n<p>The Affiliate Dashboard handles different account statuses, providing appropriate views and functionalities for each.</p>\n<h3>2.1. Pending Approval Status</h3>\n<ul>\n<li><strong>Display:</strong> If an affiliate's account is <code>pending</code> approval, the dashboard displays a clear message indicating",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "AFFILIATE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AFFILIATE_DASHBOARD",
    "content": "that the account is under review.</li>\n<li><strong>Notification:</strong> Affiliates are informed that they will receive an email notification once their account is approved.</li>\n<li><strong>Action:</strong> The only available action is to sign out.</li>\n</ul>\n<h3>2.2. Suspended Status</h3>\n<ul>\n<li><strong>Display:</strong> If an affiliate's account is <code>suspended</code>, the dashboard displays a message indicating the suspension.</li>\n<li><strong>Action:</strong> Affiliates are advised t",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "AFFILIATE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AFFILIATE_DASHBOARD",
    "content": "o contact support for assistance, and the only available action is to sign out.</li>\n</ul>\n<h3>2.3. Active Dashboard (Approved Affiliates)</h3>\n<p>Once an affiliate account is approved and active, the dashboard provides full functionality:</p>\n<ul>\n<li><strong>Welcome Message:</strong> A personalized welcome message for the active affiliate.</li>\n<li><strong>Sign Out:</strong> Option to sign out from the affiliate account.</li>\n<li><strong>Integrated Marketplace:</strong> The core of the active",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "AFFILIATE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AFFILIATE_DASHBOARD",
    "content": "dashboard is the integration of the <code>AffiliateMarketplace</code> component. This provides access to:\n<ul>\n<li><strong>Product Listings:</strong> A curated list of products available for promotion.</li>\n<li><strong>Referral Link Generation:</strong> Tools to generate unique referral links for products.</li>\n<li><strong>Performance Tracking:</strong> Summary of key metrics, including clicks, signups, bookings, and earnings (though detailed tracking might be within the marketplace component it",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "AFFILIATE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AFFILIATE_DASHBOARD",
    "content": "self).</li>\n</ul>\n</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Affiliate Dashboard interacts with the <code>users</code> table (for affiliate status and profile information) and potentially other tables related to affiliate performance and marketplace products in the Supabase database.</p>\n<h2>4. User Interface</h2>\n<p>The Affiliate Dashboard features a responsive user interface that adapts to different account statuses:</p>\n<ul>\n<li><strong>Header:</strong> For active affiliates, the header displa",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "AFFILIATE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AFFILIATE_DASHBOARD",
    "content": "ys a welcome message and a sign-out button.</li>\n<li><strong>Main Content Area:</strong> Dynamically displays content based on the affiliate's status. For active affiliates, this includes the <code>AffiliateMarketplace</code> component.</li>\n</ul>",
    "start_char": 3000,
    "end_char": 3248,
    "source_file": "AFFILIATE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68e2f57777e8ead370b13cae",
    "content": "<h1>Affiliate Home Page</h1>\n<p>This document describes the home page for affiliates.</p>\n<h2>Overview</h2>\n<p>The affiliate home page is the entry point for the affiliate system. It is implemented in the <code>AffiliateIndex.tsx</code> component.</p>\n<p>If the affiliate is logged in, it displays the <code>AffiliateDashboard</code>.\nIf the affiliate is not logged in, it displays the <code>AffiliateAuthPage</code>.</p>",
    "start_char": 0,
    "end_char": 422,
    "source_file": "AFFILIATE_HOME_PAGE.md",
    "frontmatter": {
      "id": "68e2f57777e8ead370b13cae",
      "revision": 11
    }
  },
  {
    "doc_id": "68e2f5ee77e8ead370b13cd9",
    "content": "<h1>Affiliate Marketplace</h1>\n<p>This document describes the affiliate marketplace.</p>\n<h2>Overview</h2>\n<p>The affiliate marketplace is where affiliates can find and promote products. It is implemented in the <code>AffiliateMarketplacePage.tsx</code> component, which uses the <code>AffiliateMarketplace</code> component.</p>",
    "start_char": 0,
    "end_char": 329,
    "source_file": "AFFILIATE_MARKETPLACE.md",
    "frontmatter": {
      "id": "68e2f5ee77e8ead370b13cd9",
      "revision": 11
    }
  },
  {
    "doc_id": "68e300ca77e8ead370b13dc9",
    "content": "<h1>AI and LLM Opportunities in ClientPass</h1>\n<p>This document outlines potential opportunities to integrate Artificial Intelligence (AI) and Large Language Models (LLMs) into the ClientPass application.</p>\n<h2>1. Intelligent Auto-Match System</h2>\n<p>The existing matching system for Open Chair and Walk-in Referrals could be significantly enhanced by an LLM. Instead of simple matching based on service and location, an AI-powered system could consider more nuanced factors to provide better mat",
    "start_char": 0,
    "end_char": 500,
    "source_file": "AI_OPPORTUNITIES.md",
    "frontmatter": {
      "id": "68e300ca77e8ead370b13dc9",
      "revision": 6
    }
  },
  {
    "doc_id": "68e300ca77e8ead370b13dc9",
    "content": "ches.</p>\n<p><strong>Potential Factors for Matching:</strong></p>\n<ul>\n<li><strong>Stylist's Specialty and Experience Level:</strong> Match a client's request with a stylist who is a proven expert in that area (e.g., color, extensions, specific hair types).</li>\n<li><strong>Client's History and Preferences:</strong> If a client has previously rated a stylist highly, prioritize that stylist for future referrals. The system could also learn a client's preferred style over time.</li>\n<li><strong>St",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "AI_OPPORTUNITIES.md",
    "frontmatter": {
      "id": "68e300ca77e8ead370b13dc9",
      "revision": 6
    }
  },
  {
    "doc_id": "68e300ca77e8ead370b13dc9",
    "content": "ylist's Style and Portfolio:</strong> Use image analysis of a stylist's portfolio to match a client's desired &quot;look&quot; or inspiration photos.</li>\n<li><strong>Urgency and Proximity:</strong> Prioritize requests that are for the same day and factor in real-time traffic data to suggest the most convenient options.</li>\n</ul>\n<h2>2. Personalized Service and Product Recommendations</h2>\n<p>An LLM can be used to provide personalized recommendations to both clients and stylists.</p>\n<ul>\n<li><",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "AI_OPPORTUNITIES.md",
    "frontmatter": {
      "id": "68e300ca77e8ead370b13dc9",
      "revision": 6
    }
  },
  {
    "doc_id": "68e300ca77e8ead370b13dc9",
    "content": "strong>For Clients:</strong> Based on their booking history, profile information (e.g., hair type, style preferences), and the services they have viewed, an LLM could recommend:\n<ul>\n<li>New services they might be interested in.</li>\n<li>Products from the affiliate marketplace that are relevant to their needs (e.g., shampoo for colored hair, styling tools).</li>\n</ul>\n</li>\n<li><strong>For Stylists:</strong> Recommend products from the affiliate marketplace that they could sell to their clients,",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "AI_OPPORTUNITIES.md",
    "frontmatter": {
      "id": "68e300ca77e8ead370b13dc9",
      "revision": 6
    }
  },
  {
    "doc_id": "68e300ca77e8ead370b13dc9",
    "content": "based on the services they provide and the needs of their clientele.</li>\n</ul>\n<h2>3. Review Analysis and Summarization</h2>\n<p>An LLM could analyze all of a stylist's reviews to provide valuable insights.</p>\n<ul>\n<li><strong>Automated Summaries:</strong> Generate a summary of a stylist's strengths and weaknesses from their reviews.</li>\n<li><strong>Sentiment Analysis:</strong> Display a sentiment score (e.g., &quot;95% Positive&quot;) on a stylist's profile to build trust with potential clie",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "AI_OPPORTUNITIES.md",
    "frontmatter": {
      "id": "68e300ca77e8ead370b13dc9",
      "revision": 6
    }
  },
  {
    "doc_id": "68e300ca77e8ead370b13dc9",
    "content": "nts.</li>\n<li><strong>Identify Recurring Themes:</strong> The system could identify recurring positive feedback (e.g., &quot;great with curly hair&quot;) or issues that the stylist could address (e.g., &quot;often runs late&quot;).</li>\n</ul>\n<h2>4. Smart Scheduling and Booking Assistant</h2>\n<p>A chatbot-style interface could streamline the booking process.</p>\n<ul>\n<li><strong>Natural Language Booking:</strong> Clients could book appointments using natural language (e.g., &quot;I need a haircu",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "AI_OPPORTUNITIES.md",
    "frontmatter": {
      "id": "68e300ca77e8ead370b13dc9",
      "revision": 6
    }
  },
  {
    "doc_id": "68e300ca77e8ead370b13dc9",
    "content": "t with Jane on Tuesday afternoon&quot;).</li>\n<li><strong>Automated Rescheduling and Cancellations:</strong> The chatbot could handle routine scheduling changes, freeing up time for stylists and receptionists.</li>\n<li><strong>Appointment Reminders and Confirmations:</strong> The chatbot could send intelligent, conversational reminders to clients.</li>\n</ul>\n<h2>5. Automated Profile and Bio Generation for Stylists</h2>\n<p>Many stylists are great at their craft but may struggle with writing a com",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "AI_OPPORTUNITIES.md",
    "frontmatter": {
      "id": "68e300ca77e8ead370b13dc9",
      "revision": 6
    }
  },
  {
    "doc_id": "68e300ca77e8ead370b13dc9",
    "content": "pelling profile bio.</p>\n<ul>\n<li><strong>Guided Bio Creation:</strong> Stylists could provide a few bullet points about their experience, skills, and personality, and an LLM could generate a well-written and engaging bio for their profile.</li>\n<li><strong>Profile Optimization Tips:</strong> The AI could suggest improvements to a stylist's profile to attract more clients (e.g., &quot;Add more photos of your color work to your portfolio&quot;).</li>\n</ul>\n<h2>6. Content Generation for Affiliate",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "AI_OPPORTUNITIES.md",
    "frontmatter": {
      "id": "68e300ca77e8ead370b13dc9",
      "revision": 6
    }
  },
  {
    "doc_id": "68e300ca77e8ead370b13dc9",
    "content": "Marketing</h2>\n<p>Affiliates could be empowered with AI tools to improve their marketing efforts.</p>\n<ul>\n<li><strong>Automated Content Creation:</strong> Affiliates could get help from an LLM to generate social media posts, product descriptions, or blog articles to promote the products in the marketplace.</li>\n<li><strong>Personalized Marketing Angles:</strong> The AI could suggest different marketing angles for a product based on the affiliate's target audience.</li>\n</ul>",
    "start_char": 4000,
    "end_char": 4481,
    "source_file": "AI_OPPORTUNITIES.md",
    "frontmatter": {
      "id": "68e300ca77e8ead370b13dc9",
      "revision": 6
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "<h1>Architecture Overview</h1>\n<p>This document provides a high-level overview of the technical architecture for the ClientPass application, covering both the web and mobile frontends.</p>\n<h2>1. Core Technology Stack</h2>\n<h3>1.1. Web Application</h3>\n<ul>\n<li><strong>Frontend</strong>: A modern Single-Page Application (SPA) built with <strong>React</strong> and <strong>Vite</strong>.\n<ul>\n<li><strong>Language</strong>: <strong>TypeScript</strong></li>\n<li><strong>UI Components</strong>: <stron",
    "start_char": 0,
    "end_char": 500,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "g>shadcn-ui</strong> on top of Radix UI and Tailwind CSS.</li>\n<li><strong>Routing</strong>: <strong>React Router</strong> for client-side navigation.</li>\n<li><strong>State Management</strong>: <strong>Zustand</strong> for lightweight global client state, <strong>TanStack Query</strong> for server state management.</li>\n</ul>\n</li>\n</ul>\n<h3>1.2. Mobile Application</h3>\n<ul>\n<li><strong>Framework</strong>: <strong>React Native</strong> with <strong>Expo</strong>.</li>\n<li><strong>Language</stro",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "ng>: <strong>TypeScript</strong>.</li>\n<li><strong>UI Components</strong>: <strong>React Native Paper</strong> for Material Design components.</li>\n<li><strong>Routing</strong>: <strong>Expo Router</strong> for file-system based routing.</li>\n<li><strong>State Management</strong>: <strong>React Context</strong> for global authentication state.</li>\n</ul>\n<h3>1.3. Backend (Shared)</h3>\n<ul>\n<li><strong>Platform</strong>: A serverless architecture powered by <strong>Supabase</strong>.\n<ul>\n<li><st",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "rong>Database</strong>: A <strong>PostgreSQL</strong> database.</li>\n<li><strong>Authentication</strong>: Supabase Auth for managing user accounts and sessions across both clients.</li>\n<li><strong>Serverless Functions</strong>: Business logic encapsulated in <strong>Deno-based TypeScript functions</strong> (Supabase Edge Functions).</li>\n</ul>\n</li>\n</ul>\n<h2>2. Frontend Architecture</h2>\n<h3>2.1. Web App (<code>style-referral-ring</code>)</h3>\n<p>The web frontend is located in the <code>src/</",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "code> directory and follows a standard component-based structure.</p>\n<ul>\n<li><strong><code>src/pages/</code></strong>: Top-level components for each route.</li>\n<li><strong><code>src/components/</code></strong>: Reusable React components, organized by feature.</li>\n<li><strong><code>src/App.tsx</code></strong>: The main application component that sets up routing and global providers.</li>\n</ul>\n<h3>2.2. Mobile App (<code>clientpass-react-native</code>)</h3>\n<p>The mobile frontend is built with",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "Expo and uses a file-system based routing approach.</p>\n<ul>\n<li><strong><code>app/</code></strong>: The main directory for all routes and screens.\n<ul>\n<li><strong><code>app/(tabs)/</code></strong>: Defines the primary tab bar navigation for authenticated users.</li>\n<li><strong><code>app/(auth)/</code></strong>: Defines the authentication stack (login, signup).</li>\n<li><strong><code>app/_layout.tsx</code></strong>: The root layout component that wraps the entire application and manages the n",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "avigation state.</li>\n</ul>\n</li>\n<li><strong><code>components/</code></strong>: Contains reusable React Native components.\n<ul>\n<li><strong><code>components/dashboards/</code></strong>: High-level dashboard components for each user role.</li>\n</ul>\n</li>\n<li><strong><code>contexts/</code></strong>: Holds global React Context providers, like <code>AuthContext</code>.</li>\n</ul>\n<h2>3. Backend Architecture</h2>\n<p>The backend is entirely managed through Supabase, serving both the web and mobile c",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "lients.</p>\n<ul>\n<li><strong>Database Schema</strong>: Defined via SQL migration files in <code>supabase/migrations/</code>. It includes tables for <code>users</code>, <code>referrals</code>, <code>open_chairs</code>, <code>payments</code>, etc.</li>\n<li><strong>Edge Functions</strong>: Located in <code>supabase/functions/</code>, each folder represents a serverless function that can be invoked from either the web or mobile client.</li>\n<li><strong>Authentication</strong>: Supabase Auth provides",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "a unified authentication system for both applications.</li>\n</ul>\n<h2>4. Data Flow</h2>\n<p>The data flow is consistent for both the web and mobile applications.</p>\n<ol>\n<li><strong>User Interaction</strong>: A user performs an action in the React (web) or React Native (mobile) frontend.</li>\n<li><strong>Client-Side Logic</strong>: The frontend component calls a function that uses the Supabase client (<code>@supabase/supabase-js</code>).</li>\n<li><strong>Backend Invocation</strong>:\n<ul>\n<li>Fo",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "r simple data retrieval, the client queries the Supabase database directly (respecting RLS policies).</li>\n<li>For complex business logic, the client invokes a Supabase Edge Function.</li>\n</ul>\n</li>\n<li><strong>Edge Function Execution</strong>: The serverless function runs, interacting with the database.</li>\n<li><strong>Response</strong>: The function returns a response to the client.</li>\n<li><strong>UI Update</strong>: The frontend uses the response to update its state and re-render the UI.",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a72",
    "content": "</li>\n</ol>",
    "start_char": 5000,
    "end_char": 5012,
    "source_file": "ARCHITECTURE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a72",
      "revision": 14
    }
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "<h1>Auto-Match System</h1>\n<p>This document provides a detailed description of the Auto-Match System feature.</p>\n<h2>1. Overview</h2>\n<p>The <code>AutoMatchSystem</code> is a comprehensive feature that allows clients to find and connect with professionals based on a variety of criteria. It provides a user-friendly interface for clients to specify their needs and receive a list of suitable stylists or barbers.</p>\n<p>The feature is implemented in the <code>AutoMatchSystem.tsx</code> component.</",
    "start_char": 0,
    "end_char": 500,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "p>\n<h2>2. Features</h2>\n<h3>2.1. Advanced Filtering</h3>\n<p>Clients can filter professionals by a combination of criteria to find the perfect match:</p>\n<ul>\n<li><strong>Location:</strong>\n<ul>\n<li><strong>ZIP Code:</strong> To find professionals in a specific area.</li>\n<li><strong>Distance Radius:</strong> To limit the search to a certain distance from the specified ZIP code.</li>\n</ul>\n</li>\n<li><strong>Services:</strong>\n<ul>\n<li>Clients can select one or more specific services they are inte",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "rested in (e.g., Haircut, Coloring, Beard Trim).</li>\n</ul>\n</li>\n<li><strong>Availability:</strong>\n<ul>\n<li><strong>ASAP (Hot Seat):</strong> For clients who need a service immediately. This prioritizes stylists who have marked themselves as available for last-minute bookings.</li>\n<li><strong>Future Booking:</strong> For clients who want to schedule an appointment in advance.</li>\n</ul>\n</li>\n</ul>\n<h3>2.2. Stylist Matching Algorithm</h3>\n<ul>\n<li>Based on the selected filters, the system que",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "ries the database to find professionals who match the criteria.</li>\n<li>The matching algorithm considers the following factors:\n<ul>\n<li><strong>Location:</strong> The stylist's ZIP code must be within the specified distance radius.</li>\n<li><strong>Services:</strong> The stylist must offer all the selected services.</li>\n<li><strong>Availability:</strong> The stylist's availability must match the client's selection (ASAP or future).</li>\n</ul>\n</li>\n<li>The search results are sorted by the sty",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "list's rating and their availability.</li>\n</ul>\n<h3>2.3. Stylist Profiles</h3>\n<p>The search results are displayed as a list of stylist profile cards. Each card includes the following key information:</p>\n<ul>\n<li>Stylist's name and profile picture.</li>\n<li>Location (city and state).</li>\n<li>Average rating and number of reviews.</li>\n<li>Distance from the client's specified location.</li>\n<li>A list of available services.</li>\n<li>A &quot;Request a Pro&quot; button to initiate a booking reque",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "st.</li>\n</ul>\n<h3>2.4. Trusted Network</h3>\n<ul>\n<li>The <code>AutoMatchSystem</code> also includes a <code>TrustedNetwork</code> feature.</li>\n<li>This allows users to build a network of trusted professionals.</li>\n<li>When searching for a stylist, clients can choose to search within their trusted network first.</li>\n</ul>\n<h3>2.5. User Preferences</h3>\n<ul>\n<li>The system can load and save user preferences (e.g., default ZIP code, distance radius).</li>\n<li>This provides a more personalized a",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "nd convenient experience for returning users.</li>\n</ul>\n<h2>3. Data Flow</h2>\n<ol>\n<li>The component loads user preferences and available services on mount.</li>\n<li>The user sets their desired filters (ZIP code, distance, services, availability).</li>\n<li>When the user clicks &quot;Search Pros&quot;, the <code>searchStylists</code> function is called.</li>\n<li>This function queries the backend (or the <code>demoMatching</code> service in demo mode) to find professionals that match the criteria",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": ".</li>\n<li>The results are displayed to the user, sorted by rating and availability.</li>\n<li>The user can then view the profile of a professional or click &quot;Request a Pro&quot; to send a booking request.</li>\n</ol>\n<h2>4. Component Usage</h2>\n<p>The <code>AutoMatchSystem</code> component is designed to be a central part of the client's booking journey.</p>\n<pre><code class=\"language-tsx\">import { AutoMatchSystem } from '@/components/auto-match/AutoMatchSystem';\n\nconst MyPage = () =&gt; {",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "return (\n    &lt;AutoMatchSystem onBack={() =&gt; console.log('Back to dashboard')} /&gt;\n  );\n};\n</code></pre>\n<h2>5. AI Enhancement Opportunities</h2>\n<p>The Auto-Match System is a prime candidate for enhancement with Artificial Intelligence (AI) and Large Language Models (LLMs). An AI-powered matching system could provide more intelligent and personalized recommendations to clients.</p>\n<p>For a detailed breakdown of the AI opportunities for this feature, please refer to the <strong><a href=\"",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "./AI_OPPORTUNITIES.md\">AI Opportunities</a></strong> document.</p>\n<p>Key AI enhancement ideas include:</p>\n<ul>\n<li><strong>Semantic Search:</strong> Instead of just matching keywords, an AI-powered system could understand the semantic meaning of a client's request (e.g., &quot;a stylist who is good with curly hair and can do a modern balayage&quot;).</li>\n<li><strong>Image-Based Matching:</strong> Clients could upload inspiration photos, and the system could use image analysis to find stylists",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "AUTO_MATCH_SYSTEM",
    "content": "with similar work in their portfolios.</li>\n<li><strong>Personalized Rankings:</strong> The system could learn a client's preferences over time and rank the search results based on their individual style and booking history.</li>\n</ul>",
    "start_char": 5000,
    "end_char": 5237,
    "source_file": "AUTO_MATCH_SYSTEM.md",
    "frontmatter": {}
  },
  {
    "doc_id": "BOOST_PROFILE",
    "content": "<h1>Boost Profile</h1>\n<p>This document provides a detailed description of the Boost Profile feature.</p>\n<h2>1. Overview</h2>\n<p>The Boost Profile feature allows stylists to increase their visibility on the ClientPass platform, leading to more referrals and client bookings. It provides a mechanism for stylists to temporarily elevate their profile's prominence.</p>\n<p>The page is implemented in the <code>BoostProfilePage.tsx</code> page, which wraps the <code>BoostProfile</code> component.</p>\n<",
    "start_char": 0,
    "end_char": 500,
    "source_file": "BOOST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "BOOST_PROFILE",
    "content": "h2>2. Key Features</h2>\n<h3>2.1. Active Boost Status</h3>\n<ul>\n<li><strong>Real-time Status:</strong> Displays whether a profile boost is currently active.</li>\n<li><strong>Time Remaining:</strong> Shows the remaining duration of an active boost (e.g., &quot;23h 45m remaining&quot;).</li>\n<li><strong>Boost Details:</strong> Provides information about when the boost started and if a free boost credit was used.</li>\n</ul>\n<h3>2.2. Pro Member Benefits</h3>\n<ul>\n<li><strong>Free Boosts:</strong> Pro",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "BOOST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "BOOST_PROFILE",
    "content": "members receive a certain number of free boosts per month (e.g., 4 free boosts).</li>\n<li><strong>Reduced Rates:</strong> Pro members also benefit from reduced rates for additional boosts beyond their free allocation.</li>\n<li><strong>Tracking:</strong> Displays the number of free boosts remaining for the current month.</li>\n</ul>\n<h3>2.3. Boost Benefits</h3>\n<ul>\n<li><strong>Priority Placement:</strong> Boosted profiles appear at the top of search results and referral matching algorithms.</li>",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "BOOST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "BOOST_PROFILE",
    "content": "<li><strong>Increased Visibility:</strong> Profiles are highlighted with a special &quot;boost&quot; badge, attracting more attention.</li>\n<li><strong>More Referrals:</strong> Stylists can expect to receive significantly more referral opportunities during the boost period (e.g., up to 3x more).</li>\n</ul>\n<h3>2.4. Activate/Extend Boost</h3>\n<ul>\n<li><strong>Flexible Activation:</strong> Stylists can activate a 24-hour boost for their profile.</li>\n<li><strong>Extension Option:</strong> If a bo",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "BOOST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "BOOST_PROFILE",
    "content": "ost is already active, stylists can extend its duration by another 24 hours.</li>\n<li><strong>Payment/Free Credit:</strong> The system intelligently determines if a free Pro member boost is available or if payment is required.</li>\n<li><strong>Confirmation Dialog:</strong> A confirmation dialog provides a summary of the boost benefits and cost before activation.</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Boost Profile feature interacts with the following tables in the Supabase database:</p>\n<ul>\n<",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "BOOST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "BOOST_PROFILE",
    "content": "li><code>boosts</code>: Stores information about active and past boosts, including <code>boost_type</code>, <code>start_at</code>, <code>end_at</code>, <code>status</code>, and <code>pro_id</code>.</li>\n<li><code>users</code>: Stores user profile information, including <code>membership</code> status and <code>free_boosts_used_this_month</code>.</li>\n</ul>\n<h2>4. User Interface</h2>\n<p>The Boost Profile page features:</p>\n<ul>\n<li>A header with a back button and a &quot;Boost Profile&quot; title.",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "BOOST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "BOOST_PROFILE",
    "content": "</li>\n<li>Sections for displaying active boost status, Pro member benefits, and general boost benefits.</li>\n<li>A prominent &quot;Activate Boost&quot; card with options to purchase or use free credits.</li>\n<li>A confirmation dialog for boost activation.</li>\n</ul>",
    "start_char": 3000,
    "end_char": 3267,
    "source_file": "BOOST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "<h1>CI/CD Strategy</h1>\n<h2>1. Introduction</h2>\n<h3>1.1 Purpose</h3>\n<p>This document outlines the Continuous Integration (CI) and Continuous Deployment (CD) strategy for the ClientPass application. The goal is to establish a fully automated pipeline for building, testing, and deploying the frontend application and backend infrastructure to ensure rapid, reliable, and consistent releases.</p>\n<h2>2. Core Technologies</h2>\n<ul>\n<li><strong>Version Control</strong>: GitHub</li>\n<li><strong>CI/CD",
    "start_char": 0,
    "end_char": 500,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "Platform</strong>: GitHub Actions</li>\n<li><strong>Frontend Hosting</strong>: Vercel (recommended for its seamless integration with Vite/React)</li>\n<li><strong>Backend &amp; Database</strong>: Supabase (including Edge Functions and PostgreSQL)</li>\n</ul>\n<h2>3. Branching Strategy</h2>\n<p>We will adopt a <strong>GitHub Flow</strong> branching model, which is simple and well-suited for web applications that require frequent deployments.</p>\n<ul>\n<li><strong><code>main</code> branch</strong>: This",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "is the primary branch. It represents the production-ready state of the application. All pull requests are merged into <code>main</code> after review and passing checks.</li>\n<li><strong>Feature branches</strong>: All new work (features, bug fixes) must be done on a separate branch, created from <code>main</code>. Branch names should be descriptive (e.g., <code>feat/user-dashboard</code>, <code>fix/login-bug</code>).</li>\n<li><strong>Pull Requests (PRs)</strong>: Changes are merged into <code>ma",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "in</code> via a Pull Request. A PR must be reviewed by at least one other team member and must pass all automated CI checks before it can be merged.</li>\n</ul>\n<h2>4. Continuous Integration (CI) Pipeline</h2>\n<p>The CI pipeline will be managed by <strong>GitHub Actions</strong>. A workflow file will be created at <code>.github/workflows/ci.yml</code>.</p>\n<ul>\n<li>\n<p><strong>Trigger</strong>: The CI workflow will run on every <code>push</code> to any branch and on every <code>pull_request</code",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "> targeting the <code>main</code> branch.</p>\n</li>\n<li>\n<p><strong>Jobs</strong>:</p>\n<ol>\n<li><strong>Lint</strong>: Runs <code>npm run lint</code> to enforce code style and catch syntax errors early.</li>\n<li><strong>Unit &amp; Integration Tests</strong>: Runs <code>npm run test</code> to execute all automated tests using Jest and React Testing Library. This is a critical quality gate.</li>\n<li><strong>Build</strong>: Runs <code>npm run build</code> to ensure the Vite application compiles suc",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "cessfully for production. This catches type errors and build configuration issues.</li>\n</ol>\n</li>\n</ul>\n<p>If any of these jobs fail, the PR will be blocked from merging.</p>\n<h2>5. Continuous Deployment (CD) Pipeline</h2>\n<p>The CD pipeline will handle the deployment of the frontend and backend to different environments.</p>\n<h3>5.1 Staging Environment</h3>\n<ul>\n<li><strong>Purpose</strong>: A pre-production environment that mirrors production for final testing and UAT.</li>\n<li><strong>Trigg",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "er</strong>: Automatic deployment on every merge to the <code>main</code> branch.</li>\n<li><strong>Frontend Deployment</strong>: The project will be linked to Vercel. Vercel will automatically detect pushes to <code>main</code> and deploy the frontend, providing a stable staging URL.</li>\n<li><strong>Backend Deployment</strong>: The GitHub Actions workflow will use the <strong>Supabase CLI</strong> to deploy backend changes:\n<ul>\n<li><strong>Database Migrations</strong>: <code>supabase db push</",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "code> will apply any new migrations from the <code>supabase/migrations</code> directory to the staging Supabase project.</li>\n<li><strong>Edge Functions</strong>: <code>supabase functions deploy</code> will deploy all functions in the <code>supabase/functions</code> directory.</li>\n</ul>\n</li>\n</ul>\n<h3>5.2 Production Environment</h3>\n<ul>\n<li><strong>Purpose</strong>: The live environment for end-users.</li>\n<li><strong>Trigger</strong>: Manual deployment for controlled releases. This can be a",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "manual workflow dispatch in GitHub Actions or by promoting a Vercel deployment.</li>\n<li><strong>Frontend Deployment</strong>: A Vercel deployment from the <code>main</code> branch that has been verified on staging is promoted to the production domain.</li>\n<li><strong>Backend Deployment</strong>: The same GitHub Actions workflow used for staging will be run with production environment variables to deploy database migrations and Edge Functions to the production Supabase project.</li>\n</ul>\n<h2>6",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": ". Database Migrations</h2>\n<p>Database schema changes will be managed through Supabase's migration system.</p>\n<ol>\n<li><strong>Local Development</strong>: Developers create new migration files using the Supabase CLI: <code>supabase migration new &lt;migration_name&gt;</code>.</li>\n<li><strong>Committing</strong>: The generated SQL file in <code>supabase/migrations</code> is committed to the feature branch.</li>\n<li><strong>Deployment</strong>: The CI/CD pipeline automatically applies the new mi",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": "gration to the staging and production databases using <code>supabase db push</code> during deployment.</li>\n</ol>\n<h2>7. Environment Variables and Secrets</h2>\n<p>Secrets and environment-specific variables will be managed securely:</p>\n<ul>\n<li><strong>GitHub Actions Secrets</strong>: Used to store <code>SUPABASE_ACCESS_TOKEN</code>, <code>SUPABASE_DB_PASSWORD</code>, and other tokens required for the CI/CD pipeline to interact with Supabase.</li>\n<li><strong>Vercel Environment Variables</strong",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a76",
    "content": ">: Used to store frontend-specific variables like <code>VITE_SUPABASE_URL</code> and <code>VITE_SUPABASE_ANON_KEY</code>. Separate sets of variables will be maintained for <code>Preview</code> (staging) and <code>Production</code> environments.</li>\n<li><strong>Supabase Environment Variables</strong>: Used for secrets required by Edge Functions (e.g., API keys for third-party services like Resend). These are managed directly in the Supabase project dashboard.</li>\n</ul>",
    "start_char": 5500,
    "end_char": 5975,
    "source_file": "CICD_STRATEGY.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a76",
      "revision": 14
    }
  },
  {
    "doc_id": "CLIENT_DASHBOARD",
    "content": "<h1>Client Dashboard</h1>\n<p>This document provides a detailed description of the Client Dashboard, the main interface for clients using the ClientPass platform. It allows them to book appointments, manage their schedule, and track their referrals.</p>\n<h2>1. Overview</h2>\n<p>The Client Dashboard is designed to provide a seamless and intuitive experience for clients. It serves as their personal hub for all interactions with stylists and the ClientPass platform.</p>\n<h2>2. Key Features</h2>\n<h3>2",
    "start_char": 0,
    "end_char": 500,
    "source_file": "CLIENT_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_DASHBOARD",
    "content": ".1. Upcoming Appointments</h3>\n<ul>\n<li><strong>At-a-Glance View:</strong> Clients can quickly see their next upcoming appointment, including the stylist's name, service, and time.</li>\n<li><strong>Appointment Management:</strong> Options to reschedule or cancel appointments directly from the dashboard.</li>\n</ul>\n<h3>2.2. My Stylists</h3>\n<ul>\n<li><strong>Favorite Stylists:</strong> A list of stylists the client has previously booked with or marked as favorites.</li>\n<li><strong>Easy Rebooking:",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "CLIENT_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_DASHBOARD",
    "content": "</strong> Quick access to book new appointments with their preferred stylists.</li>\n<li><strong>Discover New Stylists:</strong> May include recommendations for new stylists based on past bookings or preferences.</li>\n</ul>\n<h3>2.3. Share and Earn</h3>\n<ul>\n<li><strong>Referral Program:</strong> Information about the ClientPass referral program, encouraging clients to refer friends and earn rewards.</li>\n<li><strong>Sharing Tools:</strong> A button to easily share their unique referral link with",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "CLIENT_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_DASHBOARD",
    "content": "friends and family.</li>\n</ul>\n<h3>2.4. Booking Workflow</h3>\n<ul>\n<li><strong>Intuitive Booking:</strong> A streamlined process for finding and booking new appointments with stylists.</li>\n<li><strong>Service Selection:</strong> Clients can select desired services and view stylist availability.</li>\n</ul>\n<h3>2.5. Appointment History</h3>\n<ul>\n<li><strong>Past Appointments:</strong> A record of all past appointments, including details of services received and stylists visited.</li>\n<li><strong>",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "CLIENT_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_DASHBOARD",
    "content": "Reviews:</strong> Option to leave reviews for past services.</li>\n</ul>\n<h3>2.6. Notifications</h3>\n<ul>\n<li><strong>Centralized Inbox:</strong> An inbox for all notifications, including appointment confirmations, reminders, and promotional offers.</li>\n</ul>\n<h3>2.7. Profile Management</h3>\n<ul>\n<li><strong>Personal Settings:</strong> A page for managing the client's personal profile and settings.</li>\n<li><strong>Payment Methods:</strong> Management of payment information.</li>\n</ul>\n<h2>3. Us",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "CLIENT_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_DASHBOARD",
    "content": "er Interface</h2>\n<p>The Client Dashboard features a clean and intuitive user interface:</p>\n<ul>\n<li><strong>Header:</strong> Contains the ClientPass logo and a user profile button (which opens a dropdown with &quot;My Appointments&quot; and &quot;Logout&quot;).</li>\n<li><strong>Main Content Area:</strong> Displays various cards and sections for upcoming appointments, stylists, and referral information.</li>\n<li><strong>Bottom Navigation:</strong> Provides easy access to the main sections of th",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "CLIENT_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_DASHBOARD",
    "content": "e dashboard (Home, Book, History, Profile).</li>\n</ul>\n<h2>4. Benefits</h2>\n<ul>\n<li><strong>Convenience:</strong> Easy access to booking, managing appointments, and tracking referrals.</li>\n<li><strong>Personalization:</strong> Tailored experience based on past interactions and preferences.</li>\n<li><strong>Rewards:</strong> Opportunity to earn rewards through the referral program.</li>\n<li><strong>Transparency:</strong> Clear overview of appointments, earnings, and notifications.</li>\n</ul>",
    "start_char": 3000,
    "end_char": 3498,
    "source_file": "CLIENT_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_REFERRAL",
    "content": "<h1>Client Referral</h1>\n<p>This document provides a detailed description of the Client Referral feature.</p>\n<h2>1. Overview</h2>\n<p>The Client Referral feature allows a client to book an appointment with a stylist based on a referral link. This link is typically sent to the client by another stylist or by the ClientPass system.</p>\n<p>The page is implemented in the <code>ClientReferral.tsx</code> page, which wraps the <code>ClientReferralDashboard.tsx</code> component.</p>\n<h2>2. Features</h2>",
    "start_char": 0,
    "end_char": 500,
    "source_file": "CLIENT_REFERRAL.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_REFERRAL",
    "content": "<h3>2.1. View Referral Details</h3>\n<ul>\n<li>When a client opens a referral link, they are taken to the Client Referral Dashboard.</li>\n<li>The page fetches and displays the details of the referral, including:\n<ul>\n<li>Client's name</li>\n<li>Service type</li>\n<li>Estimated price</li>\n<li>Deposit required</li>\n<li>Any notes from the referring stylist.</li>\n</ul>\n</li>\n<li>The page also shows the status of the referral (e.g., <code>pending</code>, <code>confirmed</code>).</li>\n</ul>\n<h3>2.2. View",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "CLIENT_REFERRAL.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_REFERRAL",
    "content": "Referred Stylist</h3>\n<ul>\n<li>The page prominently displays the stylist who was originally referred to the client.</li>\n<li>The stylist's card shows their name, photo, membership tier (Pro), rating, specialties, and price range.</li>\n<li>The client can view the stylist's full profile or book an appointment directly from this card.</li>\n</ul>\n<h3>2.3. View Alternative Stylists</h3>\n<ul>\n<li>In addition to the referred stylist, the page also displays a list of other available professionals.</li>",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "CLIENT_REFERRAL.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_REFERRAL",
    "content": "<li>This gives the client more options to choose from if the referred stylist is not a good fit.</li>\n<li>Each alternative stylist is displayed in a similar card format with their details.</li>\n</ul>\n<h3>2.4. Book an Appointment</h3>\n<ul>\n<li>The client can book an appointment with either the referred stylist or one of the alternative stylists.</li>\n<li>Clicking the &quot;Book Now&quot; button initiates the booking process.</li>\n<li>For the demo, this simulates a deposit payment and confirms th",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "CLIENT_REFERRAL.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_REFERRAL",
    "content": "e booking.</li>\n<li>The status of the referral is then updated to <code>confirmed</code> in the database.</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Client Referral feature interacts with the following tables in the Supabase database:</p>\n<ul>\n<li><code>client_referral_links</code>: This table stores the unique tokens for client referral links and maps them to a <code>referral_id</code>.</li>\n<li><code>referrals</code>: This table contains the core details of the referral.</li>\n<li><code>users</co",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "CLIENT_REFERRAL.md",
    "frontmatter": {}
  },
  {
    "doc_id": "CLIENT_REFERRAL",
    "content": "de>: This table stores the profiles of the stylists.</li>\n</ul>\n<h2>4. User Interface</h2>\n<p>The user interface consists of:</p>\n<ul>\n<li>A header with the application name.</li>\n<li>A main content area that displays the appointment details, the referred stylist, and a list of alternative stylists.</li>\n<li>A section with the deposit and cancellation policy.</li>\n</ul>",
    "start_char": 2500,
    "end_char": 2873,
    "source_file": "CLIENT_REFERRAL.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "<h1>Frontend Component Guide</h1>\n<h2>1. Introduction</h2>\n<p>This document provides an overview of the component libraries used in the ClientPass application, covering both the web and mobile frontends.</p>\n<hr>\n<h2>2. Web Application (<code>style-referral-ring</code>)</h2>\n<h3>2.1. Component Philosophy</h3>\n<ul>\n<li><strong>Foundation</strong>: The UI is built upon <strong>shadcn-ui</strong>, which provides unstyled, accessible base components (primitives).</li>\n<li><strong>Styling</strong>: A",
    "start_char": 0,
    "end_char": 500,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "ll components are styled using <strong>Tailwind CSS</strong> utility classes.</li>\n<li><strong>Composition</strong>: Complex components are built by composing simpler ones.</li>\n</ul>\n<h3>2.2. Component Directory Structure</h3>\n<ul>\n<li><strong><code>src/components/ui/</code></strong>: Contains the base UI primitives from <code>shadcn-ui</code> (e.g., <code>Button</code>, <code>Card</code>, <code>Input</code>).</li>\n<li><strong><code>src/components/{feature}/</code></strong>: Contains custom com",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "ponents, specific to a particular feature domain (e.g., <code>src/components/referrals/</code>).</li>\n</ul>\n<h3>2.3. Key Feature Components</h3>\n<p>(This section describes the web app's components which are used as a reference for the mobile app)</p>\n<ul>\n<li><strong>Authentication (<code>/auth</code>)</strong>: <code>LoginForm</code>, <code>SignUpForm</code>, <code>RoleGuard</code>.</li>\n<li><strong>Administration (<code>/admin</code>)</strong>: <code>MasterAdminConsole</code> and its various m",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "odules.</li>\n<li><strong>Referrals (<code>/referrals</code>)</strong>: <code>EnhancedReferralForm</code>, <code>CountdownTimer</code>.</li>\n<li><strong>Open Chair (<code>/open-chair</code>)</strong>: <code>PostOpenChairForm</code>, <code>LiveSessionCard</code>.</li>\n<li><strong>And more...</strong></li>\n</ul>\n<hr>\n<h2>3. React Native Mobile App (<code>clientpass-react-native</code>)</h2>\n<h3>3.1. Component Philosophy</h3>\n<ul>\n<li><strong>Foundation</strong>: The UI is built using <strong>React",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "Native Paper</strong>, a component library that implements Google's Material Design.</li>\n<li><strong>Styling</strong>: All components are styled using React Native's core <strong>StyleSheet</strong> API. A global theme is defined in <code>app/_layout.tsx</code> to ensure consistency.</li>\n<li><strong>Icons</strong>: Icons are primarily from the <strong>lucide-react-native</strong> library to maintain visual consistency with the web application.</li>\n</ul>\n<h3>3.2. Component Directory Structure<",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "/h3>\n<ul>\n<li><strong><code>app/(tabs)/</code></strong>: These files define the primary screens accessible from the main tab bar (e.g., <code>index.tsx</code> for Home, <code>schedule.tsx</code>, <code>earnings.tsx</code>).</li>\n<li><strong><code>components/</code></strong>: Contains reusable React Native components.\n<ul>\n<li><strong><code>components/dashboards/</code></strong>: Contains the top-level dashboard components for each user role (<code>ProDashboard</code>, <code>ClientDashboard</code",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": ">, etc.).\n<ul>\n<li><strong><code>components/dashboards/client/</code></strong>: Contains the sub-components that make up the tabbed <code>ClientDashboard</code>.</li>\n</ul>\n</li>\n<li><strong><code>components/ui/</code></strong>: Contains custom, reusable UI elements like <code>CustomSegmentedControl</code>.</li>\n<li><strong>Feature-specific components</strong>: Other components are organized by feature (e.g., <code>boost/</code>, <code>client/</code>, <code>dashboard/</code>).</li>\n</ul>\n</li>\n<",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "/ul>\n<h3>3.3. Base UI Components (<code>react-native-paper</code>)</h3>\n<p>These are the foundational components from React Native Paper.</p>\n<ul>\n<li><code>Button</code>: For all clickable actions.</li>\n<li><code>Card</code>, <code>Card.Content</code>, <code>Card.Title</code>: The primary container for grouping related content.</li>\n<li><code>TextInput</code>: For all text input fields.</li>\n<li><code>List.Item</code>, <code>List.Section</code>: For creating structured lists.</li>\n<li><code>Ava",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "tar.Icon</code>, <code>Avatar.Image</code>: For displaying user avatars.</li>\n<li><code>Badge</code>: For status indicators.</li>\n<li><code>Switch</code>: For boolean toggles.</li>\n<li><code>SegmentedButtons</code>: For tab-like controls.</li>\n</ul>\n<h3>3.4. Key Feature Components</h3>\n<p>This section highlights some of the most important custom components built for the mobile app.</p>\n<h4>Dashboards (<code>/components/dashboards/</code>)</h4>\n<ul>\n<li><strong><code>RoleBasedHomeScreen</code> (<",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "code>app/(tabs)/index.tsx</code>)</strong>: A top-level router component that renders the correct dashboard based on the authenticated user's role.</li>\n<li><strong><code>ProDashboard.tsx</code></strong>: The main dashboard for professional users. It includes <code>EarningsCard</code>, <code>BoostStatusCard</code>, and a series of <code>ActionCard</code>s for key workflows like posting open chairs and sending referrals.</li>\n<li><strong><code>ClientDashboard.tsx</code></strong>: A self-contained",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": ", tabbed dashboard for clients. It includes sub-components for a home overview, booking, payments, schedule, and more.</li>\n<li><strong><code>SuiteDashboard.tsx</code></strong>: A dashboard for salon suite owners to monitor in-suite activity.</li>\n<li><strong><code>AdminDashboard.tsx</code> &amp; <code>AffiliateDashboard.tsx</code></strong>: Dashboards for admin and affiliate users.</li>\n</ul>\n<h4>Core UI (<code>/components/</code>)</h4>\n<ul>\n<li><strong><code>ActionCard.tsx</code></strong>: A r",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "eusable card component for displaying a primary action with an icon, title, description, and navigation link.</li>\n<li><strong><code>ClientPassLogo.tsx</code></strong>: Displays the application's logo.</li>\n<li><strong><code>CustomSegmentedControl.tsx</code></strong>: A custom-styled tab selector that mimics the visual style of the web application's tabs.</li>\n</ul>\n<h4>Feature Screens (<code>/app/(tabs)/</code>)</h4>\n<ul>\n<li><strong><code>earnings.tsx</code></strong>: A screen for professional",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a78",
    "content": "s to track their pending, completed, and total earnings over different time periods.</li>\n<li><strong><code>pro-hub.tsx</code></strong>: A screen that displays featured partner deals and upcoming features for professionals.</li>\n<li><strong><code>inbox.tsx</code></strong>: A screen for users to view notifications, with a focus on actionable referral requests that include countdown timers.</li>\n</ul>",
    "start_char": 6000,
    "end_char": 6403,
    "source_file": "COMPONENT_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a78",
      "revision": 14
    }
  },
  {
    "doc_id": "COUNTDOWN_TIMER",
    "content": "<h1>Countdown Timer Component</h1>\n<p>This document provides a detailed description of the <code>CountdownTimer</code> component.</p>\n<h2>1. Overview</h2>\n<p>The <code>CountdownTimer</code> component is a reusable UI element designed to display a real-time countdown to a specified target time. It is primarily used in scenarios where a time-sensitive action or event is pending, such as referral response deadlines.</p>\n<h2>2. Features</h2>\n<h3>2.1. Real-time Countdown</h3>\n<ul>\n<li>Displays the re",
    "start_char": 0,
    "end_char": 500,
    "source_file": "COUNTDOWN_TIMER.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COUNTDOWN_TIMER",
    "content": "maining time in a user-friendly format (e.g., &quot;09m 30s&quot;).</li>\n<li>Updates every second to provide an accurate countdown.</li>\n</ul>\n<h3>2.2. Customizable Display</h3>\n<ul>\n<li><strong>Title:</strong> A customizable title can be displayed above the timer (e.g., &quot;Response Required&quot;, &quot;Waiting for Response&quot;).</li>\n<li><strong>Description:</strong> An optional description can be provided to give more context to the timer.</li>\n<li><strong>Recipient Name:</strong> Can di",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "COUNTDOWN_TIMER.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COUNTDOWN_TIMER",
    "content": "splay the name of the recipient for whom the timer is relevant.</li>\n</ul>\n<h3>2.3. Status Handling</h3>\n<ul>\n<li>The component supports different statuses (e.g., <code>waiting</code>, <code>expired</code>).</li>\n<li>The visual presentation of the timer can change based on its status (e.g., red color for expired timers).</li>\n</ul>\n<h3>2.4. Time-Up Callback</h3>\n<ul>\n<li>When the countdown reaches zero, a specified callback function (<code>onTimeUp</code>) is triggered.</li>\n<li>This allows the",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "COUNTDOWN_TIMER.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COUNTDOWN_TIMER",
    "content": "parent component to handle events that occur when the time limit is reached (e.g., reassigning a referral).</li>\n</ul>\n<h2>3. Usage</h2>\n<p>The <code>CountdownTimer</code> component is used in pages like <code>ReferralTimersPage.tsx</code> and <code>WaitingForResponse.tsx</code> to manage time-sensitive referral actions.</p>\n<pre><code class=\"language-tsx\">import { CountdownTimer } from '@/components/referrals/CountdownTimer';\n\nconst MyPage = () =&gt; {\n  const handleTimeUp = () =&gt; {\n    cons",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "COUNTDOWN_TIMER.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COUNTDOWN_TIMER",
    "content": "ole.log('Time is up!');\n    // Perform action, e.g., reassign referral\n  };\n\n  return (\n    &lt;CountdownTimer\n      targetTime=&quot;2025-12-31T23:59:59Z&quot; // ISO string\n      onTimeUp={handleTimeUp}\n      title=&quot;Deadline Approaching&quot;\n      description=&quot;Please respond to this request soon.&quot;\n      status=&quot;waiting&quot;\n    /&gt;\n  );\n};\n</code></pre>\n<h2>4. Props</h2>\n<ul>\n<li><code>targetTime</code>: (string) An ISO 8601 formatted string representing the target end",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "COUNTDOWN_TIMER.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COUNTDOWN_TIMER",
    "content": "time of the countdown.</li>\n<li><code>onTimeUp</code>: (function) A callback function to be executed when the countdown reaches zero.</li>\n<li><code>title</code>: (string, optional) A title to display above the timer.</li>\n<li><code>description</code>: (string, optional) A description to display below the timer.</li>\n<li><code>recipientName</code>: (string, optional) The name of the recipient for whom the timer is relevant.</li>\n<li><code>status</code>: (string) The current status of the timer (",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "COUNTDOWN_TIMER.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COUNTDOWN_TIMER",
    "content": "e.g., <code>waiting</code>, <code>expired</code>).</li>\n<li><code>onAction</code>: (function, optional) A callback function for actions related to the timer (e.g., accept/decline).</li>\n</ul>",
    "start_char": 3000,
    "end_char": 3192,
    "source_file": "COUNTDOWN_TIMER.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COVERAGE_MODE",
    "content": "<h1>Coverage Mode</h1>\n<p>This document provides a detailed description of the Coverage Mode feature.</p>\n<h2>1. Overview</h2>\n<p>The Coverage Mode feature allows stylists to temporarily make themselves unavailable while ensuring their clients can still receive services from trusted colleagues. When a stylist activates Coverage Mode, other stylists within their trusted network can step in to cover their clients' needs. This feature is crucial for maintaining client satisfaction and business cont",
    "start_char": 0,
    "end_char": 500,
    "source_file": "COVERAGE_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COVERAGE_MODE",
    "content": "inuity during a stylist's absence.</p>\n<p>The page is implemented in the <code>CoverageMode.tsx</code> page, which wraps the <code>CoverageModePage.tsx</code> component.</p>\n<h2>2. Key Features</h2>\n<h3>2.1. Activation and Deactivation</h3>\n<ul>\n<li><strong>Toggle Switch:</strong> Stylists can easily activate or deactivate Coverage Mode using a prominent toggle switch on the page.</li>\n<li><strong>Status Display:</strong> The current status of Coverage Mode (e.g., &quot;Active&quot;, &quot;Inact",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "COVERAGE_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COVERAGE_MODE",
    "content": "ive&quot;) is clearly displayed.</li>\n</ul>\n<h3>2.2. Duration Setting</h3>\n<ul>\n<li><strong>Flexible Duration:</strong> Stylists can set a specific duration for their Coverage Mode (e.g., 1 day, 1 week, custom date range).</li>\n<li><strong>Automatic Deactivation:</strong> The system automatically deactivates Coverage Mode once the set duration expires.</li>\n</ul>\n<h3>2.3. Trusted Network Integration</h3>\n<ul>\n<li>When Coverage Mode is active, the stylist's clients can be referred to other stylis",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "COVERAGE_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COVERAGE_MODE",
    "content": "ts within their pre-defined trusted network.</li>\n<li>This ensures that clients are covered by professionals who meet the stylist's standards and preferences.</li>\n</ul>\n<h3>2.4. Client Communication</h3>\n<ul>\n<li>The system can automatically inform clients that their primary stylist is in Coverage Mode and suggest alternative stylists from the trusted network. (This is an implied feature based on the concept).</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Coverage Mode feature interacts with the <co",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "COVERAGE_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COVERAGE_MODE",
    "content": "de>users</code> table in the Supabase database. The <code>coverage_mode</code> field in the <code>users</code> table is updated to reflect the stylist's availability status. Additional fields might include <code>coverage_start_date</code> and <code>coverage_end_date</code>.</p>\n<h2>4. User Interface</h2>\n<p>The user interface for Coverage Mode typically includes:</p>\n<ul>\n<li>A header with a back button and a &quot;Coverage Mode&quot; title.</li>\n<li>A toggle switch for activation/deactivation.<",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "COVERAGE_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "COVERAGE_MODE",
    "content": "/li>\n<li>Options for setting the duration of the coverage.</li>\n<li>A clear display of the current Coverage Mode status.</li>\n</ul>",
    "start_char": 2500,
    "end_char": 2632,
    "source_file": "COVERAGE_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "<h1>Database Recommendations: MongoDB vs. Firestore vs. Supabase</h1>\n<p>This document provides a high-level overview and recommendation for the primary database, comparing MongoDB, Firestore, and Supabase.</p>\n<h2>Recommendation for MongoDB</h2>\n<h3>Introduction</h3>\n<p>MongoDB is a popular, open-source, document-based database that stores data in flexible, JSON-like documents. It's a good choice for applications that require high scalability and have a flexible schema.</p>\n<h3>Pros</h3>\n<ul>\n<",
    "start_char": 0,
    "end_char": 500,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "li><strong>Flexible Schema:</strong> MongoDB's document model allows you to store data of any structure, which can be useful for evolving applications.</li>\n<li><strong>Scalability:</strong> MongoDB is designed to scale horizontally across multiple servers, which can handle large amounts of data and traffic.</li>\n<li><strong>Rich Query Language:</strong> MongoDB has a rich query language that allows for powerful and flexible queries.</li>\n<li><strong>Good for Unstructured Data:</strong> It's wel",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "l-suited for storing unstructured or semi-structured data.</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li><strong>No Native Real-time Updates:</strong> Unlike Firestore and Supabase, MongoDB does not have a built-in solution for real-time data synchronization. You would need to implement this yourself using WebSockets or a third-party service.</li>\n<li><strong>Complex Transactions:</strong> While MongoDB supports multi-document ACID transactions, they are more complex to implement than in a traditional relat",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "ional database.</li>\n<li><strong>More Setup and Management:</strong> You are responsible for setting up and managing your own authentication, authorization, and other backend services that Supabase and Firebase provide out of the box.</li>\n</ul>\n<h3>Implementation Steps</h3>\n<ol>\n<li><strong>Set up a MongoDB Atlas cluster:</strong> MongoDB Atlas is a fully managed cloud database service that makes it easy to get started with MongoDB.</li>\n<li><strong>Redesign the data model:</strong> You would n",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "eed to redesign your data model to fit a document-based structure, deciding which data to embed and which to reference.</li>\n<li><strong>Migrate data:</strong> Write scripts to migrate your data from the existing Postgres database to MongoDB.</li>\n<li><strong>Build a new backend API:</strong> You would need to build a new backend API (e.g., using Node.js and Express) to interact with the MongoDB database.</li>\n<li><strong>Implement authentication:</strong> You would need to implement your own au",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "thentication and authorization solution using a library like Passport.js or a service like Auth0.</li>\n<li><strong>Update the frontend:</strong> Update your React Native app to use the new backend API for data fetching and updates.</li>\n</ol>\n<h2>Recommendation for Firestore</h2>\n<h3>Introduction</h3>\n<p>Firestore is a flexible, scalable, NoSQL document database from Google. It's part of the Firebase platform and is designed for building mobile, web, and serverless applications.</p>\n<h3>Pros</h3",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": ">\n<ul>\n<li><strong>Real-time Updates:</strong> Firestore has excellent real-time data synchronization capabilities out of the box.</li>\n<li><strong>Fully Managed and Serverless:</strong> Firestore is a fully managed, serverless database, which means you don't have to worry about managing servers or infrastructure.</li>\n<li><strong>Integrated with Firebase:</strong> It's tightly integrated with other Firebase services, such as Firebase Authentication, Cloud Functions, and Storage.</li>\n<li><stron",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "g>Offline Support:</strong> Firestore has built-in offline support for mobile and web apps.</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li><strong>Limited Queries:</strong> Firestore's querying capabilities are more limited compared to MongoDB. You can't perform complex queries like joins or aggregations on the client-side.</li>\n<li><strong>Data Modeling:</strong> Data modeling can be more challenging in Firestore, as you need to carefully structure your data to allow for the queries you need.</li>\n<li><stro",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "ng>Vendor Lock-in:</strong> By using Firestore, you are tying your application to the Firebase platform.</li>\n</ul>\n<h3>Implementation Steps</h3>\n<ol>\n<li><strong>Set up a Firebase project:</strong> Create a new Firebase project and enable Firestore and Firebase Authentication.</li>\n<li><strong>Redesign the data model:</strong> You would need to redesign your data model for Firestore's document-and-collection structure.</li>\n<li><strong>Migrate data:</strong> Write scripts to migrate your data f",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "rom Postgres to Firestore.</li>\n<li><strong>Replace Supabase client with Firebase SDK:</strong> You would need to replace the Supabase client with the Firebase SDK in your React Native app.</li>\n<li><strong>Use Firebase Authentication:</strong> You would use Firebase Authentication for user management.</li>\n<li><strong>Update the frontend:</strong> Update your React Native app to use the Firebase SDK for data fetching and real-time updates.</li>\n</ol>\n<h2>Recommendation for Supabase</h2>\n<h3>Int",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "roduction</h3>\n<p>Supabase is an open-source Firebase alternative. It provides a suite of tools to build backends quickly, including a Postgres database, authentication, real-time subscriptions, and auto-generated APIs.</p>\n<h3>Pros</h3>\n<ul>\n<li><strong>Postgres Database:</strong> Supabase uses a full-featured Postgres database, which provides the power and flexibility of a relational database. This is a major advantage if your application has complex data relationships.</li>\n<li><strong>Real-t",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "ime Updates:</strong> Supabase provides real-time data synchronization capabilities through its Realtime Server.</li>\n<li><strong>Auto-generated APIs:</strong> Supabase automatically generates a RESTful and a GraphQL API for your database, which can significantly speed up development.</li>\n<li><strong>Authentication and Authorization:</strong> Supabase has a built-in authentication system with support for various providers and row-level security policies.</li>\n<li><strong>Open Source:</strong> S",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "upabase is open source, which gives you more flexibility and control over your backend. You can self-host it if you want to avoid vendor lock-in.</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li><strong>Maturity:</strong> While Supabase is growing rapidly, it is a younger platform than Firebase and may have fewer features and a smaller community.</li>\n<li><strong>Scalability:</strong> While Postgres is highly scalable, managing a large-scale Postgres database can be more complex than using a serverless databas",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "e like Firestore.</li>\n</ul>\n<h3>Implementation Steps</h3>\n<p>The application is already using Supabase for some features, so the implementation steps would involve a full migration.</p>\n<ol>\n<li><strong>Full Migration to Supabase:</strong> The application is already using Supabase for authentication. A full migration would involve moving all data and backend logic to Supabase.</li>\n<li><strong>Data Modeling:</strong> You would need to design your data model in the Postgres database.</li>\n<li><s",
    "start_char": 6500,
    "end_char": 7000,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "trong>Migrate Data:</strong> Write scripts to migrate any remaining data to the Supabase Postgres database.</li>\n<li><strong>Use Supabase APIs:</strong> Update the frontend to use the auto-generated Supabase APIs for all data fetching and updates.</li>\n<li><strong>Implement Row-Level Security:</strong> Use Supabase's row-level security to control access to your data.</li>\n</ol>\n<h2>Conclusion</h2>\n<p>All three options are excellent choices, but they are suited for different needs.</p>\n<ul>\n<li><",
    "start_char": 7000,
    "end_char": 7500,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "strong>Choose MongoDB</strong> if you need a flexible schema, powerful querying capabilities, and you are willing to build and manage your own backend services.</li>\n<li><strong>Choose Firestore</strong> if you need a simple, fully managed, serverless database with excellent real-time capabilities and you are comfortable with the Firebase ecosystem.</li>\n<li><strong>Choose Supabase</strong> if you want the power and flexibility of a relational database (Postgres) combined with the convenience of",
    "start_char": 7500,
    "end_char": 8000,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa6",
    "content": "a backend-as-a-service (real-time updates, authentication, auto-generated APIs).</li>\n</ul>\n<p>Given that the application is already using Supabase for authentication, <strong>a full migration to Supabase is the most logical and cost-effective choice</strong>. It would consolidate the backend infrastructure, simplify development, and provide a powerful and scalable foundation for the future.</p>",
    "start_char": 8000,
    "end_char": 8400,
    "source_file": "DATABASE_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa6",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "<h1>Database Schema Overview</h1>\n<p>This document outlines the structure of the primary tables in the PostgreSQL database managed by Supabase.</p>\n<h2>Core Tables</h2>\n<h3><code>users</code></h3>\n<p>Stores user profile information for all roles (stylists, affiliates, clients, etc.). This table is central to identifying and managing users.</p>\n<ul>\n<li><code>id</code>: UUID, primary key, references <code>auth.users.id</code>.</li>\n<li><code>full_name</code>: The user's full name.</li>\n<li><code>",
    "start_char": 0,
    "end_char": 500,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "role</code>: The user's primary role (e.g., 'member', 'referrer', 'pro', 'suiteOwner', 'admin').</li>\n<li><code>role_tag</code>: A specific tag for sub-roles, like 'suite_pro'.</li>\n<li><code>pro_id</code>: A unique identifier for professionals, used for public profiles and matching.</li>\n<li><code>membership_tier</code>: 'free' or 'pro', indicating the user's subscription level.</li>\n<li><code>active_mode</code>: Boolean, if the user is currently available to receive referrals.</li>\n<li><code>c",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "overage_mode</code>: Boolean, if the user has enabled coverage mode to have others handle their clients.</li>\n<li><code>stripe_connect_id</code>: The user's Stripe account ID, used for payouts.</li>\n<li><code>phone</code>, <code>email</code>, <code>zip_code</code>: Contact and location information.</li>\n</ul>\n<h3><code>referrals</code></h3>\n<p>The central table for tracking all referral activities from creation to completion.</p>\n<ul>\n<li><code>id</code>: UUID, primary key.</li>\n<li><code>sender",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "_id</code>: The user who sent the referral.</li>\n<li><code>receiver_id</code>: The user who ultimately accepted and is handling the referral.</li>\n<li><code>client_name</code>, <code>client_phone</code>: Information for the non-platform client being referred.</li>\n<li><code>service_type</code>: The name of the service requested (e.g., &quot;Haircut &amp; Style&quot;).</li>\n<li><code>status</code>: The current status of the referral (e.g., 'pending', 'accepted', 'completed', 'expired').</li>\n<li>",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "<code>commission_pct</code>: The commission percentage the referrer will earn.</li>\n<li><code>expires_at</code>: The timestamp when the referral offer expires for the current receiver.</li>\n<li><code>response_deadline</code>: A specific deadline for a professional to respond to an offer.</li>\n<li><code>open_chair_id</code>: A foreign key if the referral was booked into an Open Chair session.</li>\n<li><code>hot_seat_id</code>: A foreign key if the referral was for a Hot Seat offer.</li>\n</ul>\n<h3",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "><code>open_chairs</code></h3>\n<p>Manages the &quot;Open Chair&quot; marketplace feature, where stylists can offer their workspace to others.</p>\n<ul>\n<li><code>id</code>: UUID, primary key.</li>\n<li><code>user_id</code>: The host offering the chair.</li>\n<li><code>location</code>, <code>zip_code</code>: The physical location of the open chair.</li>\n<li><code>start_at</code>, <code>end_at</code>: The time window the chair is available.</li>\n<li><code>host_pct</code>: The commission percentage th",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "e host earns from services performed in their chair.</li>\n<li><code>status</code>: The current state of the listing ('open', 'accepted', 'live', 'closed').</li>\n<li><code>receiver_pro_id</code>: The stylist who has accepted the open chair session.</li>\n<li><code>services_allowed</code>: An array of service names permitted during the session.</li>\n</ul>\n<h3><code>hot_seats</code></h3>\n<p>Manages the &quot;Hot Seat&quot; feature, which allows stylists to post last-minute, often discounted, appoint",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "ment slots.</p>\n<ul>\n<li><code>id</code>: UUID, primary key.</li>\n<li><code>user_id</code>: The stylist offering the hot seat.</li>\n<li><code>service</code>: The name of the service being offered.</li>\n<li><code>original_price</code>, <code>discount_price</code>: Pricing for the flash sale.</li>\n<li><code>time_slot</code>: The specific time the service is available (e.g., &quot;ASAP&quot;, &quot;2:00 PM&quot;).</li>\n<li><code>audience</code>: Defines who receives the alert ('favorites', 'clients",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "', 'local').</li>\n<li><code>expires_at</code>: When the hot seat offer expires.</li>\n</ul>\n<h3><code>payments</code> &amp; <code>commissions</code></h3>\n<p>These tables track all financial transactions within the application.</p>\n<ul>\n<li><strong><code>payments</code></strong>: Records every charge processed, such as client deposits or full service payments.</li>\n<li><strong><code>commissions</code></strong>: Records the calculated commission amounts earned by referrers or hosts from a completed",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "service.</li>\n</ul>\n<h2>Affiliate System Tables</h2>\n<h3><code>affiliate_users</code></h3>\n<p>Stores profiles for users in the affiliate program. This system is separate from the main application's user authentication.</p>\n<ul>\n<li><code>id</code>: UUID, primary key.</li>\n<li><code>email</code>, <code>first_name</code>, <code>last_name</code>: Affiliate's contact information.</li>\n<li><code>status</code>: The affiliate's account status ('pending', 'approved', 'suspended').</li>\n</ul>\n<h3><code>",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "affiliate_commissions</code></h3>\n<p>Tracks commissions earned by affiliates, including direct referral commissions and override commissions from their recruited sub-affiliates.</p>\n<h2>User Network Tables</h2>\n<h3><code>trusted_network</code></h3>\n<p>Manages a user's list of trusted partners. Referrals can be configured to be sent to this network first.</p>\n<ul>\n<li><code>owner_id</code>: The user who owns this trusted list.</li>\n<li><code>partner_id</code>: The user who is a trusted partner.</",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "li>\n<li><code>status</code>: 'active' or 'pending' (for invites).</li>\n</ul>\n<h3><code>auto_suggest_tracking</code></h3>\n<p>Tracks interactions (i.e., completed co-op sessions) between users to power the &quot;auto-suggest&quot; feature, which prompts users to add frequently-worked-with professionals to their trusted network.</p>\n<h2>Other Key Tables</h2>\n<ul>\n<li><strong><code>services</code></strong>: A list of all services offered by professionals, including pricing, duration, and category.</",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "li>\n<li><strong><code>boosts</code></strong>: Tracks active profile boosts, which increase a user's visibility in search and matching.</li>\n<li><strong><code>ad_placements</code></strong>: Stores the &quot;Pro Deals&quot; (advertisements) shown in the marketplace.</li>\n<li><strong><code>messages</code></strong>: An inbox system for storing all user notifications (e.g., referral alerts, payment confirmations).</li>\n<li><strong><code>admin_audit_log</code></strong>: Records all actions taken by ad",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7a",
    "content": "ministrators in the Admin Console for security and accountability.</li>\n<li><strong><code>feature_flags</code></strong>: A simple table to enable or disable platform features in real-time.</li>\n<li><strong><code>platform_settings</code></strong>: Stores global configuration values for the platform, such as fee percentages and feature limits.</li>\n</ul>",
    "start_char": 6500,
    "end_char": 6855,
    "source_file": "DATABASE_SCHEMA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7a",
      "revision": 14
    }
  },
  {
    "doc_id": "DEMO_MODE",
    "content": "<h1>Demo Mode</h1>\n<p>This document provides a comprehensive guide to the Demo Mode feature in the ClientPass application.</p>\n<h2>1. Overview</h2>\n<p>The application includes a comprehensive Demo Mode to allow for safe testing, development, and demonstration of all features without affecting live data. When enabled, this mode simulates the entire backend, including payments, notifications, and data seeding, providing a consistent and predictable environment.</p>\n<h2>2. Key Features</h2>\n<h3>2.1",
    "start_char": 0,
    "end_char": 500,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "DEMO_MODE",
    "content": ". Centralized Configuration</h3>\n<ul>\n<li><strong>Activation:</strong> Demo mode is controlled by a single boolean flag, <code>DEMO_MODE</code>, located in the <code>DEMO_CONFIG</code> object in <code>src/config/demoConfig.ts</code>.</li>\n<li><strong>Fine-Grained Control:</strong> The <code>DEMO_CONFIG</code> object also allows for fine-grained control over various aspects of the demo mode, such as the number of demo users to create, the latency of simulated API calls, and the likelihood of cert",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "DEMO_MODE",
    "content": "ain events (e.g., a referral being accepted).</li>\n</ul>\n<h3>2.2. Automatic Data Seeding</h3>\n<ul>\n<li><strong>Consistent Data:</strong> The <code>DemoDataSeeder</code> service (<code>src/services/demo/DemoDataSeeder.ts</code>) is responsible for populating the application with a consistent set of demo data.</li>\n<li><strong>Demo Personas:</strong> This includes creating a variety of demo users with different roles (professionals, clients, suite owners, affiliates), each with their own profile i",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "DEMO_MODE",
    "content": "nformation, bookings, and referral history.</li>\n<li><strong>Realistic Scenarios:</strong> The seeder also creates open chair opportunities and other data points to simulate a realistic and active environment.</li>\n</ul>\n<h3>2.3. Simulated Services</h3>\n<p>All major backend services have demo implementations that mimic the behavior of the live services:</p>\n<ul>\n<li><strong><code>DemoAdmin</code>:</strong> Manages demo-specific feature flags and simulates the process of applying for and being ap",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "DEMO_MODE",
    "content": "proved as a professional or suite owner.</li>\n<li><strong><code>DemoBooking</code>:</strong> Handles all booking-related operations, including creating, confirming, and canceling appointments. It simulates the entire booking lifecycle without creating any real appointments.</li>\n<li><strong><code>DemoMatching</code>:</strong> Provides a simulated professional matching service. It can be configured to return different results based on various filters, allowing for testing of the matching algorith",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "DEMO_MODE",
    "content": "m.</li>\n<li><strong><code>DemoNotifications</code>:</strong> Simulates the sending of push, SMS, and email notifications for key events like new referrals, appointment confirmations, and payment receipts. Instead of sending real notifications, it logs the notification content to the console.</li>\n<li><strong><code>DemoPayments</code>:</strong> Mimics the Stripe API for creating payment intents, processing payments, and handling payouts. This allows for end-to-end testing of the payment flow with",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "DEMO_MODE",
    "content": "out using real credit cards or making actual transactions.</li>\n</ul>\n<h3>2.4. <code>useDemoMode</code> Hook</h3>\n<ul>\n<li><strong>Easy Access:</strong> The <code>useDemoMode</code> hook (<code>src/hooks/useDemoMode.ts</code>) provides a simple and convenient way for components to access the demo mode status and the demo data.</li>\n<li><strong>Automatic Initialization:</strong> The hook also handles the initialization of the demo environment, including the seeding of demo data, when the applicat",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "DEMO_MODE",
    "content": "ion starts in demo mode.</li>\n</ul>\n<h2>3. Benefits of Demo Mode</h2>\n<ul>\n<li><strong>Safe Testing:</strong> Allows developers and QA testers to test new features and bug fixes in a safe and isolated environment without the risk of corrupting live data.</li>\n<li><strong>Rapid Prototyping:</strong> Enables rapid prototyping and iteration of new ideas without the need to set up a full backend environment.</li>\n<li><strong>Sales and Marketing Demonstrations:</strong> Provides a consistent and reli",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "DEMO_MODE",
    "content": "able environment for demonstrating the application's features to potential customers and partners.</li>\n<li><strong>Offline Development:</strong> Allows developers to work on the frontend of the application even when they are not connected to the internet.</li>\n</ul>\n<h2>4. Enabling Demo Mode</h2>\n<p>To enable Demo Mode, set the <code>DEMO_MODE</code> flag to <code>true</code> in <code>src/config/demoConfig.ts</code>:</p>\n<pre><code class=\"language-typescript\">// src/config/demoConfig.ts\nexport",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "DEMO_MODE",
    "content": "const DEMO_CONFIG = {\n  // ...\n  DEMO_MODE: true,\n  // ...\n};\n</code></pre>\n<p>When Demo Mode is active, the application will use the demo services instead of the live backend services. This allows for end-to-end testing of user flows in a controlled and predictable environment.</p>",
    "start_char": 4500,
    "end_char": 4784,
    "source_file": "DEMO_MODE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "<h1>Edge Functions Overview</h1>\n<p>This document describes the serverless Edge Functions located in the <code>supabase/functions/</code> directory. These functions contain the core backend business logic for the application.</p>\n<hr>\n<h3><code>accept-open-chair</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Allows a stylist to accept an available &quot;Open Chair&quot; slot.</li>\n<li><strong>Input</strong>: <code>{ &quot;open_chair_id&quot;: &quot;uuid&quot; }</code></li>\n<li><strong>Logic</str",
    "start_char": 0,
    "end_char": 500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "ong>:\n<ol>\n<li>Validates the user and the <code>open_chair_id</code>.</li>\n<li>Checks if the chair is still available and not already locked by another user.</li>\n<li>Creates a 10-minute &quot;acceptance lock&quot; to prevent concurrent bookings, associating the current user with the chair.</li>\n<li>Notifies the host that a stylist is reviewing their offer.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>auto-tag-booking</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Automatically associates a new booking",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "with a stylist's currently active &quot;Open Chair&quot; session if the booking criteria match.</li>\n<li><strong>Input</strong>: <code>{ &quot;referral_id&quot;: &quot;uuid&quot; }</code></li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Triggered when a referral is created or updated.</li>\n<li>Checks if the receiving stylist has a <code>live</code> Open Chair session.</li>\n<li>If the booking's time and location match the live session, it tags the <code>referral</code> record with the <code>open_chair_",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "id</code>.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>check-in-open-chair</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Allows a stylist to &quot;check in&quot; upon arrival at the host's location, officially starting the live session.</li>\n<li><strong>Input</strong>: <code>{ &quot;open_chair_id&quot;: &quot;uuid&quot; }</code></li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Verifies that the user is the one who accepted the chair.</li>\n<li>Updates the <code>open_chairs</code> status from 'accepted' to 'l",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "ive'.</li>\n<li>Notifies both the host and the stylist that the session has begun.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>complete-referral-tracking</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Tracks a completed co-op between two professionals to power the &quot;auto-suggest&quot; trusted network feature.</li>\n<li><strong>Input</strong>: <code>{ &quot;referral_id&quot;: &quot;uuid&quot; }</code></li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Identifies the two professionals involved in a <code>compl",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "eted</code> referral.</li>\n<li>Increments the <code>completed_count</code> in the <code>auto_suggest_tracking</code> table for both directions of the relationship (A-&gt;B and B-&gt;A).</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>confirm-open-chair</code></h3>\n<ul>\n<li><strong>Purpose</strong>: The second step in the acceptance process, where a stylist confirms their decision within the 10-minute lock window.</li>\n<li><strong>Input</strong>: <code>{ &quot;open_chair_id&quot;: &quot;uuid&quot; }</code>",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "</li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Verifies the user and the lock's validity.</li>\n<li>Updates the <code>open_chairs</code> status to 'accepted' and clears the lock.</li>\n<li>Notifies both parties of the confirmation.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>create-checkout</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Creates a Stripe Checkout session for a user to subscribe to the Pro plan.</li>\n<li><strong>Input</strong>: None (uses user's auth token).</li>\n<li><strong>Logic</strong>:\n<",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "ol>\n<li>Finds or creates a Stripe Customer ID for the user.</li>\n<li>Creates and returns a Stripe Checkout session URL for the subscription.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>customer-portal</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Creates a Stripe Billing Portal session for a user to manage their existing subscription.</li>\n<li><strong>Input</strong>: None.</li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Retrieves the user's Stripe Customer ID.</li>\n<li>Creates and returns a Stripe Billing",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "Portal session URL.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>ensure-demo-user</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Creates or verifies the existence of a demo user account for various roles (e.g., pro, client, admin).</li>\n<li><strong>Input</strong>: <code>{ &quot;email&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;password&quot;: &quot;string&quot; }</code></li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Checks if a user with the specified email exists.</li>\n<li>If not",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": ", it creates a new user in Supabase Auth and a corresponding profile in the <code>users</code> table with the specified role.</li>\n<li>This function is used to ensure that demo accounts are always available for use in the login form.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>end-open-chair-session</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Ends a live &quot;Open Chair&quot; session, calculates final earnings, and triggers settlement.</li>\n<li><strong>Input</strong>: <code>{ &quot;open_chair_id&q",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "uot;: &quot;uuid&quot; }</code></li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Updates the chair status to 'completed'.</li>\n<li>Fetches all bookings associated with the session.</li>\n<li>Invokes the <code>settle-open-chair-commission</code> function for each completed booking to distribute funds.</li>\n<li>Notifies both parties with a summary of the session.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>ensure-demo-user</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Ensures a demo user exists for demonstrati",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "on purposes, creating it if it doesn't.</li>\n<li><strong>Input</strong>: None</li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Checks for a user with a specific demo email.</li>\n<li>If the user doesn't exist, it creates a new user with pre-defined demo data.</li>\n<li>Returns the demo user's data.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<hr>\n<h3><code>inbox-action</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Handles user actions from the inbox, specifically for accepting or declining referrals.</li>\n<li><strong>I",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "nput</strong>: <code>{ &quot;referral_id&quot;: &quot;uuid&quot;, &quot;action&quot;: &quot;accept&quot; | &quot;decline&quot; }</code></li>\n<li><strong>Logic</strong>:\n<ul>\n<li><strong>Accept</strong>: Checks if the referral is still available and, if so, updates its status to 'accepted'.</li>\n<li><strong>Decline</strong>: Invokes the <code>reassign-referral</code> function to find the next available professional.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3><code>post-open-chair</code></h3>\n<ul>\n<li><stron",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "g>Purpose</strong>: Creates a new &quot;Open Chair&quot; listing.</li>\n<li><strong>Input</strong>: <code>{ location, start_at, end_at, services_allowed, host_pct, ... }</code></li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Validates the input data (e.g., time window, commission range).</li>\n<li>Inserts a new record into the <code>open_chairs</code> table.</li>\n<li>Identifies eligible stylists based on the <code>audience</code> setting (all vs. trusted) and sends them notifications.</li>\n</ol>\n</li>\n<",
    "start_char": 6500,
    "end_char": 7000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "/ul>\n<hr>\n<h3><code>purchase-boost</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Allows a user to purchase or use a free credit for a profile boost.</li>\n<li><strong>Input</strong>: <code>{ boost_type, duration_hours, amount }</code></li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Checks if the user has a free boost available (if they are a Pro member).</li>\n<li>Creates or extends a record in the <code>boosts</code> table.</li>\n<li>If a payment is required, it would integrate with a payment provider",
    "start_char": 7000,
    "end_char": 7500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "(currently simulated).</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>reassign-referral</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Finds the next available professional for a referral that was declined or expired.</li>\n<li><strong>Input</strong>: <code>{ &quot;referralId&quot;: &quot;uuid&quot; }</code></li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Identifies the professionals who have already been offered the referral.</li>\n<li>Queries for the next best-matching available stylist, excluding those who ha",
    "start_char": 7500,
    "end_char": 8000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "ve already been tried.</li>\n<li>If a new stylist is found, updates the <code>referrals</code> record with the new <code>receiver_id</code> and resets the <code>expires_at</code> timer.</li>\n<li>If not, marks the referral as 'declined'.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>send-referral</code></h3>\n<ul>\n<li><strong>Purpose</strong>: The main function for initiating a new referral.</li>\n<li><strong>Input</strong>: <code>{ referralData: { clientName, serviceId, ... } }</code></li>\n<li><strong>Logi",
    "start_char": 8000,
    "end_char": 8500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "c</strong>:\n<ol>\n<li>Finds the best available receiver based on the sender's trusted network, service type, and availability.</li>\n<li>If the sender has <code>coverage_mode</code> enabled, it assigns the referral to the sender themselves.</li>\n<li>Creates a new record in the <code>referrals</code> table with a 'pending' status and a 10-minute response timer.</li>\n<li>Sends a notification to the receiving stylist.</li>\n<li>Creates a client referral link for the client to track the referral status",
    "start_char": 8500,
    "end_char": 9000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": ".</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>send-trusted-invite</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Sends an email invitation to a professional to join the user's Trusted Network.</li>\n<li><strong>Input</strong>: <code>{ &quot;inviteEmail&quot;: &quot;string&quot;, &quot;senderName&quot;: &quot;string&quot; }</code></li>\n<li><strong>Logic</strong>: Uses the Resend service to dispatch a formatted email invitation containing a unique sign-up link.</li>\n</ul>\n<hr>\n<h3><code>set-modes</code><",
    "start_char": 9000,
    "end_char": 9500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "/h3>\n<ul>\n<li><strong>Purpose</strong>: A simple utility function to toggle a user's <code>active_mode</code> or <code>coverage_mode</code>.</li>\n<li><strong>Input</strong>: <code>{ &quot;active_mode&quot;: boolean }</code> or <code>{ &quot;coverage_mode&quot;: boolean }</code></li>\n<li><strong>Logic</strong>: Updates the corresponding boolean field on the user's profile in the <code>users</code> table.</li>\n</ul>\n<hr>\n<h3><code>settle-open-chair-commission</code></h3>\n<ul>\n<li><strong>Purpose</",
    "start_char": 9500,
    "end_char": 10000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "strong>: Calculates and records commission splits for a single booking within an Open Chair session.</li>\n<li><strong>Input</strong>: <code>{ &quot;referral_id&quot;: &quot;uuid&quot;, &quot;service_price&quot;: number, ... }</code></li>\n<li><strong>Logic</strong>:\n<ol>\n<li>Fetches the host's commission percentage (<code>host_pct</code>) from the <code>open_chairs</code> table.</li>\n<li>Calculates the platform fee, host share, and stylist's net earnings.</li>\n<li>Accounts for outside referrers,",
    "start_char": 10000,
    "end_char": 10500,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "who earn 10% taken from the host's share.</li>\n<li>Inserts records into the <code>commissions</code> table to log the transaction for all parties.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3><code>upsert-profile</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Creates or updates a user's profile in the <code>users</code> table, typically after initial sign-up.</li>\n<li><strong>Input</strong>: <code>{ fullName, role, ... }</code></li>\n<li><strong>Logic</strong>: Uses <code>upsert</code> logic to either create",
    "start_char": 10500,
    "end_char": 11000,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a7e",
    "content": "a new user profile linked to the <code>auth.users</code> record or update an existing one.</li>\n</ul>",
    "start_char": 11000,
    "end_char": 11102,
    "source_file": "EDGE_FUNCTIONS.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a7e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "<h1>Sizing &amp; Effort Estimates</h1>\n<p>This document provides high-level, relative effort estimates for the user stories in the project backlog. These are for initial planning and prioritization purposes and are subject to change after more detailed analysis.</p>\n<p><strong>Sizing Legend:</strong></p>\n<ul>\n<li><strong>XS</strong>: Extra Small (Trivial task)</li>\n<li><strong>S</strong>: Small (Straightforward task)</li>\n<li><strong>M</strong>: Medium (Moderately complex feature)</li>\n<li><stro",
    "start_char": 0,
    "end_char": 500,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "ng>L</strong>: Large (Complex feature with multiple parts)</li>\n<li><strong>XL</strong>: Extra Large (Epic-level feature that needs to be broken down)</li>\n</ul>\n<hr>\n<h2>Epic: User Authentication &amp; Onboarding</h2>\n<ul>\n<li><strong>Story</strong>: As a stylist, I want to sign up with my email and password so I can create an account and access the platform.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (Includes UI, Supabase Auth integration, and profile creation).</li>\n</ul>\n</li>\n<",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "li><strong>Story</strong>: As a new user, I want to be guided through setting up my profile so I can start receiving referrals.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (Involves a multi-step UI flow and profile updates).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As an affiliate, I want to sign up for the affiliate program so I can start earning commissions.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</strong> (Requires a separate auth system and admin approval flow).</li>\n</u",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "l>\n</li>\n<li><strong>Story</strong>: As a user, I want to be able to log in securely and log out of my account.\n<ul>\n<li><strong>Estimate</strong>: <strong>S</strong> (Largely handled by Supabase Auth).</li>\n</ul>\n</li>\n</ul>\n<h2>Epic: Referral Management</h2>\n<ul>\n<li><strong>Story</strong>: As a busy stylist, I want to quickly send a walk-in client I can't serve to another stylist so I can earn a commission.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (Core feature involving a compl",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "ex form and backend logic).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a stylist, I want to receive instant notifications for new referrals so I don't miss opportunities.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (Requires real-time database features and push notifications).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a stylist, I want a 10-minute window to accept or decline a referral so I have time to check my schedule.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</stron",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "g> (Involves backend timers, cron jobs, and state management).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a sender, I want the system to automatically reassign an expired or declined referral to the next best stylist.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</strong> (Complex backend logic for matching and reassignment).</li>\n</ul>\n</li>\n</ul>\n<h2>Epic: Open Chair Marketplace</h2>\n<ul>\n<li><strong>Story</strong>: As a salon owner, I want to post my available chairs so I can monetize em",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "pty space.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (Requires a dedicated form and database schema).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a stylist, I want to find and book a temporary chair to work from so I can serve my clients.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</strong> (Involves search, filtering, and a booking workflow).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a host, I want to track all services performed in my chair during a session so I can ge",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "t my correct commission.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</strong> (Requires a &quot;Live Session&quot; dashboard with real-time updates).</li>\n</ul>\n</li>\n</ul>\n<h2>Epic: Hot Seat (Flash Sales)</h2>\n<ul>\n<li><strong>Story</strong>: As a stylist, I want to post a last-minute discounted appointment so I can fill a cancellation.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</strong> (A full feature slice involving a new form, data model, and notification logic).</li>\n</ul>\n</li>\n</ul>",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "<h2>Epic: Coverage Mode</h2>\n<ul>\n<li><strong>Story</strong>: As a stylist going on vacation, I want to enable &quot;Coverage Mode&quot; so my incoming client requests are automatically forwarded to trusted colleagues.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</strong> (Requires changes to user settings and core referral routing logic).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a stylist, I want to add trusted colleagues to my &quot;Coverage List&quot; to handle my clients when I'm aw",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "ay.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (UI for managing a list of users).</li>\n</ul>\n</li>\n</ul>\n<h2>Epic: Financials &amp; Earnings</h2>\n<ul>\n<li><strong>Story</strong>: As a user, I want to see a dashboard of my total, pending, and available earnings.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (Requires data aggregation and a dedicated UI).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a user, I want to connect my Stripe account so I can receive payouts.\n<ul>",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "<li><strong>Estimate</strong>: <strong>L</strong> (Stripe Connect integration is complex and involves security considerations).</li>\n</ul>\n</li>\n</ul>\n<h2>Epic: Profile &amp; Network Management</h2>\n<ul>\n<li><strong>Story</strong>: As a stylist, I want to build a public profile with my services, prices, and portfolio.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (Involves multiple form sections and data models).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a user, I want to add prof",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "essionals I've worked with to a &quot;Trusted Network&quot;.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (UI for searching and adding users to a list).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a user, I want the app to suggest adding a professional to my Trusted Network after we have successfully collaborated.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong> (Requires backend tracking and a new UI prompt).</li>\n</ul>\n</li>\n</ul>\n<h2>Epic: Affiliate Program</h2>\n<ul>\n<li><",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "strong>Story</strong>: As an affiliate, I want a unique referral link to share so I can track my sign-ups.\n<ul>\n<li><strong>Estimate</strong>: <strong>XL</strong> (This represents the entire affiliate system, which is a major undertaking involving separate auth, tracking, dashboards, and commission logic).</li>\n</ul>\n</li>\n</ul>\n<h2>Epic: Administration</h2>\n<ul>\n<li><strong>Story</strong>: As an admin, I want to manage &quot;Pro Deals&quot; that are offered to all users.\n<ul>\n<li><strong>Estima",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a80",
    "content": "te</strong>: <strong>M</strong> (CRUD interface for the <code>ad_placements</code> table).</li>\n</ul>\n</li>\n<li><strong>Story</strong>: As an admin, I want to export user and transaction data for analysis.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</strong> (Requires a secure backend process to generate and serve large CSV files).</li>\n</ul>\n</li>\n</ul>",
    "start_char": 6500,
    "end_char": 6859,
    "source_file": "ESTIMATES.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a80",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a82",
    "content": "<h1>Frontend Overview</h1>\n<p>This document provides a high-level overview of the frontend architecture, structure, and key libraries used in the ClientPass application. It now covers both the web and the React Native mobile application.</p>\n<h2>1. Web Application (<code>style-referral-ring</code>)</h2>\n<h3>1.1. Core Technologies</h3>\n<ul>\n<li><strong>Framework</strong>: <strong>React</strong> (v18)</li>\n<li><strong>Build Tool</strong>: <strong>Vite</strong></li>\n<li><strong>Language</strong>: <",
    "start_char": 0,
    "end_char": 500,
    "source_file": "FRONTEND_OVERVIEW.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a82",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a82",
    "content": "strong>TypeScript</strong></li>\n<li><strong>Styling</strong>: <strong>Tailwind CSS</strong> with a custom theme.</li>\n<li><strong>UI Components</strong>: <strong>shadcn-ui</strong></li>\n<li><strong>Icons</strong>: <strong>Lucide React</strong>.</li>\n<li><strong>Routing</strong>: <strong>React Router</strong></li>\n<li><strong>State Management</strong>: <strong>Zustand</strong>, <strong>TanStack Query</strong>, and <strong>React Context</strong>.</li>\n</ul>\n<h2>2. Mobile Application (<code>clientp",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "FRONTEND_OVERVIEW.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a82",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a82",
    "content": "ass-react-native</code>)</h2>\n<h3>2.1. Core Technologies</h3>\n<ul>\n<li><strong>Framework</strong>: <strong>React Native</strong> with <strong>Expo</strong></li>\n<li><strong>Language</strong>: <strong>TypeScript</strong></li>\n<li><strong>UI Components</strong>: <strong>React Native Paper</strong> for Material Design components.</li>\n<li><strong>Styling</strong>: React Native <strong>StyleSheet</strong> with a custom theme.</li>\n<li><strong>Icons</strong>: <strong>lucide-react-native</strong> and",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "FRONTEND_OVERVIEW.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a82",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a82",
    "content": "<strong>@expo/vector-icons</strong>.</li>\n<li><strong>Routing</strong>: <strong>Expo Router</strong> (file-system based).</li>\n<li><strong>State Management</strong>: <strong>React Context</strong> (<code>AuthContext</code>) for global state.</li>\n</ul>\n<h3>2.2. Project Structure</h3>\n<p>The main application code is located in the root directory.</p>\n<ul>\n<li><strong><code>app/</code></strong>: Contains all routes and screens, managed by Expo Router.\n<ul>\n<li><strong><code>app/(tabs)/</code></str",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "FRONTEND_OVERVIEW.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a82",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a82",
    "content": "ong>: Defines the main tab bar navigation for authenticated users.\n<ul>\n<li><strong><code>_layout.tsx</code></strong>: The layout component for the tab bar.</li>\n<li><strong><code>index.tsx</code></strong>: The main home screen, which acts as a role-based router to different dashboards.</li>\n</ul>\n</li>\n<li><strong><code>app/(auth)/</code></strong>: Screens for the authentication flow (Login, Sign Up).</li>\n<li><strong><code>_layout.tsx</code></strong>: The root layout of the entire application,",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "FRONTEND_OVERVIEW.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a82",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a82",
    "content": "wrapping all routes.</li>\n</ul>\n</li>\n<li><strong><code>components/</code></strong>: Contains reusable React Native components.\n<ul>\n<li><strong><code>components/dashboards/</code></strong>: Home screen components for different user roles (Pro, Client, etc.).</li>\n<li><strong><code>components/ui/</code></strong>: Custom UI components like <code>CustomSegmentedControl</code>.</li>\n</ul>\n</li>\n<li><strong><code>contexts/</code></strong>: Contains global state management providers.\n<ul>\n<li><stron",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "FRONTEND_OVERVIEW.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a82",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a82",
    "content": "g><code>AuthContext.tsx</code></strong>: Manages user authentication state, session, and profile data.</li>\n</ul>\n</li>\n<li><strong><code>lib/</code></strong>: Utility functions, such as the Supabase client configuration.</li>\n</ul>\n<h3>2.3. Routing</h3>\n<p>Routing is managed by <strong>Expo Router</strong>, which uses a file-based system.</p>\n<ul>\n<li><strong><code>app/_layout.tsx</code></strong>: The root layout. It checks for authentication status and redirects users to either the auth flow o",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "FRONTEND_OVERVIEW.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a82",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a82",
    "content": "r the main app.</li>\n<li><strong><code>app/(auth)</code> group</strong>: Defines the screens for the authentication stack (login, signup).</li>\n<li><strong><code>app/(tabs)</code> group</strong>: Defines the main tab bar navigation for authenticated users. The tabs include Home, Schedule, Earnings, Pro Hub, and Inbox.</li>\n</ul>\n<h3>2.4. State Management</h3>\n<ul>\n<li><strong>Global State</strong>: User authentication and profile data are managed globally via <code>AuthContext</code>. This makes",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "FRONTEND_OVERVIEW.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a82",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a82",
    "content": "user data accessible throughout the component tree.</li>\n<li><strong>Local/Component State</strong>: Standard React <code>useState</code> and <code>useEffect</code> hooks are used for managing local component state.</li>\n</ul>",
    "start_char": 4000,
    "end_char": 4228,
    "source_file": "FRONTEND_OVERVIEW.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a82",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": "<h1>High Level Architecture</h1>\n<p>This document provides a high-level overview of the technical architecture for the ClientPass application.</p>\n<h2>1. Core Technology Stack</h2>\n<ul>\n<li>\n<p><strong>Frontend</strong>: A modern Single-Page Application (SPA) built with <strong>React</strong> and <strong>Vite</strong>.</p>\n<ul>\n<li><strong>Language</strong>: <strong>TypeScript</strong></li>\n<li><strong>UI Components</strong>: <strong>shadcn-ui</strong> on top of Radix UI and Tailwind CSS.</li>\n<",
    "start_char": 0,
    "end_char": 500,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": "li><strong>Routing</strong>: <strong>React Router</strong> for client-side navigation.</li>\n<li><strong>State Management</strong>: <strong>Zustand</strong> for lightweight global client state, <strong>TanStack Query</strong> for server state management (caching, refetching), and React Context for localized UI state.</li>\n</ul>\n</li>\n<li>\n<p><strong>Backend</strong>: A serverless architecture powered by <strong>Supabase</strong>.</p>\n<ul>\n<li><strong>Database</strong>: A <strong>PostgreSQL</stron",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": "g> database managed by Supabase.</li>\n<li><strong>Authentication</strong>: Supabase Auth for managing user accounts and sessions.</li>\n<li><strong>Serverless Functions</strong>: Business logic is encapsulated in <strong>Deno-based TypeScript functions</strong> deployed as Supabase Edge Functions. These handle tasks like sending referrals, processing payments, and managing user states.</li>\n</ul>\n</li>\n</ul>\n<h2>2. Frontend Architecture</h2>\n<p>The frontend is located in the <code>src/</code> dir",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": "ectory and follows a standard component-based structure.</p>\n<ul>\n<li><strong><code>src/pages/</code></strong>: Contains the top-level components for each route in the application (e.g., <code>HomePage.tsx</code>, <code>Dashboard.tsx</code>).</li>\n<li><strong><code>src/components/</code></strong>: Contains reusable React components used across different pages. These are further organized by feature (e.g., <code>auth</code>, <code>referrals</code>, <code>open-chair</code>).</li>\n<li><strong><code",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": ">src/stores/</code></strong>: Contains Zustand stores for global state management (e.g., <code>useAuthStore.ts</code>).</li>\n<li><strong><code>src/integrations/</code></strong>: Contains the Supabase client configuration, which is the primary interface to the backend.</li>\n<li><strong><code>src/App.tsx</code></strong>: The main application component that sets up routing, context providers, and global components like toasters.</li>\n</ul>\n<h2>3. Backend Architecture</h2>\n<p>The backend is entirely",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": "managed through Supabase, abstracting away the need for a traditional server.</p>\n<ul>\n<li><strong>Database Schema</strong>: The schema is defined via SQL migration files in <code>supabase/migrations/</code>. It includes tables for <code>users</code>, <code>referrals</code>, <code>open_chairs</code>, <code>payments</code>, <code>affiliates</code>, and more, modeling the core business domains.</li>\n<li><strong>Edge Functions</strong>: Located in <code>supabase/functions/</code>, each folder repr",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": "esents a serverless function that can be invoked from the client. This is where most of the core business logic resides. For example:\n<ul>\n<li><code>send-referral</code>: Handles the logic for matching and notifying stylists.</li>\n<li><code>accept-open-chair</code>: Manages the process of a stylist claiming an open chair.</li>\n<li><code>settle-open-chair-commission</code>: Calculates and records commission splits after a session.</li>\n</ul>\n</li>\n<li><strong>Authentication</strong>: User and ses",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": "sion management is handled by Supabase Auth, which integrates directly with the database via the <code>auth.users</code> table and RLS (Row Level Security) policies.</li>\n</ul>\n<h2>4. Data Flow</h2>\n<ol>\n<li><strong>User Interaction</strong>: A user performs an action in the React frontend (e.g., fills out a referral form).</li>\n<li><strong>Client-Side Logic</strong>: The frontend component calls a function that uses the Supabase client (<code>@supabase/supabase-js</code>).</li>\n<li><strong>Back",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": "end Invocation</strong>:\n<ul>\n<li>For simple data retrieval, the client queries the Supabase database directly (respecting RLS policies).</li>\n<li>For complex business logic, the client invokes a Supabase Edge Function.</li>\n</ul>\n</li>\n<li><strong>Edge Function Execution</strong>: The serverless function runs, often interacting with the Supabase database using the service role key to perform privileged operations.</li>\n<li><strong>Response</strong>: The Edge Function returns a response to the c",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a84",
    "content": "lient.</li>\n<li><strong>UI Update</strong>: The frontend uses the response to update its state (often via TanStack Query) and re-render the UI.</li>\n</ol>",
    "start_char": 4500,
    "end_char": 4655,
    "source_file": "HLA.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a84",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a86",
    "content": "<h1>Integration Guide</h1>\n<h2>1. Introduction</h2>\n<p>This document provides a guide for potential future integrations with the ClientPass platform. While ClientPass does not currently offer a public API, this document outlines the possible integration points and data exchange patterns that could be developed.</p>\n<h2>2. Authentication</h2>\n<p>Any external system integrating with ClientPass would require a secure method of authentication. The proposed method would be API Key-based authenticatio",
    "start_char": 0,
    "end_char": 500,
    "source_file": "INTEGRATION_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a86",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a86",
    "content": "n.</p>\n<ul>\n<li><strong>API Keys</strong>: A unique, secret key would be generated for each integration partner. This key must be included in the <code>Authorization</code> header of all API requests.</li>\n</ul>\n<h2>3. Integration Patterns</h2>\n<p>Two primary patterns would be supported for integration: Webhooks for outbound data flow and a RESTful API for inbound data flow.</p>\n<h3>3.1 Webhooks (Outbound Data)</h3>\n<p>ClientPass could send real-time notifications to an external system when key",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "INTEGRATION_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a86",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a86",
    "content": "events occur. The external system would need to provide a secure endpoint to receive these webhook payloads.</p>\n<p><strong>Potential Webhook Events:</strong></p>\n<ul>\n<li><code>referral.created</code>: Triggered when a new referral is initiated.\n<ul>\n<li><strong>Payload</strong>: <code>{ referralId, senderId, clientInfo, serviceType, status }</code></li>\n</ul>\n</li>\n<li><code>referral.accepted</code>: Triggered when a professional accepts a referral.\n<ul>\n<li><strong>Payload</strong>: <code>{ r",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "INTEGRATION_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a86",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a86",
    "content": "eferralId, receiverId, acceptedAt }</code></li>\n</ul>\n</li>\n<li><code>referral.completed</code>: Triggered when a service is marked as complete.\n<ul>\n<li><strong>Payload</strong>: <code>{ referralId, finalAmount, commission, fees }</code></li>\n</ul>\n</li>\n<li><code>open_chair.posted</code>: Triggered when a new Open Chair is listed.\n<ul>\n<li><strong>Payload</strong>: <code>{ openChairId, hostId, location, timeWindow, commissionPct }</code></li>\n</ul>\n</li>\n<li><code>user.created</code>: Triggere",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "INTEGRATION_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a86",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a86",
    "content": "d when a new user successfully signs up.\n<ul>\n<li><strong>Payload</strong>: <code>{ userId, fullName, role }</code></li>\n</ul>\n</li>\n</ul>\n<h3>3.2 REST API (Inbound Data)</h3>\n<p>A future RESTful API could allow external systems to create and manage resources within ClientPass.</p>\n<p><strong>Hypothetical API Endpoints:</strong></p>\n<ul>\n<li>\n<p><code>POST /api/v1/referrals</code></p>\n<ul>\n<li><strong>Description</strong>: Create a new referral for a walk-in client. This could be used by a salon",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "INTEGRATION_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a86",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a86",
    "content": "'s front-desk software to automatically refer overflow clients.</li>\n<li><strong>Body</strong>: <code>{ clientName, clientPhone, serviceType, commissionPct, notes }</code></li>\n</ul>\n</li>\n<li>\n<p><code>GET /api/v1/users/{userId}/earnings</code></p>\n<ul>\n<li><strong>Description</strong>: Retrieve earnings data for a specific user.</li>\n<li><strong>Response</strong>: <code>{ total, pending, available, transactions: [...] }</code></li>\n</ul>\n</li>\n<li>\n<p><code>GET /api/v1/open_chairs</code></p>\n<",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "INTEGRATION_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a86",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a86",
    "content": "ul>\n<li><strong>Description</strong>: Get a list of currently available Open Chairs, filterable by location.</li>\n<li><strong>Query Params</strong>: <code>?zip_code=90210&amp;radius=10</code></li>\n<li><strong>Response</strong>: <code>[{ openChairId, hostName, location, ... }]</code></li>\n</ul>\n</li>\n</ul>\n<h2>4. Example Integration Use Case</h2>\n<p><strong>Scenario</strong>: A third-party salon management software wants to integrate with ClientPass to handle overflow clients.</p>\n<ol>\n<li><stron",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "INTEGRATION_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a86",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a86",
    "content": "g>Setup</strong>: The salon software company is issued an API key by ClientPass.</li>\n<li><strong>Workflow</strong>:\n<ul>\n<li>A walk-in client arrives at the salon, but no stylists are available.</li>\n<li>The front-desk staff uses their salon software to mark the client as an &quot;overflow&quot;.</li>\n<li>The salon software makes a <code>POST</code> request to <code>/api/v1/referrals</code> with the client's information.</li>\n<li>ClientPass receives the request and initiates its internal referr",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "INTEGRATION_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a86",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb7479feecff6266a86",
    "content": "al workflow, finding an available stylist nearby.</li>\n</ul>\n</li>\n<li><strong>Feedback Loop</strong>: The salon software provides a webhook endpoint. When the referral is <code>completed</code>, ClientPass sends a <code>referral.completed</code> event to the webhook. The salon software can then use this data to update its own records, perhaps crediting the salon for the referral commission.</li>\n</ol>",
    "start_char": 4000,
    "end_char": 4406,
    "source_file": "INTEGRATION_GUIDE.md",
    "frontmatter": {
      "id": "68dccbb7479feecff6266a86",
      "revision": 14
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "<h1>Comprehensive Marketing Strategy for ClientPass</h1>\n<p>This document provides a detailed marketing strategy designed to maximize the adoption and growth of the ClientPass application.</p>\n<h2>1. Deep Dive into Target Audiences</h2>\n<p>A successful marketing strategy starts with a deep understanding of our target audiences. We have identified four key segments:</p>\n<ul>\n<li>\n<p><strong>The Independent Stylist (Pro):</strong></p>\n<ul>\n<li><strong>Demographics:</strong> Aged 25-45, tech-savvy,",
    "start_char": 0,
    "end_char": 500,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "active on social media (especially Instagram and TikTok). They are either renting a booth, working on commission, or have their own small studio.</li>\n<li><strong>Pain Points:</strong> Irregular income, difficulty finding new clients, administrative overhead (booking, payments, marketing), and the high cost of professional tools.</li>\n<li><strong>Goals:</strong> To build a loyal clientele, increase their income, and focus on their craft rather than on administrative tasks.</li>\n</ul>\n</li>\n<li>",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "<p><strong>The Salon/Suite Owner (Suite):</strong></p>\n<ul>\n<li><strong>Demographics:</strong> Aged 35-60, business-minded, may own one or multiple locations. They are looking for ways to optimize their business and increase profitability.</li>\n<li><strong>Pain Points:</strong> Under-utilized chairs/suites, high turnover of stylists, time-consuming management tasks, and the need to create additional revenue streams.</li>\n<li><strong>Goals:</strong> To maximize occupancy, streamline operations,",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "create a thriving community of stylists, and increase the overall profitability of their business.</li>\n</ul>\n</li>\n<li>\n<p><strong>The Modern Client:</strong></p>\n<ul>\n<li><strong>Demographics:</strong> Aged 18-50, digitally native, values convenience and social proof. They use apps for everything from ordering food to booking travel.</li>\n<li><strong>Pain Points:</strong> Difficulty finding and booking appointments with trusted stylists, lack of a centralized platform for managing their beauty",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "regimen, and the desire to be rewarded for their loyalty.</li>\n<li><strong>Goals:</strong> To easily discover and book talented stylists, manage their appointments seamlessly, and feel valued as a customer.</li>\n</ul>\n</li>\n<li>\n<p><strong>The Beauty Influencer (Affiliate):</strong></p>\n<ul>\n<li><strong>Demographics:</strong> Varies widely, but they have a dedicated following on social media and are seen as experts in the beauty industry.</li>\n<li><strong>Pain Points:</strong> The need to monet",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "ize their content in an authentic way, and the desire to offer real value to their audience.</li>\n<li><strong>Goals:</strong> To partner with brands that align with their values, earn a sustainable income from their content, and provide their followers with valuable recommendations.</li>\n</ul>\n</li>\n</ul>\n<h2>2. Crafting a Compelling Value Proposition</h2>\n<p>Our messaging needs to resonate with the specific goals and pain points of each audience segment.</p>\n<ul>\n<li><strong>For Stylists:</stro",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "ng> &quot;Stop worrying about the business side of things. ClientPass is your all-in-one solution to fill your chair, manage your bookings, and grow your income, so you can focus on what you do best: creating beautiful hair.&quot;</li>\n<li><strong>For Salon/Suite Owners:</strong> &quot;Transform your salon into a thriving, fully-occupied business. ClientPass helps you find and retain top talent, streamline your management tasks, and unlock new revenue streams. It's the business partner you've be",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "en looking for.&quot;</li>\n<li><strong>For Clients:</strong> &quot;Your next great hair day is just a tap away. Discover and book the best stylists in your city, manage your appointments with ease, and get rewarded for sharing the love with your friends.&quot;</li>\n<li><strong>For Affiliates:</strong> &quot;Turn your passion for beauty into a paycheck. Partner with ClientPass to promote top-quality products to your audience and earn a commission on every sale. It's the easiest way to monetize yo",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "ur influence.&quot;</li>\n</ul>\n<h2>3. A Multi-Channel Marketing Approach</h2>\n<p>We will use a combination of online and offline channels to reach our target audiences.</p>\n<pre><code class=\"language-mermaid\">mindmap\n  root((Marketing Channels))\n    (Online)\n      (Social Media)\n      (Content Marketing)\n      (Email Marketing)\n      (Paid Advertising)\n    (Offline)\n      (Industry Events)\n      (Partnerships)\n      (Local Meetups)\n</code></pre>\n<ul>\n<li><strong>Social Media:</strong> This is ou",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "r most important channel. We will create a content calendar and post a mix of educational, inspirational, and promotional content. We will also run targeted ad campaigns to reach specific audience segments.</li>\n<li><strong>Content Marketing:</strong> We will create a blog and a YouTube channel with high-quality content that addresses the pain points of our target audiences. This will help us to build trust and authority in the industry.</li>\n<li><strong>Email Marketing:</strong> We will build a",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "n email list through our website and social media channels. We will use email to nurture leads, announce new features, and promote special offers.</li>\n<li><strong>Industry Events:</strong> We will have a presence at major hair shows and beauty expos. This will give us the opportunity to connect with stylists and salon owners in person and demo the application.</li>\n<li><strong>Partnerships:</strong> We will build relationships with beauty schools, salon suite franchises, and beauty product comp",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "anies. These partnerships will help us to reach a wider audience and build credibility.</li>\n</ul>\n<h2>4. Actionable Marketing Campaigns</h2>\n<p>Here are some specific campaigns we can launch to drive adoption:</p>\n<ul>\n<li>\n<p><strong>The &quot;Founding 500&quot; Campaign (Pre-Launch/Launch):</strong></p>\n<ul>\n<li><strong>Goal:</strong> To create a community of early adopters and generate buzz before the official launch.</li>\n<li><strong>Tactic:</strong> Offer an exclusive &quot;Founding 500&qu",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "ot; membership to the first 500 stylists who sign up. This membership could include a lifetime discount, a special badge on their profile, and access to exclusive features.</li>\n<li><strong>Promotion:</strong> Promote the campaign through social media ads, partnerships with influencers, and a landing page on our website.</li>\n</ul>\n</li>\n<li>\n<p><strong>The &quot;Refer-a-Stylist, Get $100&quot; Campaign (Post-Launch):</strong></p>\n<ul>\n<li><strong>Goal:</strong> To accelerate user growth by ince",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "ntivizing stylist-to-stylist referrals.</li>\n<li><strong>Tactic:</strong> Offer a $100 cash bonus to any stylist who refers another stylist who signs up and completes their first booking.</li>\n<li><strong>Promotion:</strong> Promote the campaign through email marketing, in-app notifications, and social media.</li>\n</ul>\n</li>\n<li>\n<p><strong>The &quot;ClientPass University&quot; Content Campaign (Ongoing):</strong></p>\n<ul>\n<li><strong>Goal:</strong> To establish ClientPass as a thought leader i",
    "start_char": 6500,
    "end_char": 7000,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "n the industry and attract new users through valuable content.</li>\n<li><strong>Tactic:</strong> Create a series of high-quality video tutorials and blog posts on topics like &quot;How to Build a Six-Figure Clientele&quot;, &quot;The Ultimate Guide to Instagram for Stylists&quot;, and &quot;How to Run a Profitable Salon Suite&quot;.</li>\n<li><strong>Promotion:</strong> Promote the content through social media, email marketing, and SEO.</li>\n</ul>\n</li>\n</ul>\n<h2>5. The Marketing Funnel</h2>\n<p>W",
    "start_char": 7000,
    "end_char": 7500,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "e can visualize our marketing efforts as a funnel that guides potential users from awareness to advocacy.</p>\n<pre><code class=\"language-mermaid\">graph TD\n    subgraph &quot;Marketing Funnel&quot;\n        D1[Awareness] --&gt; D2[Interest];\n        D2 --&gt; D3[Consideration];\n        D3 --&gt; D4[Conversion];\n        D4 --&gt; D5[Loyalty];\n        D5 --&gt; D6[Advocacy];\n    end\n</code></pre>\n<ul>\n<li><strong>Awareness:</strong> Potential users hear about ClientPass for the first time through so",
    "start_char": 7500,
    "end_char": 8000,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "cial media, a blog post, or an ad.</li>\n<li><strong>Interest:</strong> They visit our website or social media profiles to learn more.</li>\n<li><strong>Consideration:</strong> They compare ClientPass to other solutions and read reviews.</li>\n<li><strong>Conversion:</strong> They sign up for a free trial or a paid plan.</li>\n<li><strong>Loyalty:</strong> They continue to use the application and have a positive experience.</li>\n<li><strong>Advocacy:</strong> They become a brand advocate and refer o",
    "start_char": 8000,
    "end_char": 8500,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68e30a9777e8ead370b13e61",
    "content": "ther users to the platform.</li>\n</ul>\n<p>By creating a comprehensive marketing strategy that targets the right audience with the right message through the right channels, we can maximize the adoption and success of the ClientPass application.</p>",
    "start_char": 8500,
    "end_char": 8748,
    "source_file": "MARKETING_RECOMMENDATIONS.md",
    "frontmatter": {
      "id": "68e30a9777e8ead370b13e61",
      "revision": 9
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a88",
    "content": "<h1>MVP Scope &amp; Effort Estimate</h1>\n<p>This document defines the scope and provides a high-level effort estimate for the Minimum Viable Product (MVP) of the ClientPass application.</p>\n<p><strong>Sizing Legend:</strong></p>\n<ul>\n<li><strong>S</strong>: Small</li>\n<li><strong>M</strong>: Medium</li>\n<li><strong>L</strong>: Large</li>\n</ul>\n<hr>\n<h2>1. MVP Scope</h2>\n<p>The MVP is focused on delivering the core referral workflow, which allows stylists to successfully refer clients to one anot",
    "start_char": 0,
    "end_char": 500,
    "source_file": "MVP_ESTIMATE.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a88",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a88",
    "content": "her and track their earnings. This provides the fundamental value of the platform.</p>\n<h3>1.1 In-Scope User Stories</h3>\n<p>The following user stories are included in the MVP:</p>\n<h4>Epic: User Authentication &amp; Onboarding</h4>\n<ul>\n<li><strong>Story</strong>: As a stylist, I want to sign up with my email and password so I can create an account and access the platform.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong></li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a user, I want to be",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "MVP_ESTIMATE.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a88",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a88",
    "content": "able to log in securely and log out of my account.\n<ul>\n<li><strong>Estimate</strong>: <strong>S</strong></li>\n</ul>\n</li>\n</ul>\n<h4>Epic: Profile &amp; Network Management</h4>\n<ul>\n<li><strong>Story</strong>: As a stylist, I want a basic profile with my name and photo so other users can identify me.\n<ul>\n<li><strong>Estimate</strong>: <strong>S</strong> <em>(Note: Scoped down from the full profile feature for MVP)</em></li>\n</ul>\n</li>\n</ul>\n<h4>Epic: Referral Management</h4>\n<ul>\n<li><strong>",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "MVP_ESTIMATE.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a88",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a88",
    "content": "Story</strong>: As a busy stylist, I want to quickly send a walk-in client I can't serve to another stylist so I can earn a commission.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong></li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a stylist, I want to receive real-time notifications for new referrals so I don't miss opportunities.\n<ul>\n<li><strong>Estimate</strong>: <strong>M</strong></li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a stylist, I want a 10-minute window to accept or declin",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "MVP_ESTIMATE.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a88",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a88",
    "content": "e a referral.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</strong></li>\n</ul>\n</li>\n<li><strong>Story</strong>: As a sender, I want the system to automatically reassign an expired or declined referral to the next best stylist.\n<ul>\n<li><strong>Estimate</strong>: <strong>L</strong></li>\n</ul>\n</li>\n</ul>\n<h4>Epic: Financials &amp; Earnings</h4>\n<ul>\n<li><strong>Story</strong>: As a user, I want to see a dashboard of my total, pending, and available earnings.\n<ul>\n<li><strong>Estimate</strong>:",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "MVP_ESTIMATE.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a88",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a88",
    "content": "<strong>M</strong></li>\n</ul>\n</li>\n</ul>\n<h3>1.2 Out-of-Scope Features</h3>\n<p>The following major features are <strong>excluded</strong> from the MVP and will be prioritized in a later phase:</p>\n<ul>\n<li>Open Chair Marketplace</li>\n<li>Hot Seat (Flash Sales)</li>\n<li>Coverage Mode</li>\n<li>Full Affiliate Program</li>\n<li>Pro Deals &amp; Admin Panels</li>\n<li>Advanced Profile Features (Portfolio, etc.)</li>\n<li>Advanced Network Management (Trusted Network, Auto-Suggest)</li>\n<li>Stripe Payout",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "MVP_ESTIMATE.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a88",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a88",
    "content": "Integration (earnings will be tracked but not paid out automatically in MVP).</li>\n</ul>\n<hr>\n<h2>2. MVP Effort Summary</h2>\n<p>Based on the in-scope stories, the total estimated effort for the MVP is:</p>\n<ul>\n<li><strong>Small Stories</strong>: 2</li>\n<li><strong>Medium Stories</strong>: 4</li>\n<li><strong>Large Stories</strong>: 2</li>\n</ul>\n<p>This represents a substantial but focused body of work, centered entirely on validating the core referral loop and commission-tracking functionality o",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "MVP_ESTIMATE.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a88",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a88",
    "content": "f the application.</p>",
    "start_char": 3500,
    "end_char": 3523,
    "source_file": "MVP_ESTIMATE.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a88",
      "revision": 14
    }
  },
  {
    "doc_id": "68e2f8d977e8ead370b13d43",
    "content": "<h1>Navigation Flowchart</h1>\n<p>This document describes the navigation flow of the application.</p>\n<pre><code class=\"language-mermaid\">graph TD\n    A[Index] --&gt; B{User Logged In?};\n    B -- Yes --&gt; C[Dashboard];\n    B -- No --&gt; D[AuthPage];\n\n    C --&gt; E[Pro Dashboard];\n    C --&gt; F[Suite Dashboard];\n    C --&gt; G[Client Dashboard];\n    C --&gt; H[Affiliate Dashboard];\n\n    H --&gt; I[Affiliate Marketplace];\n\n    F --&gt; J[Suite Tools];\n    J --&gt; K[Post Open Chair];\n    J --&",
    "start_char": 0,
    "end_char": 500,
    "source_file": "NAVIGATION_FLOW.md",
    "frontmatter": {
      "id": "68e2f8d977e8ead370b13d43",
      "revision": 9
    }
  },
  {
    "doc_id": "68e2f8d977e8ead370b13d43",
    "content": "gt; L[Open Chair List];\n    J --&gt; M[Open Chair Alerts];\n\n    G --&gt; N[Share and Earn];\n    G --&gt; O[Client Referral];\n\n    E --&gt; P[Stylist Profile Setup];\n    E --&gt; Q[Stylist Profile];\n    Q --&gt; R[Boost Profile];\n\n    subgraph &quot;Documentation&quot;\n        S[DevDocsPage] --&gt; T[DocViewerPage];\n    end\n\n    A --&gt; S;\n</code></pre>",
    "start_char": 500,
    "end_char": 856,
    "source_file": "NAVIGATION_FLOW.md",
    "frontmatter": {
      "id": "68e2f8d977e8ead370b13d43",
      "revision": 9
    }
  },
  {
    "doc_id": "68e2f5d877e8ead370b13cc7",
    "content": "<h1>Open Chair Alerts</h1>\n<p>This document describes the Open Chair Alerts feature.</p>\n<h2>Overview</h2>\n<p>The Open Chair Alerts page displays alerts for open chairs. It is implemented in the <code>OpenChairAlertsPage.tsx</code> component, which uses the <code>OpenChairAlerts</code> component.</p>",
    "start_char": 0,
    "end_char": 302,
    "source_file": "OPEN_CHAIR_ALERTS.md",
    "frontmatter": {
      "id": "68e2f5d877e8ead370b13cc7",
      "revision": 11
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8a",
    "content": "<h1>Post Open Chair Form</h1>\n<p>The <code>PostOpenChairForm</code> component allows salon suite owners and managers to post available chairs for other professionals to utilize. This form is a core part of the Suite Tools, enabling efficient management of temporary workspace and fostering collaboration within the professional community.</p>\n<h2>Key Features</h2>\n<ul>\n<li><strong>Location and Time Window</strong>: Owners can specify the exact location and a time window (start and end times) for t",
    "start_char": 0,
    "end_char": 500,
    "source_file": "OPEN_CHAIR_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8a",
    "content": "he open chair. The form includes validation to ensure the time window is in the future and does not exceed 12 hours.</li>\n<li><strong>Discipline Selection</strong>: Owners must select the type of professional needed for the chair (Barber or Stylist), which helps in targeting the right audience.</li>\n<li><strong>Service Selection</strong>: A comprehensive list of services is available, allowing owners to specify which services the visiting professional is allowed to perform. This list is dynamica",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "OPEN_CHAIR_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8a",
    "content": "lly filtered based on the selected discipline.</li>\n<li><strong>Chair Provider Earnings</strong>: Owners can set the commission percentage they will earn from services performed in their open chair, with a slider for easy adjustment.</li>\n<li><strong>Capacity Control</strong>: The form allows setting the number of available seats (capacity) for the open chair.</li>\n<li><strong>Audience Targeting</strong>: Owners can choose to broadcast the open chair to their &quot;Trusted Network&quot; or to &q",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "OPEN_CHAIR_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8a",
    "content": "uot;All Nearby&quot; professionals, providing flexibility in how they find a match.</li>\n<li><strong>Walk-In Client Option</strong>: A unique feature that allows owners to indicate if they have a walk-in client waiting. If selected, additional fields appear to specify the walk-in service type and price, streamlining the process for immediate client service.</li>\n<li><strong>Notes</strong>: An optional field for additional information such as parking, tools provided, or house rules.</li>\n</ul>\n<h",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "OPEN_CHAIR_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8a",
    "content": "2>Component Usage</h2>\n<p>The <code>PostOpenChairForm</code> is typically integrated into a suite management dashboard or a dedicated page for owners to list their available chairs.</p>\n<pre><code class=\"language-tsx\">import { PostOpenChairForm } from '@/components/open-chair/PostOpenChairForm';\n\nconst SuiteDashboard = () =&gt; {\n  return (\n    &lt;PostOpenChairForm onSuccess={() =&gt; console.log('Open Chair posted successfully!')} /&gt;\n  );\n};\n</code></pre>\n<h2>Data Flow</h2>\n<ol>\n<li>The for",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "OPEN_CHAIR_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8a",
    "content": "m initializes by fetching available services from the backend.</li>\n<li>The owner fills in the details for the open chair, including location, time, discipline, services, commission, capacity, and audience.</li>\n<li>If the &quot;Walk-In Client&quot; option is selected, additional service and pricing details are captured.</li>\n<li>Upon submission, the <code>handleSubmit</code> function invokes a Supabase Edge Function (<code>post-open-chair</code>) with all the collected data.</li>\n<li>The Edge F",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "OPEN_CHAIR_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8a",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8a",
    "content": "unction processes the request, creates the open chair listing, and potentially sends notifications to matching professionals.</li>\n<li>Success or error messages are displayed using <code>useToast</code>.</li>\n</ol>",
    "start_char": 3000,
    "end_char": 3215,
    "source_file": "OPEN_CHAIR_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8a",
      "revision": 14
    }
  },
  {
    "doc_id": "OPEN_CHAIR_LIST",
    "content": "<h1>Open Chair List</h1>\n<p>This document provides a detailed description of the Open Chair List feature.</p>\n<h2>1. Overview</h2>\n<p>The Open Chair List page allows users (typically stylists or suite owners) to view and manage the &quot;open chair&quot; slots they have posted. It provides a real-time overview of their current and past postings.</p>\n<p>The page is implemented in the <code>OpenChairList.tsx</code> component.</p>\n<h2>2. Features</h2>\n<h3>2.1. View Open Chair Postings</h3>\n<ul>\n<li",
    "start_char": 0,
    "end_char": 500,
    "source_file": "OPEN_CHAIR_LIST.md",
    "frontmatter": {}
  },
  {
    "doc_id": "OPEN_CHAIR_LIST",
    "content": ">The page fetches and displays a list of all open chair postings created by the logged-in user.</li>\n<li>The list is ordered chronologically, with the most recent postings appearing first.</li>\n<li>A loading animation is displayed while the data is being fetched from the database.</li>\n<li>If the user has not posted any open chairs, a &quot;No open chair posts yet.&quot; message is displayed.</li>\n</ul>\n<h3>2.2. Information Displayed</h3>\n<p>For each open chair posting, the following information",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "OPEN_CHAIR_LIST.md",
    "frontmatter": {}
  },
  {
    "doc_id": "OPEN_CHAIR_LIST",
    "content": "is displayed in a card format:</p>\n<ul>\n<li><strong>Zip Code &amp; Time Window:</strong> The location and the time slot for the open chair.</li>\n<li><strong>Status:</strong> The current status of the posting (e.g., <code>open</code>, <code>filled</code>, <code>expired</code>).</li>\n<li><strong>Expiration Date:</strong> The date and time when the posting will expire.</li>\n</ul>\n<h3>2.3. Mark as Filled</h3>\n<ul>\n<li>If a posting has a status of <code>open</code>, the user has the option to mark i",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "OPEN_CHAIR_LIST.md",
    "frontmatter": {}
  },
  {
    "doc_id": "OPEN_CHAIR_LIST",
    "content": "t as &quot;filled&quot;.</li>\n<li>Clicking the &quot;Mark Filled&quot; button updates the status of the posting in the database to <code>filled</code>.</li>\n<li>This action is useful for manually managing the availability of a chair if it gets filled through a channel outside of the ClientPass system.</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Open Chair List feature interacts with the <code>open_chairs</code> table in the Supabase database. The following fields are relevant to this feature:</p>\n<",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "OPEN_CHAIR_LIST.md",
    "frontmatter": {}
  },
  {
    "doc_id": "OPEN_CHAIR_LIST",
    "content": "ul>\n<li><code>id</code>: A unique identifier for the open chair posting.</li>\n<li><code>user_id</code>: The ID of the user who created the posting.</li>\n<li><code>zip_code</code>: The zip code of the location.</li>\n<li><code>time_window</code>: The time slot for the open chair.</li>\n<li><code>status</code>: The current status of the posting.</li>\n<li><code>created_at</code>: The timestamp when the posting was created.</li>\n<li><code>expires_at</code>: The timestamp when the posting will expire.<",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "OPEN_CHAIR_LIST.md",
    "frontmatter": {}
  },
  {
    "doc_id": "OPEN_CHAIR_LIST",
    "content": "/li>\n<li><code>service_id</code>: The ID of the service associated with the open chair.</li>\n</ul>\n<h2>4. User Interface</h2>\n<p>The user interface consists of:</p>\n<ul>\n<li>A header with the application logo.</li>\n<li>A main content area that displays the list of open chair cards.</li>\n<li>A bottom navigation bar for navigating to other parts of the application.</li>\n</ul>",
    "start_char": 2500,
    "end_char": 2877,
    "source_file": "OPEN_CHAIR_LIST.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68e2f5c777e8ead370b13cbb",
    "content": "<h1>Post Open Chair</h1>\n<p>This document describes the Post Open Chair feature.</p>\n<h2>Overview</h2>\n<p>The Post Open Chair page allows users to post a new open chair. It is implemented in the <code>PostOpenChairPage.tsx</code> component, which uses the <code>PostOpenChairForm</code> component.</p>",
    "start_char": 0,
    "end_char": 302,
    "source_file": "POST_OPEN_CHAIR.md",
    "frontmatter": {
      "id": "68e2f5c777e8ead370b13cbb",
      "revision": 11
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "<h1>Process Models</h1>\n<p>This document contains diagrams that model the key business processes and entity lifecycles within the ClientPass application.</p>\n<hr>\n<h2>1. Referral Lifecycle State Machine</h2>\n<p>This diagram illustrates the various states a <code>Referral</code> can be in, from creation to completion. It models the transitions based on user actions and system events.</p>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    direction LR\n\n    [*] --&gt; pending: Referral Sent",
    "start_char": 0,
    "end_char": 500,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "pending --&gt; accepted: Pro Accepts\n    pending --&gt; expired: Timer Expires\n    pending --&gt; declined: Pro Declines\n    pending --&gt; cancelled: Sender Cancels\n\n    expired --&gt; pending: System Reassigns to New Pro\n    declined --&gt; pending: System Reassigns to New Pro\n\n    accepted --&gt; completed: Service Confirmed by Client\n    accepted --&gt; cancelled: Client or Pro Cancels\n\n    completed --&gt; [*]: End (Payout Triggered)\n    cancelled --&gt; [*]: End\n</code></pre>\n<h3>State",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "Descriptions</h3>\n<ul>\n<li><strong>pending</strong>: A referral has been sent to a professional and is awaiting their response within a 10-minute window.</li>\n<li><strong>accepted</strong>: A professional has accepted the referral and is expected to contact the client to schedule.</li>\n<li><strong>expired</strong>: The 10-minute response timer ran out. The system will attempt to reassign the referral.</li>\n<li><strong>declined</strong>: The professional actively declined the referral. The system",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "will attempt to reassign.</li>\n<li><strong>cancelled</strong>: The referral was cancelled by the sender, client, or an administrator before the service was completed.</li>\n<li><strong>completed</strong>: The client has confirmed the service was rendered, and the payment process is initiated.</li>\n</ul>\n<h2>2. Open Chair Lifecycle State Machine</h2>\n<p>This diagram shows the states of an <code>open_chairs</code> listing.</p>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    direction LR",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "[*] --&gt; open: Host Posts Chair\n\n    open --&gt; accepted: Pro Accepts\n    open --&gt; cancelled: Host Cancels\n\n    accepted --&gt; live: Pro Checks In\n    accepted --&gt; cancelled: Pro or Host Cancels\n\n    live --&gt; completed: Session Ends\n    live --&gt; cancelled: Session Cancelled\n\n    completed --&gt; [*]: End\n    cancelled --&gt; [*]: End\n</code></pre>\n<h3>State Descriptions</h3>\n<ul>\n<li><strong>open</strong>: The chair is listed and available for booking.</li>\n<li><strong>accepte",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "d</strong>: A Pro has accepted the open chair offer but has not yet started the session.</li>\n<li><strong>live</strong>: The Pro has checked in, and the session is in progress.</li>\n<li><strong>completed</strong>: The session has ended, and commissions are settled.</li>\n<li><strong>cancelled</strong>: The listing was cancelled by the host or the pro.</li>\n</ul>\n<h2>3. Hot Seat Lifecycle State Machine</h2>\n<p>This diagram shows the states of a <code>hot_seats</code> offer.</p>\n<pre><code class=\"l",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "anguage-mermaid\">stateDiagram-v2\n    direction LR\n\n    [*] --&gt; posted: Pro Posts Hot Seat\n\n    posted --&gt; claimed: Client Claims\n    posted --&gt; expired: Timer Expires\n    posted --&gt; cancelled: Pro Cancels\n\n    claimed --&gt; completed: Service Completed\n    claimed --&gt; cancelled: Client or Pro Cancels\n\n    completed --&gt; [*]: End\n    expired --&gt; [*]: End\n    cancelled --&gt; [*]: End\n</code></pre>\n<h3>State Descriptions</h3>\n<ul>\n<li><strong>posted</strong>: The hot seat is a",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "vailable for clients to claim.</li>\n<li><strong>claimed</strong>: A client has claimed the hot seat.</li>\n<li><strong>expired</strong>: The offer has expired without being claimed.</li>\n<li><strong>completed</strong>: The service has been completed and paid for.</li>\n<li><strong>cancelled</strong>: The hot seat was cancelled by the pro or the client.</li>\n</ul>\n<h2>4. User Onboarding Flow</h2>\n<p>This sequence diagram shows the steps for a new user to get fully set up on the platform.</p>\n<pre><",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "code class=\"language-mermaid\">sequenceDiagram\n    participant User\n    participant Frontend\n    participant Supabase\n\n    User-&gt;&gt;Frontend: Submits Sign Up Form\n    Frontend-&gt;&gt;Supabase: supabase.auth.signUp()\n    Supabase-&gt;&gt;User: Sends verification email\n    User-&gt;&gt;User: Clicks verification link in email\n    Supabase-&gt;&gt;Frontend: Verifies token and authenticates user\n    Frontend-&gt;&gt;User: Redirects to Profile Setup page\n    User-&gt;&gt;Frontend: Fills out profil",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8c",
    "content": "e information (name, role, etc.)\n    Frontend-&gt;&gt;Supabase: Invokes `upsert-profile` Edge Function\n    Supabase-&gt;&gt;Supabase: Creates a new record in `users` table\n    Supabase--&gt;&gt;Frontend: Returns success\n    Frontend-&gt;&gt;User: Redirects to the main dashboard\n</code></pre>",
    "start_char": 4500,
    "end_char": 4793,
    "source_file": "PROCESS_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8c",
      "revision": 14
    }
  },
  {
    "doc_id": "PRO_DASHBOARD",
    "content": "<h1>Pro Dashboard</h1>\n<p>This document provides a detailed description of the Pro Dashboard, the central hub for professional users (stylists, barbers) to manage their business on ClientPass.</p>\n<h2>1. Overview</h2>\n<p>The Pro Dashboard is designed to provide a comprehensive set of tools and information for professional users. It acts as a central navigation point, allowing stylists to access various functionalities related to client management, referrals, scheduling, earnings, and profile set",
    "start_char": 0,
    "end_char": 500,
    "source_file": "PRO_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "PRO_DASHBOARD",
    "content": "tings.</p>\n<p>The dashboard is implemented in the <code>Dashboard.tsx</code> component, which dynamically renders different sub-pages based on the active tab selected by the user.</p>\n<h2>2. Key Features and Navigation</h2>\n<p>The Pro Dashboard is organized into several key sections, accessible via a bottom navigation bar and a settings icon in the header.</p>\n<h3>2.1. Home (HomePage.tsx)</h3>\n<ul>\n<li><strong>Summary of Activity:</strong> Provides a quick overview of the day's key metrics, such",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "PRO_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "PRO_DASHBOARD",
    "content": "as recent earnings, pending referrals, and upcoming appointments.</li>\n<li><strong>Quick Actions:</strong> Offers direct access to frequently used actions like sending a referral or posting an open chair.</li>\n<li><strong>Dynamic Content:</strong> This page likely integrates various cards or widgets that summarize information from other sections (e.g., a mini-view of referral timers, open chair status).</li>\n</ul>\n<h3>2.2. Schedule (SchedulePage.tsx)</h3>\n<ul>\n<li><strong>Calendar View:</strong",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "PRO_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "PRO_DASHBOARD",
    "content": "> Displays a calendar view of all upcoming and past appointments.</li>\n<li><strong>Appointment Management:</strong> Allows stylists to view appointment details, confirm, reschedule, or cancel appointments.</li>\n<li><strong>Availability Management:</strong> Provides tools for stylists to set and manage their availability.</li>\n</ul>\n<h3>2.3. Earnings (EarningsPage.tsx)</h3>\n<ul>\n<li><strong>Detailed Breakdown:</strong> Offers a comprehensive breakdown of earnings from various sources, including s",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "PRO_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "PRO_DASHBOARD",
    "content": "ervices, referrals, and product sales.</li>\n<li><strong>Payment Tracking:</strong> Allows stylists to track their pending, available, and paid out earnings.</li>\n<li><strong>Reporting:</strong> Provides basic reporting features to analyze income over time.</li>\n</ul>\n<h3>2.4. Pro Hub (ProHubPage.tsx)</h3>\n<ul>\n<li><strong>Exclusive Resources:</strong> A dedicated section for professional users to discover exclusive deals, educational resources, and industry news.</li>\n<li><strong>Community Acces",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "PRO_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "PRO_DASHBOARD",
    "content": "s:</strong> May include links to professional forums or communities.</li>\n</ul>\n<h3>2.5. Inbox (InboxPage.tsx)</h3>\n<ul>\n<li><strong>Notification Center:</strong> A centralized inbox for all notifications, including new referral requests, appointment confirmations, payment updates, and system alerts.</li>\n<li><strong>Message Management:</strong> Allows users to view, manage, and respond to messages.</li>\n</ul>\n<h3>2.6. Settings (SettingsPage.tsx)</h3>\n<ul>\n<li><strong>Profile Management:</strong",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "PRO_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "PRO_DASHBOARD",
    "content": "> Comprehensive settings for managing the stylist's profile, including personal information, contact details, and photo.</li>\n<li><strong>Service Configuration:</strong> Tools to add, edit, and delete services offered, along with pricing and duration.</li>\n<li><strong>Commission Settings:</strong> Configuration for referral and open chair commission rates.</li>\n<li><strong>Account Settings:</strong> General account management options, such as password changes and notification preferences.</li>\n<",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "PRO_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "PRO_DASHBOARD",
    "content": "/ul>\n<h2>3. User Interface</h2>\n<p>The Pro Dashboard features a clean and intuitive user interface:</p>\n<ul>\n<li><strong>Header:</strong> Contains the ClientPass logo and a quick-access settings icon.</li>\n<li><strong>Main Content Area:</strong> Dynamically displays the content of the selected sub-page.</li>\n<li><strong>Bottom Navigation:</strong> Provides easy access to the main sections of the dashboard (Home, Schedule, Earnings, Pro Hub, Inbox).</li>\n</ul>\n<h2>4. Benefits</h2>\n<ul>\n<li><stron",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "PRO_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "PRO_DASHBOARD",
    "content": "g>Centralized Management:</strong> All essential tools and information are accessible from a single, intuitive interface.</li>\n<li><strong>Increased Efficiency:</strong> Streamlines daily operations, saving stylists time and effort.</li>\n<li><strong>Enhanced Earnings:</strong> Provides tools and insights to help stylists maximize their income.</li>\n<li><strong>Improved Client Experience:</strong> Facilitates better client management and communication.</li>\n</ul>",
    "start_char": 4000,
    "end_char": 4467,
    "source_file": "PRO_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "<h1>Quality Assurance (QA) Plan</h1>\n<h2>1. Introduction</h2>\n<h3>1.1 Purpose</h3>\n<p>This document outlines the Quality Assurance (QA) strategy for the ClientPass application. Its purpose is to define the scope of testing, methodologies, resources, and schedule to ensure the final product is reliable, functional, and meets the requirements specified in the Software Requirements Specification (SRS).</p>\n<h3>1.2 Scope</h3>\n<p>This QA plan covers all aspects of the ClientPass web application, incl",
    "start_char": 0,
    "end_char": 500,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "uding:</p>\n<ul>\n<li><strong>Functional Testing</strong>: Verifying all features work as designed.</li>\n<li><strong>UI/UX &amp; Usability Testing</strong>: Ensuring the application is intuitive and easy to use.</li>\n<li><strong>Performance Testing</strong>: Checking for responsiveness and speed, especially in real-time features.</li>\n<li><strong>Security Testing</strong>: Validating data protection and access control.</li>\n</ul>\n<h2>2. Testing Strategy</h2>\n<h3>2.1 Levels of Testing</h3>\n<ol>\n<li",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": ">\n<p><strong>Unit Testing</strong>: Developers are responsible for writing unit tests for individual components, utility functions, and Supabase Edge Functions. The goal is to ensure each isolated part works correctly.</p>\n<ul>\n<li><em>Tools</em>: Jest, React Testing Library.</li>\n</ul>\n</li>\n<li>\n<p><strong>Integration Testing</strong>: This phase focuses on testing the interactions between different parts of the application, such as:</p>\n<ul>\n<li>Frontend components interacting with React Cont",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "exts.</li>\n<li>Client-side forms submitting data to Supabase Edge Functions.</li>\n<li>Interactions between different Edge Functions.</li>\n</ul>\n</li>\n<li>\n<p><strong>System (End-to-End) Testing</strong>: E2E tests will simulate full user journeys to validate complete workflows from the user's perspective.</p>\n<ul>\n<li><em>Tools</em>: Cypress or Playwright.</li>\n</ul>\n</li>\n<li>\n<p><strong>User Acceptance Testing (UAT)</strong>: A final phase where stakeholders or a sample group of target users (",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "stylists, suite owners) test the application to confirm it meets their business needs.</p>\n</li>\n</ol>\n<h3>2.2 Types of Testing</h3>\n<ul>\n<li><strong>Functional Testing</strong>: Validating the specific requirements outlined in the SRS.</li>\n<li><strong>Usability Testing</strong>: Ensuring the application is user-friendly, especially on mobile devices.</li>\n<li><strong>Compatibility Testing</strong>: Verifying the application works correctly on major web browsers (Chrome, Firefox, Safari).</li>",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "<li><strong>Security Testing</strong>: Includes checks for proper data access control via Supabase RLS and secure handling of authentication tokens.</li>\n</ul>\n<h2>3. Test Environment</h2>\n<ul>\n<li><strong>Local Development</strong>: Developers will run tests locally using <code>npm run dev</code> and <code>npm run test</code>.</li>\n<li><strong>Staging Environment</strong>: A dedicated Supabase project and Vercel/Netlify deployment will be used for pre-production testing to mirror the production",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "environment as closely as possible.</li>\n</ul>\n<h2>4. Test Scenarios</h2>\n<p>This section outlines high-level test cases for the core features of ClientPass.</p>\n<h3>4.1 User Authentication &amp; Roles</h3>\n<ul>\n<li><strong>TC-AUTH-01</strong>: Verify a new user can sign up as a &quot;Stylist&quot; and log in.</li>\n<li><strong>TC-AUTH-02</strong>: Verify a new user can sign up as a &quot;Suite Owner&quot; and sees the Suite Tools on their dashboard.</li>\n<li><strong>TC-AUTH-03</strong>: Verify",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "a user signing up via the <code>/affiliate-auth</code> route is created as an affiliate and sees the affiliate dashboard.</li>\n<li><strong>TC-AUTH-04</strong>: Verify that a non-admin user cannot access admin-only pages or data.</li>\n</ul>\n<h3>4.2 Referral Workflow</h3>\n<ul>\n<li><strong>TC-REF-01</strong>: A Pro sends a referral. Verify the receiving Pro gets a notification with a 10-minute countdown timer.</li>\n<li><strong>TC-REF-02</strong>: A receiver accepts a referral within 10 minutes. Ver",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "ify the referral status updates to <code>accepted</code> and the sender is notified.</li>\n<li><strong>TC-REF-03</strong>: A receiver declines a referral. Verify the system reassigns it to the next available Pro.</li>\n<li><strong>TC-REF-04</strong>: A referral timer expires. Verify the system automatically reassigns it.</li>\n<li><strong>TC-REF-05</strong>: After a service is marked <code>completed</code>, verify the commission is calculated correctly based on the service price and commission perc",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "entage.</li>\n</ul>\n<h3>4.3 Open Chair &amp; Live Sessions</h3>\n<ul>\n<li><strong>TC-OC-01</strong>: A Host posts an Open Chair. Verify the listing is visible to other Pros in the correct audience group ('trusted' or 'all').</li>\n<li><strong>TC-OC-02</strong>: A Pro accepts an Open Chair. Verify the host is notified and the chair's status becomes <code>accepted</code>.</li>\n<li><strong>TC-OC-03</strong>: The accepting Pro checks in. Verify the session status changes to <code>live</code> and the Li",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "ve Session Card appears on their dashboard.</li>\n<li><strong>TC-OC-04</strong>: During a live session, log a service with a manual payment. Verify the host's commission is calculated correctly, accounting for the manual payment surcharge.</li>\n<li><strong>TC-OC-05</strong>: End a session. Verify all earnings are settled and the session is marked <code>completed</code>.</li>\n</ul>\n<h3>4.4 Commissions &amp; Fees</h3>\n<ul>\n<li><strong>TC-FEE-01</strong>: Test with a service price &lt; $100. Verify",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "the platform fee is $3 for Free members and $2 for Pro members.</li>\n<li><strong>TC-FEE-02</strong>: Test with a service price &gt;= $100. Verify the platform fee is $5 for Free members and $3 for Pro members.</li>\n<li><strong>TC-FEE-03</strong>: Test an Open Chair booking with an outside referrer. Verify the referrer earns 10% of the service price, and this amount is deducted from the host's share, not the stylist's earnings.</li>\n</ul>\n<h3>4.5 Profile &amp; Network</h3>\n<ul>\n<li><strong>TC-NET",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "-01</strong>: Add a user to the Trusted Network. Verify they appear in the list.</li>\n<li><strong>TC-NET-02</strong>: Send a referral with the &quot;Trusted Network first&quot; option. Verify the referral is only sent to trusted partners initially.</li>\n<li><strong>TC-NET-03</strong>: Simulate two completed co-ops between users. Verify the system prompts to add the other user to the Trusted Network.</li>\n</ul>\n<h3>4.6 Admin Console</h3>\n<ul>\n<li><strong>TC-ADMIN-01</strong>: Log in as an admin.",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "Verify the Master Admin Console is visible and all modules are accessible.</li>\n<li><strong>TC-ADMIN-02</strong>: Log in as a non-admin user. Verify that navigating to <code>/admin</code> redirects to the main dashboard and shows an &quot;Access Denied&quot; error.</li>\n<li><strong>TC-ADMIN-03</strong>: In the User Management module, change a user's role from 'member' to 'admin'. Verify the user can now access the admin console.</li>\n<li><strong>TC-ADMIN-04</strong>: In the Feature Flags module,",
    "start_char": 6500,
    "end_char": 7000,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "disable a feature (e.g., &quot;Hot Seat&quot;). Verify the Hot Seat button/form is no longer visible to regular users.</li>\n<li><strong>TC-ADMIN-05</strong>: In the Platform Settings module, change the platform fee percentage. Verify that new referrals use the updated fee in their commission calculations.</li>\n<li><strong>TC-ADMIN-06</strong>: In the Data Export module, export the 'users' dataset. Verify a CSV file is downloaded with the correct user data.</li>\n<li><strong>TC-ADMIN-07</strong>:",
    "start_char": 7000,
    "end_char": 7500,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "Perform an administrative action (e.g., approve a business application). Verify the action is recorded correctly in the Audit Log module.</li>\n<li><strong>TC-ADMIN-08</strong>: Use the impersonation feature to view the app as a regular user. Verify the admin banner is present and that admin-level access is disabled during impersonation.</li>\n</ul>\n<h2>5. Bug Reporting</h2>\n<ul>\n<li>All bugs will be tracked in a designated issue tracker (e.g., GitHub Issues).</li>\n<li>Each bug report must includ",
    "start_char": 7500,
    "end_char": 8000,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a8e",
    "content": "e:\n<ul>\n<li>A clear, descriptive title.</li>\n<li>Steps to reproduce the bug.</li>\n<li>Expected result vs. Actual result.</li>\n<li>Screenshots or video recordings.</li>\n<li>Severity level (e.g., Blocker, Critical, Major, Minor).</li>\n</ul>\n</li>\n</ul>",
    "start_char": 8000,
    "end_char": 8251,
    "source_file": "QA_PLAN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a8e",
      "revision": 14
    }
  },
  {
    "doc_id": "REFERRAL_COMPLETE",
    "content": "<h1>Referral Complete Component</h1>\n<p>This document provides a detailed description of the <code>ReferralComplete</code> component.</p>\n<h2>1. Overview</h2>\n<p>The <code>ReferralComplete</code> component is a reusable UI element designed to provide a positive and informative confirmation screen after a referral process has been successfully completed (e.g., a referral has been accepted and a booking confirmed). It aims to reinforce the positive outcome and guide the user on next steps.</p>\n<h2",
    "start_char": 0,
    "end_char": 500,
    "source_file": "REFERRAL_COMPLETE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_COMPLETE",
    "content": ">2. Features</h2>\n<h3>2.1. Dynamic Confirmation Message</h3>\n<ul>\n<li>Displays a clear and congratulatory message indicating the successful completion of the referral.</li>\n<li>The message is personalized with the client's name and the stylist's name.</li>\n</ul>\n<h3>2.2. Earnings Summary</h3>\n<ul>\n<li>Provides a summary of the potential earnings or commission generated from the completed referral.</li>\n<li>This reinforces the value of the referral system for the user.</li>\n</ul>\n<h3>2.3. Next St",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "REFERRAL_COMPLETE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_COMPLETE",
    "content": "eps Guidance</h3>\n<ul>\n<li>Offers clear guidance on what the user can expect next (e.g., &quot;Stylist will contact client soon&quot;).</li>\n<li>Provides a button to navigate back to the dashboard, allowing the user to continue with other tasks.</li>\n</ul>\n<h2>3. Usage</h2>\n<p>The <code>ReferralComplete</code> component is used in pages like <code>WaitingForResponse.tsx</code> to display a success screen after a referral has been accepted.</p>\n<pre><code class=\"language-tsx\">import { ReferralCom",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "REFERRAL_COMPLETE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_COMPLETE",
    "content": "plete } from '@/components/success/ReferralComplete';\n\nconst MyPage = () =&gt; {\n  const handleBack = () =&gt; {\n    console.log('Navigating back to dashboard');\n    // Navigate to dashboard\n  };\n\n  return (\n    &lt;ReferralComplete\n      clientName=&quot;Jane Doe&quot;\n      stylistName=&quot;John Smith&quot;\n      earningsAmount={75.00}\n      onBack={handleBack}\n    /&gt;\n  );\n};\n</code></pre>\n<h2>4. Props</h2>\n<ul>\n<li><code>clientName</code>: (string) The name of the client involved in the r",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "REFERRAL_COMPLETE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_COMPLETE",
    "content": "eferral.</li>\n<li><code>stylistName</code>: (string) The name of the stylist who accepted the referral.</li>\n<li><code>earningsAmount</code>: (number) The amount of earnings or commission generated by the referral.</li>\n<li><code>onBack</code>: (function) A callback function to be executed when the &quot;Back to Dashboard&quot; button is clicked.</li>\n</ul>",
    "start_char": 2000,
    "end_char": 2360,
    "source_file": "REFERRAL_COMPLETE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_TIMERS",
    "content": "<h1>Referral Timers</h1>\n<p>This document provides a detailed description of the Referral Timers feature.</p>\n<h2>1. Overview</h2>\n<p>The Referral Timers page provides a real-time dashboard for stylists to manage their incoming and outgoing referrals. It is a crucial feature for ensuring that referrals are handled in a timely manner.</p>\n<p>The page is implemented in the <code>ReferralTimersPage.tsx</code> page, which wraps the <code>ReferralTimerDashboard.tsx</code> component.</p>\n<h2>2. Featur",
    "start_char": 0,
    "end_char": 500,
    "source_file": "REFERRAL_TIMERS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_TIMERS",
    "content": "es</h2>\n<h3>2.1. Real-time Updates</h3>\n<ul>\n<li>The page uses Supabase real-time subscriptions to listen for changes to the <code>referrals</code> table.</li>\n<li>This means that the dashboard is always up to date with the latest referral information, without the need for manual refreshing.</li>\n<li>The page also auto-refreshes every 30 seconds as a fallback to keep the timers accurate.</li>\n</ul>\n<h3>2.2. Sent and Received Referrals</h3>\n<ul>\n<li>The dashboard is divided into two tabs: &quot;S",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "REFERRAL_TIMERS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_TIMERS",
    "content": "ent&quot; and &quot;Received&quot;.</li>\n<li>The &quot;Sent&quot; tab shows a list of referrals that the logged-in stylist has sent to other stylists.</li>\n<li>The &quot;Received&quot; tab shows a list of referrals that have been sent to the logged-in stylist.</li>\n<li>Each tab shows a count of the number of referrals.</li>\n</ul>\n<h3>2.3. Referral Card</h3>\n<p>Each referral is displayed on a card with the following information:</p>\n<ul>\n<li>Client's name.</li>\n<li>Status of the referral (e.g., <",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "REFERRAL_TIMERS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_TIMERS",
    "content": "code>pending</code>, <code>waiting_response</code>, <code>accepted</code>).</li>\n<li>The name of the sender or receiver.</li>\n<li>Potential earnings from the referral, including the estimated service price and the commission.</li>\n<li>A countdown timer for pending referrals, showing how much time is left to respond.</li>\n<li>Details about the service, location, and client's phone number.</li>\n<li>Any notes included with the referral.</li>\n</ul>\n<h3>2.4. Accept/Decline Referrals</h3>\n<ul>\n<li>For",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "REFERRAL_TIMERS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_TIMERS",
    "content": "received referrals that are in a <code>pending</code> state, the stylist has the option to &quot;Accept&quot; or &quot;Decline&quot;.</li>\n<li><strong>Accepting</strong> a referral updates its status to <code>accepted</code> and moves it to the stylist's pending list.</li>\n<li><strong>Declining</strong> a referral triggers a Supabase Edge Function (<code>reassign-referral</code>) to find the next available professional.</li>\n</ul>\n<h3>2.5. Demo Mode</h3>\n<ul>\n<li>The page includes a button to &",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "REFERRAL_TIMERS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_TIMERS",
    "content": "quot;+ Add Demo Referral&quot;.</li>\n<li>This allows users to create a new referral with a fresh 10-minute timer, which is useful for demonstrating the feature.</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Referral Timers feature interacts with the <code>referrals</code> and <code>users</code> tables in the Supabase database.</p>\n<h2>4. User Interface</h2>\n<p>The user interface consists of:</p>\n<ul>\n<li>A header with a back button and a title.</li>\n<li>A tabbed interface to switch between &quot;Sent",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "REFERRAL_TIMERS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "REFERRAL_TIMERS",
    "content": "&quot; and &quot;Received&quot; referrals.</li>\n<li>A list of referral cards, each with detailed information and action buttons.</li>\n</ul>",
    "start_char": 3000,
    "end_char": 3140,
    "source_file": "REFERRAL_TIMERS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "<h1>Software Architecture Document (SAD)</h1>\n<h2>1. Introduction</h2>\n<h3>1.1 Purpose</h3>\n<p>This document provides a comprehensive architectural overview of the ClientPass application. It is intended for developers, architects, and technical stakeholders to understand the system's structure, components, interactions, and design principles.</p>\n<h3>1.2 Scope</h3>\n<p>The scope of this document covers the <strong>ClientPass platform</strong>, which includes a frontend web application, a native m",
    "start_char": 0,
    "end_char": 500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "obile application, a serverless backend, the database schema, and the deployment strategy.</p>\n<h3>1.3 Architectural Representation</h3>\n<p>This document uses a simplified version of the <strong>4+1 architectural view model</strong> to describe the system from different perspectives:</p>\n<ul>\n<li><strong>Logical View</strong>: The system's functional components and their responsibilities.</li>\n<li><strong>Process View</strong>: The system's dynamic behavior and component interactions.</li>\n<li><",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "strong>Development View</strong>: The organization of the source code and build system.</li>\n<li><strong>Physical (Deployment) View</strong>: The mapping of software components to the physical infrastructure.</li>\n<li><strong>Data View</strong>: The structure and organization of the data.</li>\n</ul>\n<h2>2. System Architecture Diagram</h2>\n<p>This diagram provides a detailed, high-level view of the entire system architecture, including network boundaries, services, and dependencies for both web a",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "nd mobile clients.</p>\n<pre><code class=\"language-mermaid\">graph TB\n    subgraph &quot;User's Devices&quot;\n        direction LR\n        UserWeb[&quot;🧍&lt;br/&gt;User (Web)&quot;]\n        UserMobile[&quot;📱&lt;br/&gt;User (Mobile)&quot;]\n    end\n\n    subgraph &quot;Client Frontends&quot;\n        direction TB\n        subgraph &quot;Vercel CDN&quot;\n            FrontendWeb[React SPA]\n        end\n        subgraph &quot;App Stores&quot;\n            FrontendMobile[React Native App]\n        end",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "end\n\n    UserWeb -- &quot;HTTPS&quot; --&gt; FrontendWeb\n    UserMobile -- &quot;App Install&quot; --&gt; FrontendMobile\n\n    subgraph &quot;Supabase Platform (Cloud Provider)&quot;\n        direction TB\n        Gateway[API Gateway / Firewall]\n\n        subgraph &quot;Backend Services&quot;\n            direction LR\n            Auth[Auth Service]\n            PostgREST[PostgREST API]\n            Realtime[Realtime Service]\n            EdgeFunctions[Edge Functions]\n        end\n\n        Database[(Post",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "greSQL DB)]\n\n        Gateway --&gt; Auth\n        Gateway --&gt; PostgREST\n        Gateway -- &quot;WSS&quot; --&gt; Realtime\n        Gateway --&gt; EdgeFunctions\n\n        Auth --&gt; Database\n        PostgREST --&gt; Database\n        Realtime --&gt; Database\n        EdgeFunctions --&gt; Database\n    end\n\n    FrontendWeb -- &quot;HTTPS/WSS&quot; --&gt; Gateway\n    FrontendMobile -- &quot;HTTPS/WSS&quot; --&gt; Gateway\n\n    subgraph &quot;Third-Party APIs&quot;\n        direction TB\n        Stripe[",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "Stripe API]\n        Resend[Resend API]\n    end\n\n    EdgeFunctions -- &quot;HTTPS&quot; --&gt; Stripe\n    EdgeFunctions -- &quot;HTTPS&quot; --&gt; Resend\n\n    style FrontendWeb fill:#61DAFB,color:#000\n    style FrontendMobile fill:#61DAFB,color:#000\n    style Gateway fill:#F48024,color:#fff\n    style Database fill:#336791,color:#fff\n    style Stripe fill:#6772e5,color:#fff\n</code></pre>\n<h2>3. Logical View</h2>\n<p>This diagram illustrates the high-level logical components of the system and their",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "primary relationships.</p>\n<pre><code class=\"language-mermaid\">graph TD\n    subgraph &quot;Client Devices&quot;\n        A[Web Frontend (React)]\n        B[Mobile Frontend (React Native)]\n    end\n\n    subgraph &quot;Supabase Cloud&quot;\n        C[Authentication]\n        D[Database - PostgreSQL]\n        E[Edge Functions - Deno]\n        F[Real-time Service]\n    end\n\n    subgraph &quot;Third-Party Services&quot;\n        G[Stripe API]\n        H[Resend API]\n    end\n\n    A -- API_Calls --&gt; C\n    A -",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "- API_Calls --&gt; D\n    A -- API_Calls --&gt; E\n    A -- API_Calls --&gt; F\n    B -- API_Calls --&gt; C\n    B -- API_Calls --&gt; D\n    B -- API_Calls --&gt; E\n    B -- API_Calls --&gt; F\n\n    E -- DB_Connection --&gt; D\n    E -- HTTPS_API_Call --&gt; G\n    E -- HTTPS_API_Call --&gt; H\n</code></pre>\n<p>The system is decomposed into three main containers: the Web Frontend, the Mobile Frontend, and the shared Backend Services.</p>\n<h3>3.1 Frontend Applications (Client-Side)</h3>\n<h4>3.1.1 Web App",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "lication</h4>\n<ul>\n<li><strong>UI Components (React)</strong>: Built with React, TypeScript, and <strong>shadcn-ui</strong>.</li>\n<li><strong>Routing Service (React Router)</strong>: Manages client-side navigation.</li>\n<li><strong>State Management Service</strong>: Uses <strong>Zustand</strong> and <strong>TanStack Query</strong>.</li>\n</ul>\n<h4>3.1.2 Mobile Application</h4>\n<ul>\n<li><strong>UI Components (React Native)</strong>: Built with React Native and <strong>React Native Paper</strong>.<",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "/li>\n<li><strong>Routing Service (Expo Router)</strong>: Manages native navigation.</li>\n<li><strong>State Management Service</strong>: Uses <strong>React Context</strong> for global state.</li>\n</ul>\n<h3>3.2 Backend Services (Supabase)</h3>\n<ul>\n<li><strong>Authentication Service (Supabase Auth)</strong>: Manages user sign-up, login, and sessions for both clients.</li>\n<li><strong>Database Service (PostgreSQL)</strong>: The primary data store, with access controlled by Row Level Security (RLS)",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "policies.</li>\n<li><strong>Business Logic Layer (Edge Functions)</strong>: A suite of serverless functions that encapsulate core business logic, callable from both clients.</li>\n<li><strong>Real-time Service (Supabase Realtime)</strong>: Pushes live updates to connected clients.</li>\n</ul>\n<h2>4. Process View</h2>\n<p>This view describes the sequence of interactions for key workflows. The processes are client-agnostic, as both the web and mobile apps interact with the same backend services.</p>\n<",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "p>(The existing sequence diagrams for Send Referral, Accept Referral, etc., remain valid as they describe the interaction with the backend, which is shared.)</p>\n<h3>4.1 Send Referral Workflow</h3>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n    participant User\n    participant Frontend (React App)\n    participant Backend (Supabase)\n\n    User-&gt;&gt;Frontend (React App): Fills and submits the Referral Form\n    Frontend (React App)-&gt;&gt;Backend (Supabase): Invokes `send-referral` Edge",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "Function with referral data\n    activate Backend (Supabase)\n    Backend (Supabase)-&gt;&gt;Backend (Supabase): Finds best available receiver based on logic (trusted network, availability)\n    Backend (Supabase)-&gt;&gt;Backend (Supabase): Creates a new record in the `referrals` table with a 10-minute timer\n    Backend (Supabase)-&gt;&gt;Backend (Supabase): Creates a notification in the `messages` table for the receiver\n    deactivate Backend (Supabase)\n    Backend (Supabase)--&gt;&gt;Frontend (",
    "start_char": 6500,
    "end_char": 7000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "React App): Returns success and the new referral ID\n    Frontend (React App)-&gt;&gt;User: Navigates to &quot;Waiting for Response&quot; page and shows confirmation\n</code></pre>\n<h3>4.2 Accepting a Referral (Happy Path)</h3>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n    actor Pro\n    participant Frontend\n    participant Supabase as Backend\n    participant SenderFrontend as Sender's App\n\n    Pro-&gt;&gt;Frontend: Clicks &quot;Accept&quot; on a referral notification\n    Frontend-&gt;&gt",
    "start_char": 7000,
    "end_char": 7500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": ";Supabase: Invokes `inbox-action` Edge Function with { referralId, action: 'accept' }\n    activate Supabase\n\n    Supabase-&gt;&gt;Supabase: Verifies referral is still 'pending' and not expired\n    Supabase-&gt;&gt;Supabase: Updates `referrals` table status to 'accepted'\n    Supabase-&gt;&gt;Supabase: Creates notification for sender in `messages` table\n    Supabase--&gt;&gt;Frontend: Returns success response\n    deactivate Supabase\n\n    Frontend-&gt;&gt;Pro: Shows &quot;Accepted!&quot; confirmati",
    "start_char": 7500,
    "end_char": 8000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "on UI\n\n    Note over Supabase, SenderFrontend: Supabase sends real-time event\n    Supabase-&gt;&gt;SenderFrontend: Real-time message for 'referral.accepted'\n    SenderFrontend-&gt;&gt;SenderFrontend: Updates UI to show referral was accepted\n</code></pre>\n<h2>5. Development View</h2>\n<p>This view describes the organization of the source code across the two main projects.</p>\n<ul>\n<li><strong><code>style-referral-ring/</code> (Web App)</strong>\n<ul>\n<li><strong><code>src/</code></strong>: Contains",
    "start_char": 8000,
    "end_char": 8500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "all web frontend source code (React, shadcn-ui).</li>\n</ul>\n</li>\n<li><strong><code>clientpass-react-native/</code> (Mobile App)</strong>\n<ul>\n<li><strong><code>app/</code></strong>: Contains all mobile app screens and routing logic (Expo Router).</li>\n<li><strong><code>components/</code></strong>: Contains reusable React Native components.</li>\n</ul>\n</li>\n<li><strong><code>supabase/</code> (Shared Backend)</strong>\n<ul>\n<li><strong><code>functions/</code></strong>: Self-contained Edge Functio",
    "start_char": 8500,
    "end_char": 9000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "ns callable by both clients.</li>\n<li><strong><code>migrations/</code></strong>: SQL files defining the shared database schema.</li>\n</ul>\n</li>\n</ul>\n<h2>6. Physical (Deployment) View</h2>\n<p>The application is deployed on a modern serverless infrastructure.</p>\n<ul>\n<li><strong>Web Frontend</strong>: The static assets are hosted on <strong>Vercel's</strong> global CDN.</li>\n<li><strong>Mobile Frontend</strong>: The application is built and deployed to the <strong>Apple App Store</strong> and <",
    "start_char": 9000,
    "end_char": 9500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "strong>Google Play Store</strong> via Expo Application Services (EAS).</li>\n<li><strong>Backend</strong>: All backend services are hosted on <strong>Supabase</strong>, serving both web and mobile clients.</li>\n</ul>\n<h2>7. Data View</h2>\n<p>The data architecture is defined by the shared PostgreSQL schema. The ERD remains the same as it represents the single source of truth for both applications.</p>\n<pre><code class=\"language-mermaid\">erDiagram\n    users {\n        UUID id PK\n        string full_",
    "start_char": 9500,
    "end_char": 10000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "name\n        string role\n        string membership_tier\n        string pro_id\n        boolean active_mode\n        boolean coverage_mode\n    }\n\n    referrals {\n        UUID id PK\n        UUID sender_id FK\n        UUID receiver_id FK\n        string client_name\n        string status\n        UUID open_chair_id FK\n        UUID hot_seat_id FK\n    }\n\n    open_chairs {\n        UUID id PK\n        UUID user_id FK\n        string location\n        timestamp start_at\n        timestamp end_at\n        string st",
    "start_char": 10000,
    "end_char": 10500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "atus\n    }\n\n    hot_seats {\n        UUID id PK\n        UUID user_id FK\n        string service\n        timestamp expires_at\n    }\n\n    services {\n        UUID id PK\n        UUID pro_id FK\n        string name\n        int price_cents\n    }\n\n    trusted_network {\n        UUID owner_id PK, FK\n        UUID partner_id PK, FK\n        string status\n    }\n    \n    auto_suggest_tracking {\n        UUID user_id PK, FK\n        UUID partner_id PK, FK\n        int completed_count\n    }\n\n    payments {\n        UU",
    "start_char": 10500,
    "end_char": 11000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "ID id PK\n        UUID referral_id FK\n        decimal amount\n    }\n    \n    commissions {\n        UUID id PK\n        UUID referral_id FK\n        UUID payee_id FK\n        decimal amount\n    }\n\n    affiliate_commissions {\n        UUID id PK\n        UUID referral_id FK\n        UUID earner_id FK\n        decimal amount\n    }\n\n    boosts {\n        UUID id PK\n        UUID user_id FK\n        string boost_type\n        timestamp end_at\n    }\n\n    ad_placements {\n        UUID id PK\n        string title",
    "start_char": 11000,
    "end_char": 11500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "string category\n        boolean active\n    }\n\n    messages {\n        UUID id PK\n        UUID user_id FK\n        string title\n        string kind\n    }\n\n    admin_audit_log {\n        UUID id PK\n        UUID admin_user_id FK\n        string action\n    }\n\n    feature_flags {\n        string flag_name PK\n        boolean enabled\n    }\n\n    platform_settings {\n        string key PK\n        string value\n    }\n\n    users ||--o{ referrals : &quot;sends&quot;\n    users ||--o{ referrals : &quot;receives&",
    "start_char": 11500,
    "end_char": 12000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "quot;\n    users ||--o{ services : &quot;offers&quot;\n    users ||--o{ open_chairs : &quot;hosts&quot;\n    users ||--o{ hot_seats : &quot;posts&quot;\n    users ||--o{ boosts : &quot;activates&quot;\n    users ||--o{ messages : &quot;receives&quot;\n    users ||--o{ admin_audit_log : &quot;performs&quot;\n    users }o--o{ trusted_network : &quot;owns&quot;\n    users }o--o{ trusted_network : &quot;is_partner_in&quot;\n    users }o--o{ auto_suggest_tracking : &quot;tracks&quot;\n    users }o--o{ auto_sug",
    "start_char": 12000,
    "end_char": 12500,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "gest_tracking : &quot;is_tracked_with&quot;\n    users ||--o{ affiliate_commissions : &quot;earns&quot;\n    \n    referrals }o--|| open_chairs : &quot;books_into&quot;\n    referrals }o--|| hot_seats : &quot;is_for&quot;\n    referrals ||--o{ payments : &quot;generates&quot;\n    referrals ||--o{ commissions : &quot;results_in&quot;\n    referrals ||--o{ affiliate_commissions : &quot;generates&quot;\n</code></pre>\n<p>For a complete and detailed breakdown of every table and column, please refer to the <",
    "start_char": 12500,
    "end_char": 13000,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a90",
    "content": "strong><code>docs/DATABASE_SCHEMA.md</code></strong> document.</p>",
    "start_char": 13000,
    "end_char": 13067,
    "source_file": "SAD.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a90",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "<h1>Sequence Diagrams</h1>\n<p>This document provides detailed sequence diagrams for key workflows within the ClientPass application. These diagrams illustrate the dynamic interactions between different parts of the system.</p>\n<hr>\n<h2>1. Accepting a Referral (Happy Path)</h2>\n<p>This diagram shows the process when a stylist successfully accepts a referral notification within the time limit.</p>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n    actor Pro\n    participant Frontend\n    partic",
    "start_char": 0,
    "end_char": 500,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "ipant Supabase as Backend\n    participant SenderFrontend as Sender's App\n\n    Pro-&gt;&gt;Frontend: Clicks &quot;Accept&quot; on a referral notification\n    Frontend-&gt;&gt;Supabase: Invokes `inbox-action` Edge Function with { referralId, action: 'accept' }\n    activate Supabase\n\n    Supabase-&gt;&gt;Supabase: Verifies referral is still 'pending' and not expired\n    Supabase-&gt;&gt;Supabase: Updates `referrals` table status to 'accepted'\n    Supabase-&gt;&gt;Supabase: Creates notification for",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "sender in `messages` table\n    Supabase--&gt;&gt;Frontend: Returns success response\n    deactivate Supabase\n\n    Frontend-&gt;&gt;Pro: Shows &quot;Accepted!&quot; confirmation UI\n\n    Note over Supabase, SenderFrontend: Supabase sends real-time event\n    Supabase-&gt;&gt;SenderFrontend: Real-time message for 'referral.accepted'\n    SenderFrontend-&gt;&gt;SenderFrontend: Updates UI to show referral was accepted\n</code></pre>\n<hr>\n<h2>2. Handling an Expired Referral</h2>\n<p>This diagram illustrate",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "s the automated backend process when a referral is not accepted in time.</p>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n    actor Scheduler\n    participant CronJob as Cron Job (referral-timer)\n    participant Supabase as Backend\n    participant NextProFrontend as Next Pro's App\n\n    Scheduler-&gt;&gt;CronJob: Triggers every minute\n    activate CronJob\n    CronJob-&gt;&gt;Supabase: Queries for `referrals` where `status` is 'pending' AND `expires_at` &lt; now()\n    activate Supabase\n    S",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "upabase--&gt;&gt;CronJob: Returns list of expired referrals\n    deactivate Supabase\n\n    loop For each expired referral\n        CronJob-&gt;&gt;Supabase: Invokes `reassign-referral` Edge Function\n        activate Supabase\n        Supabase-&gt;&gt;Supabase: Finds next best available Pro, excluding previous receivers\n        alt Next Pro Found\n            Supabase-&gt;&gt;Supabase: Updates `referrals` record with new `receiver_id` and new `expires_at`\n            Supabase-&gt;&gt;Supabase: Creates",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "notification for the new Pro in `messages` table\n            Supabase-&gt;&gt;NextProFrontend: (Later) Sends real-time notification\n        else No Pro Found\n            Supabase-&gt;&gt;Supabase: Updates `referrals` status to 'expired'\n            Supabase-&gt;&gt;Supabase: Notifies original sender that no one was found\n        end\n        deactivate Supabase\n    end\n    deactivate CronJob\n</code></pre>\n<hr>\n<h2>3. Open Chair Session Workflow</h2>\n<p>This diagram shows the end-to-end flow of a",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "stylist using an Open Chair, from check-in to settlement.</p>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n    actor Pro\n    participant Frontend\n    participant Supabase as Backend\n\n    Pro-&gt;&gt;Frontend: Clicks &quot;Check In&quot; for an accepted Open Chair\n    Frontend-&gt;&gt;Supabase: Invokes `check-in-open-chair` Edge Function\n    activate Supabase\n    Supabase-&gt;&gt;Supabase: Updates `open_chairs` status to 'live'\n    Supabase--&gt;&gt;Frontend: Returns success\n    deactivat",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "e Supabase\n    Frontend-&gt;&gt;Pro: Displays &quot;Live Session&quot; dashboard\n\n    Note over Pro, Backend: During the session, the Pro performs services...\n\n    Pro-&gt;&gt;Frontend: Logs a completed service (e.g., via a button in the Live Session UI)\n    Frontend-&gt;&gt;Supabase: Updates a `referrals` record status to 'completed' and sets `open_chair_id`\n\n    Note over Pro, Backend: At the end of the day...\n\n    Pro-&gt;&gt;Frontend: Clicks &quot;End Session&quot;\n    Frontend-&gt;&gt;Supab",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "ase: Invokes `end-open-chair-session` Edge Function\n    activate Supabase\n    Supabase-&gt;&gt;Supabase: Updates `open_chairs` status to 'completed'\n    Supabase-&gt;&gt;Supabase: Fetches all associated `referrals` marked as completed during the session\n    loop For each completed service\n        Supabase-&gt;&gt;Supabase: Invokes `settle-open-chair-commission` function\n        activate Supabase\n        Supabase-&gt;&gt;Supabase: Calculates platform fee, host share, and stylist net\n        Supab",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a92",
    "content": "ase-&gt;&gt;Supabase: Inserts records into `commissions` table for host and stylist\n        deactivate Supabase\n    end\n    Supabase--&gt;&gt;Frontend: Returns success\n    deactivate Supabase\n    Frontend-&gt;&gt;Pro: Shows session summary and total earnings\n</code></pre>",
    "start_char": 4500,
    "end_char": 4773,
    "source_file": "SEQUENCE_DIAGRAMS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a92",
      "revision": 14
    }
  },
  {
    "doc_id": "SERVICE_SELECTION",
    "content": "<h1>Service Selection</h1>\n<p>This document provides a detailed description of the Service Selection feature, which allows stylists to manage the services they offer.</p>\n<h2>1. Overview</h2>\n<p>The Service Selection feature provides stylists with a comprehensive tool to define, categorize, and price their professional services. This ensures that clients can accurately view and book the specific services offered by each stylist.</p>\n<p>The feature is primarily implemented within the <code>Servic",
    "start_char": 0,
    "end_char": 500,
    "source_file": "SERVICE_SELECTION.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SERVICE_SELECTION",
    "content": "eManager.tsx</code> component, which is integrated into pages like <code>StylistProfileSetup.tsx</code>.</p>\n<h2>2. Features</h2>\n<h3>2.1. Service Management</h3>\n<ul>\n<li><strong>Add New Service:</strong> Stylists can add new services to their profile by providing:\n<ul>\n<li><strong>Name:</strong> A descriptive name for the service (e.g., &quot;Women's Haircut&quot;, &quot;Full Balayage&quot;).</li>\n<li><strong>Description:</strong> An optional detailed description of the service.</li>\n<li><stro",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "SERVICE_SELECTION.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SERVICE_SELECTION",
    "content": "ng>Price:</strong> The price of the service.</li>\n<li><strong>Duration:</strong> The estimated duration of the service in minutes.</li>\n<li><strong>Category:</strong> The service can be assigned to a predefined category (e.g., &quot;Haircuts&quot;, &quot;Coloring&quot;).</li>\n</ul>\n</li>\n<li><strong>Edit Existing Service:</strong> Stylists can modify the details of any existing service.</li>\n<li><strong>Delete Service:</strong> Stylists can remove services they no longer offer.</li>\n</ul>\n<h3>2.",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "SERVICE_SELECTION.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SERVICE_SELECTION",
    "content": "2. Service Categorization</h3>\n<ul>\n<li>Services can be organized into categories, making it easier for clients to browse and find what they need.</li>\n<li>The categories are fetched from the <code>service_categories</code> table in the Supabase database.</li>\n</ul>\n<h3>2.3. Price and Duration Configuration</h3>\n<ul>\n<li>Stylists have full control over the pricing and estimated duration for each service, allowing for flexible business models.</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Service Sele",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "SERVICE_SELECTION.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SERVICE_SELECTION",
    "content": "ction feature interacts with the following tables in the Supabase database:</p>\n<ul>\n<li><code>services</code>: This table stores the details of each service offered by a stylist, including <code>name</code>, <code>description</code>, <code>price</code>, <code>duration_minutes</code>, and <code>category_id</code>.</li>\n<li><code>service_categories</code>: This table stores the predefined categories for services.</li>\n</ul>\n<h2>4. User Interface</h2>\n<p>The user interface for service selection ty",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "SERVICE_SELECTION.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SERVICE_SELECTION",
    "content": "pically includes:</p>\n<ul>\n<li>A form for adding or editing service details.</li>\n<li>A list or grid displaying all currently offered services, with options to edit or delete each one.</li>\n<li>Dropdowns or selectors for choosing service categories.</li>\n</ul>",
    "start_char": 2500,
    "end_char": 2761,
    "source_file": "SERVICE_SELECTION.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SHARE_AND_EARN",
    "content": "<h1>Share and Earn</h1>\n<p>This document provides a detailed description of the Share and Earn feature.</p>\n<h2>1. Overview</h2>\n<p>The Share and Earn feature allows clients to earn rewards by sharing the ClientPass application with their friends. It is a key feature for driving user growth through word-of-mouth marketing.</p>\n<p>The page is implemented in the <code>ShareAndEarnPage.tsx</code> page, which wraps the <code>ShareAndEarn.tsx</code> component.</p>\n<h2>2. Features</h2>\n<h3>2.1. Unique",
    "start_char": 0,
    "end_char": 500,
    "source_file": "SHARE_AND_EARN.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SHARE_AND_EARN",
    "content": "Referral Link</h3>\n<ul>\n<li>Each client is provided with a unique referral link.</li>\n<li>The link is generated and displayed on the page.</li>\n<li>The client can easily copy the link to their clipboard or share it directly through the web share API.</li>\n</ul>\n<h3>2.2. Earnings and Stats</h3>\n<ul>\n<li>The page displays key statistics about the client's referral activity:\n<ul>\n<li><strong>Total Earned:</strong> The total amount of commission the client has earned from their referrals.</li>\n<li>",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "SHARE_AND_EARN.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SHARE_AND_EARN",
    "content": "<strong>Total Referrals:</strong> The total number of friends who have signed up using the client's link.</li>\n</ul>\n</li>\n</ul>\n<h3>2.3. Earnings History</h3>\n<ul>\n<li>The page displays a list of recent earnings from referrals.</li>\n<li>Each entry in the list shows:\n<ul>\n<li>The name of the referred client.</li>\n<li>The status of the commission (e.g., <code>pending</code>, <code>completed</code>).</li>\n<li>The service that was booked.</li>\n<li>The date of the referral.</li>\n<li>The amount of th",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "SHARE_AND_EARN.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SHARE_AND_EARN",
    "content": "e commission earned.</li>\n</ul>\n</li>\n</ul>\n<h3>2.4. How it Works</h3>\n<ul>\n<li>The page includes a simple, three-step guide that explains how the Share and Earn feature works:\n<ol>\n<li>Share your link.</li>\n<li>Your friend books and completes a service.</li>\n<li>You earn a commission.</li>\n</ol>\n</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Share and Earn feature interacts with the following tables in the Supabase database:</p>\n<ul>\n<li><code>client_profiles</code>: This table stores the unique <co",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "SHARE_AND_EARN.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SHARE_AND_EARN",
    "content": "de>referral_link_token</code> for each client.</li>\n<li><code>affiliate_commissions</code>: This table (or a similar one) would be used to track the commissions earned by clients from their referrals. The current implementation uses mock data.</li>\n</ul>\n<h2>4. User Interface</h2>\n<p>The user interface consists of:</p>\n<ul>\n<li>A header with a title and a description of the feature.</li>\n<li>A section with the client's earnings and referral stats.</li>\n<li>A section with the unique referral link",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "SHARE_AND_EARN.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SHARE_AND_EARN",
    "content": "and sharing buttons.</li>\n<li>A section with the client's recent earnings history.</li>\n<li>A section that explains how the feature works.</li>\n</ul>",
    "start_char": 2500,
    "end_char": 2651,
    "source_file": "SHARE_AND_EARN.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68dccbb8479feecff6266a96",
    "content": "<h1>Sign Up Form</h1>\n<p>The <code>SignUpForm</code> component facilitates user registration within the application, allowing new users to create an account with various roles and configurations. The form has been updated to support new user types and referral mechanisms.</p>\n<h2>Key Features</h2>\n<ul>\n<li><strong>Referral Code Integration</strong>: The form now checks for a <code>ref</code> query parameter in the URL to automatically associate new sign-ups with a referrer. It fetches and displa",
    "start_char": 0,
    "end_char": 500,
    "source_file": "SIGN_UP_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a96",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a96",
    "content": "ys referrer information, personalizing the sign-up experience.</li>\n<li><strong>Expanded Role Selection</strong>: Users can select from an expanded list of roles:\n<ul>\n<li><code>Stylist</code></li>\n<li><code>Barber</code></li>\n<li><code>SuiteOwner</code></li>\n<li><code>Affiliate Partner</code></li>\n<li><code>Client Referrer</code></li>\n</ul>\n</li>\n<li><strong>Business Type Selection for Owners</strong>: If a user selects <code>SuiteOwner</code>, they are prompted to specify their business type (",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "SIGN_UP_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a96",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a96",
    "content": "Salon, Barbershop, or Suite).</li>\n<li><strong>Suite Professional Options</strong>: Stylists and Barbers can indicate if they work in or own/manage a salon suite, which can influence their <code>role_tag</code> upon registration.</li>\n<li><strong>User Authentication</strong>: Integrates with <code>useAuth</code> for user registration and <code>useToast</code> for feedback.</li>\n</ul>\n<h2>Component Usage</h2>\n<p>The <code>SignUpForm</code> is typically used on an authentication page, allowing new",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "SIGN_UP_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a96",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a96",
    "content": "users to create an account.</p>\n<pre><code class=\"language-tsx\">import { SignUpForm } from '@/components/auth/SignUpForm';\n\nconst AuthPage = () =&gt; {\n  const handleToggleMode = () =&gt; {\n    // Logic to switch between sign-up and sign-in forms\n    console.log('Toggle to sign-in');\n  };\n\n  return (\n    &lt;SignUpForm onToggleMode={handleToggleMode} /&gt;\n  );\n};\n</code></pre>\n<h2>Data Flow</h2>\n<ol>\n<li>The form initializes by checking the URL for a referral code. If found, it fetches referre",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "SIGN_UP_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a96",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a96",
    "content": "r details from Supabase.</li>\n<li>User inputs their full name, email, password, and selects their role.</li>\n<li>Based on the selected role, additional fields like business type or suite options may appear.</li>\n<li>Upon submission, the <code>handleSubmit</code> function calls the <code>signUp</code> method from <code>useAuth</code> with the collected user data, including the determined <code>role_tag</code> and <code>referralCode</code>.</li>\n<li>Success or error messages are displayed using <c",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "SIGN_UP_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a96",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a96",
    "content": "ode>useToast</code>.</li>\n</ol>",
    "start_char": 2500,
    "end_char": 2532,
    "source_file": "SIGN_UP_FORM.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a96",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "<h1>Software Requirements Specification (SRS)</h1>\n<h2>1. Introduction</h2>\n<h3>1.1 Purpose</h3>\n<p>This document specifies the software requirements for <strong>ClientPass</strong>, a web-based platform designed to facilitate referrals, bookings, and collaboration among beauty professionals, including stylists, barbers, and salon suite owners. It serves as a comprehensive guide for development, testing, and project management.</p>\n<h3>1.2 Scope</h3>\n<p>The product is a responsive web applicatio",
    "start_char": 0,
    "end_char": 500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "n that provides the following core capabilities:</p>\n<ul>\n<li>A referral system for stylists to earn commission by sending clients to other professionals.</li>\n<li>A marketplace for temporary chair/suite rentals (&quot;Open Chair&quot;).</li>\n<li>Tools for managing client bookings, availability, and earnings.</li>\n<li>A separate portal for affiliates to recruit users and earn commissions.</li>\n<li>Administrative dashboards for managing platform content and users.</li>\n</ul>\n<h3>1.3 Definitions</",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "h3>\n<ul>\n<li><strong>Pro/Professional</strong>: A licensed stylist or barber using the platform.</li>\n<li><strong>Host</strong>: A user (Pro or Suite Owner) offering their chair/space for temporary use.</li>\n<li><strong>Referral</strong>: The act of sending a client to another professional for a service.</li>\n<li><strong>Open Chair</strong>: A feature allowing a Host to list their available chair for a specific time window and commission rate.</li>\n<li><strong>Hot Seat</strong>: A feature for po",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "sting a last-minute, often discounted, appointment slot to a targeted audience.</li>\n<li><strong>Coverage Mode</strong>: A status that allows a Pro's clients to be automatically referred to other stylists when the Pro is unavailable.</li>\n<li><strong>Trusted Network</strong>: A user-curated list of preferred professionals for sending/receiving referrals.</li>\n</ul>\n<h2>2. Overall Description</h2>\n<h3>2.1 Product Perspective</h3>\n<p>ClientPass is a standalone, self-contained web application. It i",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "s built on a serverless architecture using Supabase for its backend, database, and authentication services. It does not depend on any other existing software systems.</p>\n<h3>2.2 Product Functions</h3>\n<p>The major functions of the system include:</p>\n<ol>\n<li><strong>User Management</strong>: Separate sign-up, login, and profile management for standard users (Pros, Owners) and Affiliates.</li>\n<li><strong>Referral Workflow</strong>: Creating, sending, accepting/declining, and tracking referrals",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "with real-time countdown timers.</li>\n<li><strong>Open Chair Marketplace</strong>: Posting, viewing, and accepting Open Chair sessions.</li>\n<li><strong>Live Session Management</strong>: Real-time tracking of services and earnings during a live Open Chair session.</li>\n<li><strong>Hot Seat Alerts</strong>: Creating and broadcasting last-minute appointment availability.</li>\n<li><strong>Coverage Mode Management</strong>: Enabling/disabling coverage and managing a list of backup professionals.</l",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "i>\n<li><strong>Financial Tracking</strong>: Dashboards for viewing pending, available, and total earnings from commissions.</li>\n<li><strong>Affiliate Portal</strong>: Tools for affiliates to track their recruits and override commissions.</li>\n<li><strong>Admin Panels</strong>: Interfaces for administrators to manage Pro Deals, export user data, and monitor system health.</li>\n</ol>\n<h3>2.3 User Characteristics</h3>\n<ul>\n<li><strong>Stylist/Pro</strong>: Tech-savvy but busy professionals who nee",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "d a fast, mobile-friendly interface to manage referrals and fill their schedule.</li>\n<li><strong>Salon/Suite Owner</strong>: Business owners who need tools to maximize the utilization of their space and track activity within their suite.</li>\n<li><strong>Affiliate</strong>: Marketers or influencers who need tools to track their recruitment efforts and earnings.</li>\n<li><strong>Administrator</strong>: Technical users responsible for platform maintenance, content management, and data analysis.</",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "li>\n</ul>\n<h3>2.4 Constraints</h3>\n<ul>\n<li>The application must be a responsive web app accessible on modern desktop and mobile browsers.</li>\n<li>The backend infrastructure is built exclusively on Supabase.</li>\n<li>All business logic must be contained within the React frontend or Supabase Edge Functions.</li>\n<li>Payment processing is handled via Stripe (simulated in the current build).</li>\n</ul>\n<h2>3. Specific Requirements</h2>\n<h3>3.1 Functional Requirements</h3>\n<h4>3.1.1 User Authentica",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "tion</h4>\n<ul>\n<li><strong>REQ-101</strong>: Users shall be able to sign up with an email and password.</li>\n<li><strong>REQ-102</strong>: Users shall be able to select a role during sign-up (e.g., Stylist, Suite Owner, Affiliate).</li>\n<li><strong>REQ-103</strong>: Affiliates shall use a separate authentication portal from standard users.</li>\n<li><strong>REQ-104</strong>: Users shall be able to log in and log out.</li>\n</ul>\n<h4>3.1.2 Referral Management</h4>\n<ul>\n<li><strong>REQ-201</strong>:",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "A Pro shall be able to create a referral for a client, specifying the service, estimated price, and commission percentage (15-25%).</li>\n<li><strong>REQ-202</strong>: The system shall find a suitable, available Pro to receive the referral, prioritizing the sender's Trusted Network.</li>\n<li><strong>REQ-203</strong>: The receiving Pro shall be notified and have a 10-minute window to accept or decline.</li>\n<li><strong>REQ-204</strong>: If a referral is declined or expires, the system shall autom",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "atically reassign it to the next available Pro.</li>\n<li><strong>REQ-205</strong>: Upon completion of a referred service, the system shall calculate and record the commission for the sender.</li>\n</ul>\n<h4>3.1.3 Open Chair</h4>\n<ul>\n<li><strong>REQ-301</strong>: A Host shall be able to post an Open Chair listing, specifying a location, time window, allowed services, and a host commission rate (15-25%).</li>\n<li><strong>REQ-302</strong>: A Pro shall be able to view and accept an available Open Ch",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "air.</li>\n<li><strong>REQ-303</strong>: Once a Pro accepts, they must check in to begin a &quot;Live Session&quot;.</li>\n<li><strong>REQ-304</strong>: During a Live Session, all services performed by the visiting Pro shall be tracked.</li>\n<li><strong>REQ-305</strong>: Upon ending the session, the system shall calculate the host's commission from the total revenue and settle the earnings.</li>\n</ul>\n<h4>3.1.4 Hot Seat</h4>\n<ul>\n<li><strong>REQ-401</strong>: A Pro shall be able to post a Hot Seat",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "alert for a last-minute opening.</li>\n<li><strong>REQ-402</strong>: The Hot Seat form shall allow specifying the service, price (original and discounted), time, and target audience (e.g., favorites, all local clients).</li>\n<li><strong>REQ-403</strong>: The system shall send instant alerts to the selected audience.</li>\n</ul>\n<h4>3.1.5 Profile &amp; Network Management</h4>\n<ul>\n<li><strong>REQ-501</strong>: A Pro shall be able to set up their public profile, including a photo, bio, location, an",
    "start_char": 6500,
    "end_char": 7000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "d list of services with prices.</li>\n<li><strong>REQ-502</strong>: A Pro shall be able to add other professionals to their Trusted Network.</li>\n<li><strong>REQ-503</strong>: After two completed collaborations, the system shall auto-suggest adding the other professional to the user's Trusted Network.</li>\n</ul>\n<h4>3.1.6 Admin Panels</h4>\n<ul>\n<li><strong>REQ-601</strong>: The system shall provide a Master Admin Console accessible only to users with 'admin' or 'super_admin' roles.</li>\n<li><stro",
    "start_char": 7000,
    "end_char": 7500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "ng>REQ-602</strong>: The Admin Console shall include a global dashboard displaying key metrics for users, revenue, and platform activity.</li>\n<li><strong>REQ-603</strong>: Admins shall be able to manage feature flags, enabling or disabling features across the platform.</li>\n<li><strong>REQ-604</strong>: Admins shall have a user management interface to view, search, and edit user profiles, including changing roles and membership tiers.</li>\n<li><strong>REQ-605</strong>: Admins shall be able to m",
    "start_char": 7500,
    "end_char": 8000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "anage business onboarding applications, with functionality to approve or deny them.</li>\n<li><strong>REQ-606</strong>: Admins shall have access to a settings panel to configure platform-wide parameters like fees, commission rates, and feature limits.</li>\n<li><strong>REQ-607</strong>: The console shall provide a monitoring tool for all referral, Open Chair, and Hot Seat activities.</li>\n<li><strong>REQ-608</strong>: Admins shall be able to manage notification templates for all system-generated c",
    "start_char": 8000,
    "end_char": 8500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "ommunications.</li>\n<li><strong>REQ-609</strong>: The system shall provide a data export feature for admins to download datasets (e.g., users, payments) as CSV files.</li>\n<li><strong>REQ-610</strong>: A comprehensive, searchable audit log shall record all actions performed by administrators.</li>\n<li><strong>REQ-911</strong>: Admins shall have the ability to impersonate a user's account for support and troubleshooting purposes.</li>\n</ul>\n<h3>3.2 Non-Functional Requirements</h3>\n<ul>\n<li><stron",
    "start_char": 8500,
    "end_char": 9000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "g>PERF-01</strong>: Referral notification and timer updates must appear in near real-time (&lt; 5-second delay).</li>\n<li><strong>SEC-01</strong>: All user data, especially PII and financial information, must be accessible only by authorized users, enforced by Supabase Row Level Security (RLS).</li>\n<li><strong>SEC-02</strong>: Password storage and authentication must be handled securely by Supabase Auth.</li>\n<li><strong>USAB-01</strong>: The user interface must be intuitive and optimized for m",
    "start_char": 9000,
    "end_char": 9500,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "obile-first use.</li>\n<li><strong>REL-01</strong>: The system should maintain high availability. Edge function failures should be logged and handled gracefully.</li>\n</ul>\n<h3>3.3 Interface Requirements</h3>\n<ul>\n<li><strong>UI-01</strong>: The application shall be a web-based graphical user interface (GUI) rendered in standard web browsers.</li>\n<li><strong>API-01</strong>: The frontend shall communicate with the backend via the Supabase client library, which uses a combination of RESTful API c",
    "start_char": 9500,
    "end_char": 10000,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a98",
    "content": "alls (PostgREST) and WebSocket connections for real-time updates.</li>\n<li><strong>API-02</strong>: Serverless Edge Functions shall be invoked via HTTPS requests from the client.</li>\n</ul>",
    "start_char": 10000,
    "end_char": 10190,
    "source_file": "SRS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a98",
      "revision": 17
    }
  },
  {
    "doc_id": "STYLIST_PROFILE",
    "content": "<h1>Stylist Profile</h1>\n<p>This document provides a detailed description of the Stylist Profile feature.</p>\n<h2>1. Overview</h2>\n<p>The Stylist Profile page allows clients and other professionals to view a stylist's professional information, services, portfolio, and reviews. It serves as a digital resume and marketing tool for stylists on the ClientPass platform.</p>\n<p>The page is implemented in the <code>StylistProfile.tsx</code> page, which wraps the <code>StylistProfile</code> component.</",
    "start_char": 0,
    "end_char": 500,
    "source_file": "STYLIST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE",
    "content": "p>\n<h2>2. Key Features</h2>\n<h3>2.1. Profile Header</h3>\n<ul>\n<li><strong>Stylist Information:</strong> Displays the stylist's name, profile picture, and membership tier (e.g., &quot;PRO&quot;).</li>\n<li><strong>Availability Status:</strong> Indicates if the stylist is currently available (e.g., &quot;Available Now&quot;).</li>\n<li><strong>Rating and Reviews:</strong> Shows the average rating and the total number of reviews received.</li>\n<li><strong>Location and Join Date:</strong> Displays the",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "STYLIST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE",
    "content": "stylist's business location and the year they joined ClientPass.</li>\n<li><strong>Contact and Referral Options:</strong> Buttons to &quot;Contact&quot; the stylist or &quot;Send Referral&quot; to them.</li>\n</ul>\n<h3>2.2. Services Offered</h3>\n<ul>\n<li><strong>Detailed Service List:</strong> A comprehensive list of all services offered by the stylist, including:\n<ul>\n<li>Service name and description.</li>\n<li>Price and estimated duration.</li>\n<li>Category (e.g., &quot;Haircuts&quot;, &quot;Col",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "STYLIST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE",
    "content": "oring&quot;).</li>\n</ul>\n</li>\n</ul>\n<h3>2.3. Portfolio</h3>\n<ul>\n<li><strong>Visual Showcase:</strong> A gallery section to showcase the stylist's work through images. (Note: This feature is marked as &quot;Coming Soon&quot; in the setup page, but the profile page is designed to display it).</li>\n</ul>\n<h3>2.4. Reviews and Ratings</h3>\n<ul>\n<li><strong>Client Feedback:</strong> Displays a list of reviews and ratings provided by clients.</li>\n<li><strong>Detailed Reviews:</strong> Each review in",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "STYLIST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE",
    "content": "cludes the rating score, comments, and the date it was posted.</li>\n<li><strong>Sentiment Analysis (Future Enhancement):</strong> Could potentially integrate AI to summarize review sentiment.</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Stylist Profile feature interacts with the following tables in the Supabase database:</p>\n<ul>\n<li><code>users</code>: Stores the stylist's basic profile information (name, photo, membership tier, location, etc.).</li>\n<li><code>ratings</code>: Stores the ratings and",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "STYLIST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE",
    "content": "reviews given to the stylist.</li>\n<li><code>services</code>: Stores the services offered by the stylist.</li>\n<li><code>service_categories</code>: Stores the categories for the services.</li>\n</ul>\n<h2>4. User Interface</h2>\n<p>The Stylist Profile page features a clean and professional layout:</p>\n<ul>\n<li>A header with the application name and &quot;Stylist Profile&quot; title.</li>\n<li>A main content area organized into cards for Profile Header, Services, Portfolio, and Reviews.</li>\n</ul>",
    "start_char": 2500,
    "end_char": 2999,
    "source_file": "STYLIST_PROFILE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE_SETUP",
    "content": "<h1>Stylist Profile Setup</h1>\n<p>This document provides a detailed description of the Stylist Profile Setup feature.</p>\n<h2>1. Overview</h2>\n<p>The Stylist Profile Setup page allows professional users to create and manage their comprehensive stylist profile. This profile is crucial for attracting clients, managing services, and configuring commission settings.</p>\n<p>The page is implemented in the <code>StylistProfileSetupPage.tsx</code> page, which wraps the <code>StylistProfileSetup</code> c",
    "start_char": 0,
    "end_char": 500,
    "source_file": "STYLIST_PROFILE_SETUP.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE_SETUP",
    "content": "omponent.</p>\n<h2>2. Key Features</h2>\n<h3>2.1. Profile Photo Upload</h3>\n<ul>\n<li>Stylists can upload a professional photo to their profile.</li>\n<li>The system provides a user-friendly interface for photo selection and preview.</li>\n</ul>\n<h3>2.2. Basic Information</h3>\n<ul>\n<li>Stylists can enter and update their basic personal and business information, including:\n<ul>\n<li>Full Name</li>\n<li>Phone Number</li>\n<li>Business Location (e.g., salon name or address)</li>\n<li>City, State, and ZIP Co",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "STYLIST_PROFILE_SETUP.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE_SETUP",
    "content": "de</li>\n<li>Professional Bio</li>\n</ul>\n</li>\n</ul>\n<h3>2.3. Service &amp; Pricing Manager</h3>\n<ul>\n<li>Integrated <code>ServiceManager</code> component for comprehensive service configuration:\n<ul>\n<li>Add, edit, and delete services offered.</li>\n<li>Set custom pricing and duration for each service.</li>\n<li>Categorize services for better organization and client discoverability.</li>\n</ul>\n</li>\n</ul>\n<h3>2.4. Commission Settings</h3>\n<ul>\n<li>Stylists can configure their default commission ra",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "STYLIST_PROFILE_SETUP.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE_SETUP",
    "content": "tes for various scenarios:\n<ul>\n<li><strong>Referral Commission:</strong> The percentage earned when sending a client to another stylist.</li>\n<li><strong>Coverage Commission:</strong> The percentage earned when another stylist covers their clients.</li>\n<li><strong>Open Chair Commission (Host %):</strong> The percentage earned as a host when renting out their chair.</li>\n</ul>\n</li>\n<li>These settings are managed via interactive sliders with defined ranges (e.g., 15-25%).</li>\n</ul>\n<h3>2.5. Po",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "STYLIST_PROFILE_SETUP.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE_SETUP",
    "content": "rtfolio &amp; Gallery (Coming Soon)</h3>\n<ul>\n<li>A dedicated section for stylists to showcase their work through images.</li>\n<li>This feature is planned for future development, allowing stylists to build a visual portfolio.</li>\n</ul>\n<h3>2.6. My Network</h3>\n<ul>\n<li>Integration with the <code>TrustedNetwork</code> component, allowing stylists to manage their professional network.</li>\n<li>This enables collaboration and referral opportunities within a trusted circle.</li>\n</ul>\n<h3>2.7. Enabl",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "STYLIST_PROFILE_SETUP.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE_SETUP",
    "content": "e Suite Tools</h3>\n<ul>\n<li>For stylists who are also salon suite owners, there's an option to enable &quot;Suite Tools&quot;.</li>\n<li>Activating this feature updates their profile to <code>suite_owner</code> and unlocks specialized suite management functionalities.</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Stylist Profile Setup feature interacts with the <code>users</code> table (for profile data and commission settings) and the <code>services</code> and <code>service_categories</code> tables (",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "STYLIST_PROFILE_SETUP.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE_SETUP",
    "content": "for service management) in the Supabase database.</p>\n<h2>4. User Interface</h2>\n<p>The Stylist Profile Setup page is organized into a tabbed interface for easy navigation:</p>\n<ul>\n<li><strong>Basic Info:</strong> For personal and business details.</li>\n<li><strong>Services:</strong> For managing services and commission settings.</li>\n<li><strong>Portfolio:</strong> For showcasing work (coming soon).</li>\n<li><strong>My Network:</strong> For managing trusted professional connections.</li>\n<li>A",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "STYLIST_PROFILE_SETUP.md",
    "frontmatter": {}
  },
  {
    "doc_id": "STYLIST_PROFILE_SETUP",
    "content": "sticky footer with a &quot;Save Profile&quot; button to persist changes.</li>\n</ul>",
    "start_char": 3500,
    "end_char": 3585,
    "source_file": "STYLIST_PROFILE_SETUP.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_DASHBOARD",
    "content": "<h1>Suite Dashboard</h1>\n<p>This document provides a detailed description of the Suite Dashboard, designed for salon suite owners and managers. It serves as a central hub for managing suite operations, stylists, open chairs, and in-suite referrals.</p>\n<h2>1. Overview</h2>\n<p>The Suite Dashboard offers a comprehensive set of tools and insights for suite owners to efficiently manage their business. It helps in maximizing occupancy, streamlining operations, and fostering a collaborative environmen",
    "start_char": 0,
    "end_char": 500,
    "source_file": "SUITE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_DASHBOARD",
    "content": "t among stylists.</p>\n<p>The dashboard is implemented in the <code>SuiteOwnerDashboard.tsx</code> component.</p>\n<h2>2. Key Features</h2>\n<h3>2.1. Suite Overview</h3>\n<ul>\n<li><strong>Performance Summary:</strong> Provides a high-level summary of the suite's key performance indicators (KPIs), such as current occupancy rate, upcoming vacancies, and overall revenue.</li>\n<li><strong>Quick Insights:</strong> Offers quick access to important metrics and alerts related to the suite's operation.</li>",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "SUITE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_DASHBOARD",
    "content": "</ul>\n<h3>2.2. Stylist Management</h3>\n<ul>\n<li><strong>Stylist Directory:</strong> Allows suite owners to view and manage the profiles of stylists operating within their suite.</li>\n<li><strong>Onboarding:</strong> Facilitates the onboarding process for new stylists joining the suite.</li>\n<li><strong>Communication Tools:</strong> Provides tools for communicating with stylists within the suite.</li>\n</ul>\n<h3>2.3. Open Chair Management</h3>\n<ul>\n<li><strong>Post Open Chair:</strong> Enables sui",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "SUITE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_DASHBOARD",
    "content": "te owners to post available chairs or rooms in their suite for other professionals to use. This helps in filling vacant slots and generating additional income.</li>\n<li><strong>View Open Chairs:</strong> Owners can view a list of all their active and past open chair postings, including their status and expiration.</li>\n</ul>\n<h3>2.4. In-Suite Referrals</h3>\n<ul>\n<li><strong>Facilitated Connections:</strong> Streamlines the process of connecting clients with available professionals within the sui",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "SUITE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_DASHBOARD",
    "content": "te.</li>\n<li><strong>Tracking:</strong> Provides mechanisms to track the status and success of referrals made within the suite.</li>\n<li><strong>Commission Management:</strong> Helps in managing commission splits for in-suite referrals.</li>\n</ul>\n<h2>3. User Interface</h2>\n<p>The Suite Dashboard features a clean and intuitive user interface:</p>\n<ul>\n<li>A header with the ClientPass logo and navigation options.</li>\n<li>A main content area that displays various cards and widgets for suite manag",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "SUITE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_DASHBOARD",
    "content": "ement.</li>\n<li>Sections for different management tasks, such as stylist management and open chair management.</li>\n</ul>\n<h2>4. Benefits</h2>\n<ul>\n<li><strong>Maximized Occupancy:</strong> Tools to efficiently fill vacant chairs and suites.</li>\n<li><strong>Streamlined Operations:</strong> Centralized management of stylists and referrals reduces administrative overhead.</li>\n<li><strong>Increased Profitability:</strong> Optimizes revenue generation through efficient space utilization and referr",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "SUITE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_DASHBOARD",
    "content": "al tracking.</li>\n<li><strong>Collaborative Environment:</strong> Fosters a sense of community and collaboration among stylists within the suite.</li>\n</ul>",
    "start_char": 3000,
    "end_char": 3157,
    "source_file": "SUITE_DASHBOARD.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_TOOLS",
    "content": "<h1>Suite Tools</h1>\n<p>This document provides a detailed description of the Suite Tools feature, designed specifically for salon suite owners and managers.</p>\n<h2>1. Overview</h2>\n<p>Suite Tools are a comprehensive set of features enabling salon suite owners and managers to efficiently oversee their suite operations. This includes managing chair availability, facilitating in-suite referrals, and gaining insights into suite performance. These tools are crucial for maximizing space utilization,",
    "start_char": 0,
    "end_char": 500,
    "source_file": "SUITE_TOOLS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_TOOLS",
    "content": "fostering a collaborative environment, and enhancing profitability.</p>\n<p>The feature is primarily implemented within the <code>SuiteTools.tsx</code> component, which is accessed via the <code>SuiteToolsPage.tsx</code>.</p>\n<h2>2. Key Features</h2>\n<h3>2.1. Enable Suite Tools</h3>\n<ul>\n<li><strong>Activation:</strong> Salon suite owners can activate these specialized tools from their <code>StylistProfileSetup</code> page.</li>\n<li><strong>Role Update:</strong> Enabling Suite Tools updates the o",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "SUITE_TOOLS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_TOOLS",
    "content": "wner's profile to reflect their role as a suite owner, unlocking access to all associated features.</li>\n</ul>\n<h3>2.2. Open Chair Management</h3>\n<p>This section provides tools for managing the availability of chairs within the suite.</p>\n<ul>\n<li><strong>Post Open Chair:</strong>\n<ul>\n<li>Allows owners to define when and where a chair is available.</li>\n<li>Specify service types a visiting professional can offer.</li>\n<li>Set commission percentages for the chair provider.</li>\n<li>Manage capac",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "SUITE_TOOLS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_TOOLS",
    "content": "ity by specifying the number of available seats.</li>\n<li>Target audience selection: broadcast to a trusted network or all nearby professionals.</li>\n<li>Option to post an open chair specifically for a waiting walk-in client, including service type and price.</li>\n</ul>\n</li>\n<li><strong>View Open Chairs:</strong> Owners can view a list of all their active and past open chair postings, including their status and expiration.</li>\n</ul>\n<h3>2.3. In-Suite Referrals</h3>\n<p>This feature streamlines",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "SUITE_TOOLS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_TOOLS",
    "content": "the process of managing referrals within the suite environment.</p>\n<ul>\n<li><strong>Facilitated Connections:</strong> Allows suite owners to connect their clients with available professionals within their own suite.</li>\n<li><strong>Tracking:</strong> Provides mechanisms to track the status and success of referrals made within the suite.</li>\n<li><strong>Commission Management:</strong> Helps in managing commission splits for in-suite referrals.</li>\n</ul>\n<h3>2.4. Suite Analytics</h3>\n<p>This s",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "SUITE_TOOLS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_TOOLS",
    "content": "ection provides valuable insights into the suite's performance.</p>\n<ul>\n<li><strong>Occupancy Rates:</strong> Track the occupancy rate of chairs and suites over time.</li>\n<li><strong>Referral Performance:</strong> Analyze the success rate and revenue generated from in-suite referrals.</li>\n<li><strong>Stylist Performance:</strong> Gain insights into the performance of individual stylists within the suite.</li>\n</ul>\n<h2>3. Enabling Suite Tools</h2>\n<p>Suite owners can enable these features fro",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "SUITE_TOOLS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_TOOLS",
    "content": "m their profile setup:</p>\n<pre><code class=\"language-tsx\">// src/components/stylist/StylistProfileSetup.tsx\nconst handleEnableSuiteTools = async () =&gt; {\n  setLoading(true);\n  try {\n    const { error } = await updateProfile({ suite_owner: true, role_tag: 'suite_owner' });\n    if (error) throw error as any;\n    toast({ title: 'Suite Tools enabled', description: 'You can now manage suite features.' });\n    navigate('/suite-tools'); // Redirect to suite management dashboard\n  } catch (err: any)",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "SUITE_TOOLS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_TOOLS",
    "content": "{\n    toast({ title: 'Enable failed', description: err?.message || 'Could not enable Suite Tools', variant: 'destructive' });\n  }\n} finally {\n  setLoading(false);\n};\n</code></pre>\n<h2>4. Posting an Open Chair</h2>\n<p>The <code>PostOpenChairForm</code> component is used to create and manage open chair listings. It ensures that all necessary details are captured for a successful match between a suite owner and a visiting professional.</p>\n<pre><code class=\"language-tsx\">import { PostOpenChairForm",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "SUITE_TOOLS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "SUITE_TOOLS",
    "content": "} from '@/components/open-chair/PostOpenChairForm';\n\nconst SuiteDashboard = () =&gt; {\n  return (\n    &lt;PostOpenChairForm onSuccess={() =&gt; console.log('Open Chair posted successfully!')} /&gt;\n  );\n};\n</code></pre>\n<p>This system streamlines the process of filling vacant chairs, providing flexibility for both suite owners and independent professionals seeking temporary workspace.</p>",
    "start_char": 4000,
    "end_char": 4392,
    "source_file": "SUITE_TOOLS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "<h1>System Design Document</h1>\n<h2>1. Introduction</h2>\n<h3>1.1 Purpose</h3>\n<p>This document provides a detailed system design for the ClientPass application. It expands on the <strong>Software Requirements Specification (SRS)</strong> by detailing the technical implementation of each requirement, including the components, data models, and functions involved. It is intended for the development team to use as a guide for implementation.</p>\n<h3>1.2 Scope</h3>\n<p>This document covers the detaile",
    "start_char": 0,
    "end_char": 500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "d design of the frontend and backend components required to meet the functional and non-functional requirements outlined in the SRS.</p>\n<h2>2. System Architecture</h2>\n<p>The overall system architecture is described in the <strong>Software Architecture Document (SAD.md)</strong> and the <strong>Architecture Overview (ARCHITECTURE.md)</strong>. This document will focus on the design of the specific modules and components within that architecture.</p>\n<h2>3. Detailed Functional Design</h2>\n<p>Thi",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "s section breaks down the functional requirements from the SRS into their constituent design elements.</p>\n<h3>3.1 User Authentication &amp; Onboarding</h3>\n<p>Corresponds to SRS Section 3.1.1.</p>\n<ul>\n<li><strong>Frontend Components</strong>:\n<ul>\n<li><code>SignUpForm.tsx</code>: Handles user registration.</li>\n<li><code>LoginForm.tsx</code>: Handles user login.</li>\n<li><code>useAuthStore.ts</code>: A Zustand store to manage global authentication state, user profile, and session information.<",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "/li>\n</ul>\n</li>\n<li><strong>Data Models</strong>:\n<ul>\n<li><code>public.users</code>: The primary table for user profile data.</li>\n<li><code>auth.users</code>: Supabase's built-in table for authentication credentials.</li>\n<li><code>public.docs_users</code>: For documentation site access.</li>\n<li><code>public.docs_invites</code>: For invitation-only access to the documentation site.</li>\n</ul>\n</li>\n<li><strong>Edge Functions</strong>:\n<ul>\n<li><code>upsert-profile</code>: Called after sign-u",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "p to create a corresponding profile in the <code>users</code> table.</li>\n<li><code>send-doc-invite</code>: For admins to send email invitations to the documentation site.</li>\n</ul>\n</li>\n<li><strong>User Flow</strong>:\n<ol>\n<li>A new user signs up using the <code>SignUpForm</code>.</li>\n<li>Supabase Auth handles the email verification process.</li>\n<li>Upon first login, the <code>upsert-profile</code> function is triggered to create a user record.</li>\n<li>The user's session and profile are st",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "ored in the <code>useAuthStore</code>.</li>\n</ol>\n</li>\n</ul>\n<h3>3.2 Referral Management</h3>\n<p>Corresponds to SRS Section 3.1.2.</p>\n<ul>\n<li><strong>Frontend Components</strong>:\n<ul>\n<li><code>ReferralForm.tsx</code>: A form for creating and sending a new referral.</li>\n<li><code>ReferralCard.tsx</code>: A component to display the status and details of a referral.</li>\n<li><code>CountdownTimer.tsx</code>: A component to show the real-time expiration timer for a pending referral.</li>\n</ul>",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "</li>\n<li><strong>Data Models</strong>:\n<ul>\n<li><code>public.referrals</code>: The central table for all referral data.</li>\n<li><code>public.users</code>: To link senders and receivers.</li>\n<li><code>public.services</code>: To specify the service being referred.</li>\n</ul>\n</li>\n<li><strong>Edge Functions</strong>:\n<ul>\n<li><code>send-referral</code>: The primary function for initiating a referral. It finds a suitable receiver and creates the referral record.</li>\n<li><code>reassign-referral<",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "/code>: Triggered when a referral is declined or expires, to find the next available professional.</li>\n<li><code>inbox-action</code>: Handles the &quot;accept&quot; or &quot;decline&quot; actions from the receiver.</li>\n</ul>\n</li>\n<li><strong>User Flow</strong>:\n<ol>\n<li>A stylist fills out the <code>ReferralForm</code>.</li>\n<li>The <code>send-referral</code> function is invoked.</li>\n<li>The system identifies a receiver and creates a <code>referrals</code> record with a <code>pending</code>",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "status.</li>\n<li>The receiver is notified in real-time (via Supabase Realtime) and sees the referral in their inbox with a <code>CountdownTimer</code>.</li>\n<li>The receiver accepts or declines via the <code>inbox-action</code> function.</li>\n</ol>\n</li>\n</ul>\n<h3>3.3 Open Chair Marketplace</h3>\n<p>Corresponds to SRS Section 3.1.3.</p>\n<ul>\n<li><strong>Frontend Components</strong>:\n<ul>\n<li><code>PostOpenChairForm.tsx</code>: A form for hosts to list their available chair.</li>\n<li><code>OpenCha",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "irAlerts.tsx</code>: A view for stylists to browse and accept open chairs.</li>\n<li><code>LiveSessionCard.tsx</code>: A dashboard component that appears during a live session.</li>\n</ul>\n</li>\n<li><strong>Data Models</strong>:\n<ul>\n<li><code>public.open_chairs</code>: Stores all data related to open chair listings.</li>\n<li><code>public.referrals</code>: Bookings made into an open chair are linked via the <code>open_chair_id</code>.</li>\n<li><code>public.users</code>: To link hosts and visiting",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "stylists.</li>\n</ul>\n</li>\n<li><strong>Edge Functions</strong>:\n<ul>\n<li><code>post-open-chair</code>: Creates a new <code>open_chairs</code> listing.</li>\n<li><code>accept-open-chair</code>: Allows a stylist to initiate the acceptance of an open chair.</li>\n<li><code>confirm-open-chair</code>: Confirms the acceptance within a time window.</li>\n<li><code>check-in-open-chair</code>: Starts the &quot;live&quot; session.</li>\n<li><code>end-open-chair-session</code>: Ends the session and triggers se",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "ttlement.</li>\n<li><code>settle-open-chair-commission</code>: Calculates and records the commission splits.</li>\n</ul>\n</li>\n</ul>\n<h3>3.4 Hot Seat (Flash Sales)</h3>\n<p>Corresponds to SRS Section 3.1.4.</p>\n<ul>\n<li><strong>Frontend Components</strong>:\n<ul>\n<li><code>PostHotSeatForm.tsx</code>: A form for creating a &quot;Hot Seat&quot; alert.</li>\n<li><code>HotSeatCard.tsx</code>: A component to display a Hot Seat offer.</li>\n</ul>\n</li>\n<li><strong>Data Models</strong>:\n<ul>\n<li><code>public",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": ".hot_seats</code>: Stores all data for Hot Seat offers.</li>\n<li><code>public.users</code>: To link the stylist posting the offer.</li>\n<li><code>public.services</code>: To specify the service offered.</li>\n</ul>\n</li>\n<li><strong>Edge Functions</strong>:\n<ul>\n<li><code>post-hot-seat</code> (to be created): Will handle the creation of a new <code>hot_seats</code> record and send notifications to the target audience.</li>\n<li><code>claim-hot-seat</code> (to be created): Will allow a client to cla",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "im the offer, updating the status and notifying the stylist.</li>\n</ul>\n</li>\n</ul>\n<h3>3.5 Profile &amp; Network Management</h3>\n<p>Corresponds to SRS Section 3.1.5.</p>\n<ul>\n<li><strong>Frontend Components</strong>:\n<ul>\n<li><code>ProfileForm.tsx</code>: A form for users to edit their public profile.</li>\n<li><code>ServiceManager.tsx</code>: A CRUD interface for professionals to manage their services.</li>\n<li><code>TrustedNetwork.tsx</code>: A UI for managing a user's trusted partners.</li>\n<",
    "start_char": 6500,
    "end_char": 7000,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "/ul>\n</li>\n<li><strong>Data Models</strong>:\n<ul>\n<li><code>public.users</code>: Stores the user's profile information.</li>\n<li><code>public.services</code>: Stores the services offered by each professional.</li>\n<li><code>public.trusted_network</code>: Manages the many-to-many relationships between users and their trusted partners.</li>\n<li><code>public.auto_suggest_tracking</code>: Tracks interactions to power the auto-suggest feature.</li>\n</ul>\n</li>\n<li><strong>Edge Functions</strong>:\n<ul",
    "start_char": 7000,
    "end_char": 7500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": ">\n<li><code>upsert-profile</code>: Creates or updates a user's profile.</li>\n<li><code>send-trusted-invite</code>: Sends an email invitation to join a user's trusted network.</li>\n<li><code>complete-referral-tracking</code>: Increments the interaction count in <code>auto_suggest_tracking</code> after a successful collaboration.</li>\n</ul>\n</li>\n</ul>\n<h2>4. Non-Functional Requirements Design</h2>\n<h3>4.1 Performance (PERF-01)</h3>\n<ul>\n<li><strong>Real-time Updates</strong>: Supabase Realtime wi",
    "start_char": 7500,
    "end_char": 8000,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "ll be used to subscribe to changes in the <code>referrals</code> and <code>messages</code> tables, pushing updates to the client instantly.</li>\n<li><strong>Caching</strong>: TanStack Query will be used to cache server-side data on the client, reducing redundant API calls.</li>\n<li><strong>Lazy Loading</strong>: React's lazy loading capabilities will be used to code-split the application, so users only download the JavaScript needed for the current view.</li>\n<li><strong>Pagination</strong>: All",
    "start_char": 8000,
    "end_char": 8500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "lists of data (e.g., referral history, open chair alerts) will be paginated on the backend to ensure fast initial load times.</li>\n</ul>\n<h3>4.2 Security (SEC-01, SEC-02)</h3>\n<ul>\n<li><strong>Row Level Security (RLS)</strong>: Supabase RLS policies will be implemented on all tables to ensure users can only access and modify data they own or are permitted to see.</li>\n<li><strong>JWT Authentication</strong>: All communication with the Supabase backend will be authenticated using JSON Web Tokens",
    "start_char": 8500,
    "end_char": 9000,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "(JWTs) managed by Supabase Auth.</li>\n<li><strong>Secure Edge Functions</strong>: All Edge Functions will validate user authentication and authorization before executing any logic. Input will be sanitized to prevent injection attacks.</li>\n</ul>\n<h3>4.3 Usability (USAB-01)</h3>\n<ul>\n<li><strong>Responsive Design</strong>: The application will be built using a mobile-first approach with Tailwind CSS to ensure it is fully responsive and usable on all screen sizes.</li>\n<li><strong>Component Libra",
    "start_char": 9000,
    "end_char": 9500,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266a9e",
    "content": "ry</strong>: A consistent look and feel will be maintained by using the <code>shadcn-ui</code> component library and a custom theme.</li>\n</ul>",
    "start_char": 9500,
    "end_char": 9644,
    "source_file": "SYSTEM_DESIGN.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266a9e",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "<h1>User Story Backlog</h1>\n<p>This document contains the user story backlog for the ClientPass application, organized by feature epics.</p>\n<hr>\n<h2>Epic: User Authentication &amp; Onboarding</h2>\n<ul>\n<li><strong>Story</strong>: As a stylist, I want to sign up with my email and password so I can create an account and access the platform.</li>\n<li><strong>Story</strong>: As a new user, I want a simple onboarding process that guides me through setting up my profile and services so I can start re",
    "start_char": 0,
    "end_char": 500,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "ceiving referrals quickly.</li>\n<li><strong>Story</strong>: As an affiliate, I want to sign up through a dedicated affiliate portal so I can join the affiliate program.</li>\n<li><strong>Story</strong>: As a user, I want to be able to log in securely and log out of my account.</li>\n</ul>\n<h2>Epic: Referral Management</h2>\n<ul>\n<li><strong>Story</strong>: As a busy stylist, I want to quickly send a walk-in client I can't serve to another available stylist so I can earn a referral commission.</li>",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "<li><strong>Story</strong>: As a stylist, I want to receive real-time notifications for new referrals so I don't miss out on potential clients.</li>\n<li><strong>Story</strong>: As a receiving stylist, I want a 10-minute exclusive window to accept or decline a referral so I have time to check my schedule without pressure.</li>\n<li><strong>Story</strong>: As a sender, I want the system to automatically reassign an expired or declined referral to the next best stylist so the client still gets serve",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "d.</li>\n<li><strong>Story</strong>: As a user, I want to track the status of referrals I've sent and received (pending, accepted, completed) so I know what's happening.</li>\n</ul>\n<h2>Epic: Open Chair Marketplace</h2>\n<ul>\n<li><strong>Story</strong>: As a salon owner with empty stations, I want to post my available chairs with a commission rate so I can monetize unused space.</li>\n<li><strong>Story</strong>: As a traveling stylist, I want to find and book a temporary chair in a new city so I can",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "serve my clients on the go.</li>\n<li><strong>Story</strong>: As a stylist accepting an Open Chair, I want to &quot;check in&quot; to start a live session to begin tracking my services.</li>\n<li><strong>Story</strong>: As a host, I want to see a real-time summary of services and revenue generated during a live session so I can track my earnings.</li>\n<li><strong>Story</strong>: As a host, I want commissions to be calculated and settled automatically when a session ends.</li>\n</ul>\n<h2>Epic: Hot",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "Seat (Flash Sales)</h2>\n<ul>\n<li><strong>Story</strong>: As a stylist with a last-minute cancellation, I want to post a &quot;Hot Seat&quot; deal with a discount to fill the empty slot quickly.</li>\n<li><strong>Story</strong>: As a stylist, I want to broadcast Hot Seat alerts to specific audiences (my favorites, all my clients, or all local users) to maximize visibility.</li>\n<li><strong>Story</strong>: As a client, I want to be notified of Hot Seat deals from my favorite stylists so I can book",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "a service at a discount.</li>\n</ul>\n<h2>Epic: Coverage Mode</h2>\n<ul>\n<li><strong>Story</strong>: As a stylist planning a vacation, I want to enable &quot;Coverage Mode&quot; so my incoming client requests are automatically forwarded to trusted colleagues.</li>\n<li><strong>Story</strong>: As a stylist, I want to build a &quot;Coverage List&quot; of specific professionals I trust to handle my clients when I'm away.</li>\n<li><strong>Story</strong>: As a covering stylist, I want to receive referral",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "notifications for clients of the unavailable stylist so I can earn extra income.</li>\n</ul>\n<h2>Epic: Financials &amp; Earnings</h2>\n<ul>\n<li><strong>Story</strong>: As a user, I want a clear dashboard showing my total earnings, pending payments, and available payout balance.</li>\n<li><strong>Story</strong>: As a user, I want to securely connect my Stripe account to receive automatic weekly or monthly payouts.</li>\n<li><strong>Story</strong>: As a user, I want to view a detailed transaction his",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "tory for all my completed referrals and sessions.</li>\n</ul>\n<h2>Epic: Profile &amp; Network Management</h2>\n<ul>\n<li><strong>Story</strong>: As a stylist, I want to create a rich public profile with my photo, bio, services, prices, and portfolio to attract new clients.</li>\n<li><strong>Story</strong>: As a user, I want to add a professional I've worked with to my &quot;Trusted Network&quot; to prioritize them for future referrals.</li>\n<li><strong>Story</strong>: As a user, I want the app to su",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "ggest adding a professional to my Trusted Network after we have successfully collaborated multiple times.</li>\n</ul>\n<h2>Epic: Affiliate Program</h2>\n<ul>\n<li><strong>Story</strong>: As an affiliate, I want a unique referral link to share with stylists so I can get credit for recruiting them.</li>\n<li><strong>Story</strong>: As an affiliate, I want to see a dashboard of my total sign-ups and the commissions I've earned from their activity.</li>\n<li><strong>Story</strong>: As an affiliate manager",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": ", I want to approve or deny pending affiliate applications.</li>\n</ul>\n<h2>Epic: Administration</h2>\n<ul>\n<li><strong>Story</strong>: As an admin, I want a global dashboard to get a high-level overview of user activity, revenue, and system health.</li>\n<li><strong>Story</strong>: As an admin, I want to manage feature flags to enable or disable specific platform features in real-time.</li>\n<li><strong>Story</strong>: As an admin, I want to manage all users, view their profiles, and change their r",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "oles or status (active/inactive).</li>\n<li><strong>Story</strong>: As an admin, I want to view and manage all business onboarding applications, with the ability to approve or deny them.</li>\n<li><strong>Story</strong>: As an admin, I want to configure platform-wide settings, such as pricing, fees, and commission rates.</li>\n<li><strong>Story</strong>: As an admin, I want to monitor all referral activity across the platform to identify trends and potential issues.</li>\n<li><strong>Story</strong>:",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "As an admin, I want to manage &quot;Open Chair&quot; and &quot;Hot Seat&quot; postings, with the ability to close or modify them.</li>\n<li><strong>Story</strong>: As an admin, I want to manage all notification templates (email, SMS, push) sent by the system.</li>\n<li><strong>Story</strong>: As an admin, I want to export various datasets (users, referrals, payments) in CSV format for external analysis.</li>\n<li><strong>Story</strong>: As an admin, I want to view a detailed audit log of all admin",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa0",
    "content": "istrative actions to ensure accountability and security.</li>\n<li><strong>Story</strong>: As an admin, I want to impersonate a user to view the platform from their perspective for troubleshooting and support.</li>\n<li><strong>Story</strong>: As an admin, I want a dashboard to manage &quot;Pro Deals&quot; that are available to all platform users.</li>\n<li><strong>Story</strong>: As an admin, I want to view a system health dashboard to monitor platform activity.</li>\n</ul>",
    "start_char": 6500,
    "end_char": 6976,
    "source_file": "USER_STORIES.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa0",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "<p>&lt;!-- TODO: Fix Mermaid diagram rendering issue in Section 4. The diagrams are not rendering correctly, and this is a known issue. --&gt;</p>\n<h1>Use Case Models</h1>\n<h2>1. Introduction</h2>\n<p>This document describes the primary use cases for the ClientPass system, detailing the interactions between users (actors) and the system to achieve specific goals.</p>\n<h2>2. Actors</h2>\n<ul>\n<li><strong>Pro (Stylist/Barber)</strong>: A professional providing services.</li>\n<li><strong>Host</strong",
    "start_char": 0,
    "end_char": 500,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": ">: A Pro or Suite Owner who lists their chair/space for use.</li>\n<li><strong>Client</strong>: A person receiving a service, referred via the platform.</li>\n<li><strong>Affiliate</strong>: A user who recruits other Pros to the platform.</li>\n<li><strong>Admin</strong>: A system administrator.</li>\n</ul>\n<h2>3. Use Case Diagram</h2>\n<pre><code class=\"language-mermaid\">graph TD\n    subgraph &quot;ClientPass System&quot;\n        UC1((Send Walk-in Referral))\n        UC2((Accept a Referral))",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "UC3((Post an Open Chair))\n        UC4((Book an Open Chair))\n        UC5((Post a Hot Seat))\n        UC6((Join as Affiliate))\n        UC7((Manage Pro Deals))\n    end\n\n    Pro[&quot;Pro&quot;]\n    Host[&quot;Host&quot;]\n    Affiliate[&quot;Affiliate&quot;]\n    Admin[&quot;Admin&quot;]\n\n    Pro --&gt; UC1\n    Pro --&gt; UC2\n    Pro --&gt; UC4\n    Pro --&gt; UC5\n    Host --&gt; UC3\n    Affiliate --&gt; UC6\n    Admin --&gt; UC7\n</code></pre>\n<h2>4. Use Case Descriptions</h2>\n<h3>UC-01: Send a Walk-in",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "Referral</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A(Pro) --&gt; B((Send Walk-in Referral))\n</code></pre>\n<p><strong>Use Case ID</strong>: UC-01</p>\n<p><strong>Actor</strong>: Pro</p>\n<p><strong>Description</strong>: A Pro sends a client they cannot serve to another available professional in the network to earn a commission.</p>\n<p><strong>Preconditions</strong>:&lt;br&gt;- The Pro is logged in.&lt;br&gt;- The Pro has clients who need services.</p>\n<p><strong>Success Criteria</strong",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": ">:&lt;br&gt;- A new <code>referrals</code> record is created in the database with a <code>pending</code> status, containing all referral data (client info, service, commission).&lt;br&gt;- The system correctly identifies and assigns the referral to the best-matched available Pro based on the sender's trusted network and Pro availability.&lt;br&gt;- The receiving Pro is sent a real-time notification (e.g., push notification, SMS) within 5 seconds of the referral being sent.&lt;br&gt;- The sending",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "Pro's UI updates to show the referral as 'pending' and which Pro it was sent to.&lt;br&gt;- The referral is correctly associated with the sender's and receiver's accounts for future tracking.</p>\n<h3>UC-02: Accept a Referral</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A(Pro) --&gt; B((Accept a Referral))\n</code></pre>\n<p><strong>Use Case ID</strong>: UC-02</p>\n<p><strong>Actor</strong>: Pro</p>\n<p><strong>Description</strong>: A Pro accepts a referral request sent to them.</p>\n<p><str",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "ong>Preconditions</strong>:&lt;br&gt;- The Pro is logged in.&lt;br&gt;- A referral with a <code>pending</code> status has been assigned to the Pro.</p>\n<p><strong>Success Criteria</strong>:&lt;br&gt;- The <code>referrals</code> record status is updated from <code>pending</code> to <code>accepted</code> in the database.&lt;br&gt;- The <code>accepted_at</code> timestamp is recorded, and the <code>expires_at</code> timer is cleared.&lt;br&gt;- The original sender is notified in real-time (e.g., pus",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "h notification, UI update) that their referral was accepted.&lt;br&gt;- The client's contact information (full name and phone number) is made visible to the accepting Pro.&lt;br&gt;- The accepting Pro's UI updates to show the accepted referral and the client's contact details.</p>\n<h3>UC-03: Post an Open Chair</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A(Host) --&gt; B((Post an Open Chair))\n</code></pre>\n<p><strong>Use Case ID</strong>: UC-03</p>\n<p><strong>Actor</strong>: Host</p>\n<p",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "><strong>Description</strong>: A Host lists their available chair or workspace for other professionals to use.</p>\n<p><strong>Preconditions</strong>:&lt;br&gt;- The Host is logged in and has a <code>pro</code> or <code>suiteOwner</code> role.&lt;br&gt;- The Host has an available chair to list.</p>\n<p><strong>Success Criteria</strong>:&lt;br&gt;- A new record is created in the <code>open_chairs</code> table with an <code>open</code> status and all listing details (location, time, commission, etc.",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": ").&lt;br&gt;- The listing is immediately visible to other Pros in the specified audience group (e.g., trusted network, all).&lt;br&gt;- The system sends notifications (e.g., push, email) to eligible Pros about the new opportunity, based on their location and notification preferences.&lt;br&gt;- The Host's UI updates to show their new active listing.</p>\n<h3>UC-04: Book an Open Chair</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A(Pro) --&gt; B((Book an Open Chair))\n</code></pre>\n<p><stro",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "ng>Use Case ID</strong>: UC-04</p>\n<p><strong>Actor</strong>: Pro</p>\n<p><strong>Description</strong>: A Pro books an available Open Chair to serve their clients.</p>\n<p><strong>Preconditions</strong>:&lt;br&gt;- The Pro is logged in.&lt;br&gt;- There is an <code>open_chairs</code> listing with an <code>open</code> status.</p>\n<p><strong>Success Criteria</strong>:&lt;br&gt;- The Pro can successfully accept the open chair, creating a temporary 10-minute lock on the listing.&lt;br&gt;- The Pro can",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "confirm the booking within the 10-minute window, updating the <code>open_chairs</code> status to <code>accepted</code>.</p>\n<ul>\n<li>The Host is notified in real-time of the confirmed booking.&lt;br&gt;- The Pro can successfully &quot;check in&quot; to start a <code>live</code> session, changing the status to <code>live</code>.</li>\n<li>At the end of the session, all services rendered are correctly tracked, and commissions are calculated and distributed to the Host and the Pro.&lt;br&gt;- The P",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "ro's and Host's earnings dashboards are updated with the correct amounts.</li>\n</ul>\n<h3>UC-05: Post a Hot Seat</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A(Pro) --&gt; B((Post a Hot Seat))\n</code></pre>\n<p><strong>Use Case ID</strong>: UC-05</p>\n<p><strong>Actor</strong>: Pro</p>\n<p><strong>Description</strong>: A Pro advertises a last-minute appointment opening, often at a discount.</p>\n<p><strong>Preconditions</strong>:&lt;br&gt;- The Pro is logged in.&lt;br&gt;- The Pro has a last",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "-minute opening in their schedule.</p>\n<p><strong>Success Criteria</strong>:&lt;br&gt;- A new <code>hot_seats</code> record is created in the database with all the offer details.&lt;br&gt;- Notifications are successfully dispatched in real-time to the audience selected by the Pro (e.g., favorites, all clients).&lt;br&gt;- A client can claim the hot seat, which updates its status to <code>claimed</code> and prevents others from claiming it.&lt;br&gt;- The Pro is notified when a client claims the",
    "start_char": 6500,
    "end_char": 7000,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "68dccbb8479feecff6266aa2",
    "content": "hot seat.&lt;br&gt;- The client receives a confirmation of their claimed hot seat.</p>",
    "start_char": 7000,
    "end_char": 7087,
    "source_file": "USE_CASE_MODELS.md",
    "frontmatter": {
      "id": "68dccbb8479feecff6266aa2",
      "revision": 14
    }
  },
  {
    "doc_id": "WAITING_FOR_RESPONSE",
    "content": "<h1>Waiting for Response Page</h1>\n<p>This document provides a detailed description of the Waiting for Response page.</p>\n<h2>1. Overview</h2>\n<p>The Waiting for Response page is displayed to a user (typically a sender of a referral) after they have successfully sent a referral to a professional. This page provides real-time updates on the status of the referral and informs the sender about the next steps.</p>\n<p>The page is implemented in the <code>WaitingForResponse.tsx</code> component.</p>\n<",
    "start_char": 0,
    "end_char": 500,
    "source_file": "WAITING_FOR_RESPONSE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WAITING_FOR_RESPONSE",
    "content": "h2>2. Key Features</h2>\n<h3>2.1. Real-time Status Updates</h3>\n<ul>\n<li><strong>Supabase Real-time Subscriptions:</strong> The page uses Supabase real-time subscriptions to listen for updates to the referral status in the database.</li>\n<li><strong>Dynamic Content:</strong> The content and messages displayed on the page dynamically change based on the referral's status (e.g., <code>waiting</code>, <code>accepted</code>, <code>declined</code>, <code>expired</code>).</li>\n</ul>\n<h3>2.2. Countdown",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "WAITING_FOR_RESPONSE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WAITING_FOR_RESPONSE",
    "content": "Timer</h3>\n<ul>\n<li><strong>Response Deadline:</strong> A <code>CountdownTimer</code> component is prominently displayed, showing the remaining time for the referred professional to respond to the referral.</li>\n<li><strong>Automatic Reassignment:</strong> If the timer expires without a response, the referral is automatically reassigned to another available professional.</li>\n</ul>\n<h3>2.3. Referral Details</h3>\n<ul>\n<li><strong>Summary:</strong> Displays a summary of the referral details, inclu",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "WAITING_FOR_RESPONSE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WAITING_FOR_RESPONSE",
    "content": "ding the client's name, service type, the professional it was sent to, and potential earnings.</li>\n</ul>\n<h3>2.4. Status Messages</h3>\n<ul>\n<li><strong>Informative Messages:</strong> Provides clear and concise messages to the sender about the current status of their referral.\n<ul>\n<li><strong>Waiting:</strong> &quot;Referral sent successfully. Waiting for stylist to accept.&quot;</li>\n<li><strong>Accepted:</strong> &quot;Great news! [Professional Name] has accepted the referral. Connecting with",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "WAITING_FOR_RESPONSE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WAITING_FOR_RESPONSE",
    "content": "client...&quot;</li>\n<li><strong>Expired:</strong> &quot;No response received. We're now looking for another available professional in your network.&quot;</li>\n</ul>\n</li>\n</ul>\n<h3>2.5. Referral Complete Screen</h3>\n<ul>\n<li><strong>Confirmation:</strong> If the referral is accepted and completed, the page transitions to a <code>ReferralComplete</code> screen, providing a final confirmation and summary.</li>\n</ul>\n<h2>3. Data Model</h2>\n<p>The Waiting for Response page interacts with the <code",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "WAITING_FOR_RESPONSE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WAITING_FOR_RESPONSE",
    "content": ">referrals</code> and <code>users</code> tables in the Supabase database to fetch and monitor referral status.</p>\n<h2>4. User Interface</h2>\n<p>The user interface consists of:</p>\n<ul>\n<li>A header with a back button and a &quot;Waiting for Response&quot; title.</li>\n<li>A main content area that dynamically displays the referral status, countdown timer, and referral details.</li>\n<li>Status badges that indicate the type of referral (e.g., &quot;Walk-In Referral&quot;, &quot;Coverage Mode&quot;,",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "WAITING_FOR_RESPONSE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WAITING_FOR_RESPONSE",
    "content": "&quot;Auto-Match&quot;).</li>\n</ul>",
    "start_char": 3000,
    "end_char": 3037,
    "source_file": "WAITING_FOR_RESPONSE.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WALK_IN_REFERRALS",
    "content": "<h1>Walk-in Referrals</h1>\n<p>This document provides a detailed description of the Walk-in Referrals feature.</p>\n<h2>1. Overview</h2>\n<p>The Walk-in Referrals feature allows a stylist to manually record a referral that happened outside of the ClientPass application. This is useful for tracking referrals that come from word-of-mouth, phone calls, or clients who physically walk into the salon.</p>\n<p>This feature is integrated into the <code>EnhancedReferralForm</code> component.</p>\n<h2>2. Featu",
    "start_char": 0,
    "end_char": 500,
    "source_file": "WALK_IN_REFERRALS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WALK_IN_REFERRALS",
    "content": "res</h2>\n<h3>2.1. Activation</h3>\n<ul>\n<li>The Walk-in Referral mode is activated by a &quot;Walk-in&quot; switch within the <code>EnhancedReferralForm</code>.</li>\n<li>When the switch is toggled on, the form adapts to allow for the manual entry of referral information.</li>\n</ul>\n<h3>2.2. Contact Source</h3>\n<ul>\n<li>When recording a walk-in referral, the stylist can specify the <code>contact_source</code> of the referral.</li>\n<li>The available options are:\n<ul>\n<li><code>Phone</code></li>\n<li",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "WALK_IN_REFERRALS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WALK_IN_REFERRALS",
    "content": "><code>Text</code></li>\n<li><code>DM</code> (Direct Message)</li>\n<li><code>WalkIn</code></li>\n</ul>\n</li>\n</ul>\n<h3>2.3. Manual Data Entry</h3>\n<ul>\n<li>The form allows the stylist to manually enter all the relevant details of the referral, including:\n<ul>\n<li>Client's name</li>\n<li>Client's contact information</li>\n<li>The service requested</li>\n<li>The referred stylist</li>\n</ul>\n</li>\n</ul>\n<h2>3. Use Case</h2>\n<p>The primary use case for this feature is to provide stylists with a way to tra",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "WALK_IN_REFERRALS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WALK_IN_REFERRALS",
    "content": "ck all their referrals, both digital and physical, in one central place. This ensures that they get credit for all the business they bring in, and it provides a more complete picture of their referral activity.</p>\n<p>For example, if a regular client calls the stylist to refer a friend, the stylist can use the Walk-in Referral feature to record this referral in the ClientPass system.</p>\n<h2>4. Data Model</h2>\n<p>The Walk-in Referrals feature adds the <code>contact_source</code> field to the <co",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "WALK_IN_REFERRALS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "WALK_IN_REFERRALS",
    "content": "de>referrals</code> table in the Supabase database. This field stores the source of the referral as specified by the stylist.</p>",
    "start_char": 2000,
    "end_char": 2130,
    "source_file": "WALK_IN_REFERRALS.md",
    "frontmatter": {}
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "<h1>Textual Wireframes</h1>\n<p>This document contains textual wireframes for the main pages of the application.</p>\n<hr>\n<p><strong>Page: Pro Dashboard</strong></p>\n<p><strong>Layout:</strong></p>\n<ul>\n<li>A header with the application logo and a user profile button.</li>\n<li>A main content area with a two-column grid.</li>\n<li>A bottom navigation bar.</li>\n</ul>\n<p><strong>Header:</strong></p>\n<ul>\n<li>Left: ClientPass Logo</li>\n<li>Right: User Profile Button (opens a dropdown with &quot;Profil",
    "start_char": 0,
    "end_char": 500,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "e&quot; and &quot;Logout&quot;)</li>\n</ul>\n<p><strong>Main Content (Left Column):</strong></p>\n<ul>\n<li><strong>My Stats Card:</strong>\n<ul>\n<li>&quot;Earnings this month&quot;</li>\n<li>&quot;Referrals this month&quot;</li>\n</ul>\n</li>\n<li><strong>Recent Activity Card:</strong>\n<ul>\n<li>A list of recent referrals and their status.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Main Content (Right Column):</strong></p>\n<ul>\n<li><strong>Open Chair Card:</strong>\n<ul>\n<li>A button to &quot;Post an Open Chair&qu",
    "start_char": 500,
    "end_char": 1000,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "ot;.</li>\n<li>A list of currently open chairs.</li>\n</ul>\n</li>\n<li><strong>My Services Card:</strong>\n<ul>\n<li>A list of the stylist's services.</li>\n<li>A button to &quot;Add a new service&quot;.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Bottom Navigation:</strong></p>\n<ul>\n<li>&quot;Home&quot;</li>\n<li>&quot;Referrals&quot;</li>\n<li>&quot;Open Chairs&quot;</li>\n<li>&quot;Profile&quot;</li>\n</ul>\n<hr>\n<p><strong>Page: Suite Dashboard</strong></p>\n<p><strong>Layout:</strong></p>\n<ul>\n<li>A header with",
    "start_char": 1000,
    "end_char": 1500,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "the application logo and a user profile button.</li>\n<li>A main content area with a two-column grid.</li>\n<li>A bottom navigation bar.</li>\n</ul>\n<p><strong>Header:</strong></p>\n<ul>\n<li>Left: ClientPass Logo</li>\n<li>Right: User Profile Button (opens a dropdown with &quot;Profile&quot; and &quot;Logout&quot;)</li>\n</ul>\n<p><strong>Main Content (Left Column):</strong></p>\n<ul>\n<li><strong>Suite Occupancy Card:</strong>\n<ul>\n<li>&quot;Current Occupancy Rate&quot;</li>\n<li>&quot;Upcoming Vacancies",
    "start_char": 1500,
    "end_char": 2000,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "&quot;</li>\n</ul>\n</li>\n<li><strong>Earnings Card:</strong>\n<ul>\n<li>&quot;Total rent collected this month&quot;</li>\n<li>&quot;Outstanding payments&quot;</li>\n</ul>\n</li>\n</ul>\n<p><strong>Main Content (Right Column):</strong></p>\n<ul>\n<li><strong>Suite Management Card:</strong>\n<ul>\n<li>A button to &quot;Manage Stylists&quot;.</li>\n<li>A button to &quot;View Applications&quot;.</li>\n</ul>\n</li>\n<li><strong>Suite Tools Card:</strong>\n<ul>\n<li>A link to &quot;Post an Open Chair&quot;.</li>\n<li>A",
    "start_char": 2000,
    "end_char": 2500,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "link to &quot;Suite-level promotions&quot;.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Bottom Navigation:</strong></p>\n<ul>\n<li>&quot;Home&quot;</li>\n<li>&quot;Stylists&quot;</li>\n<li>&quot;Tools&quot;</li>\n<li>&quot;Profile&quot;</li>\n</ul>\n<hr>\n<p><strong>Page: Client Dashboard</strong></p>\n<p><strong>Layout:</strong></p>\n<ul>\n<li>A header with the application logo and a user profile button.</li>\n<li>A main content area with a single column layout.</li>\n<li>A bottom navigation bar.</li>\n</ul>\n<p><stron",
    "start_char": 2500,
    "end_char": 3000,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "g>Header:</strong></p>\n<ul>\n<li>Left: ClientPass Logo</li>\n<li>Right: User Profile Button (opens a dropdown with &quot;My Appointments&quot; and &quot;Logout&quot;)</li>\n</ul>\n<p><strong>Main Content:</strong></p>\n<ul>\n<li><strong>Upcoming Appointment Card:</strong>\n<ul>\n<li>Details of the next upcoming appointment (Stylist, Service, Time).</li>\n<li>A button to &quot;Reschedule&quot; or &quot;Cancel&quot;.</li>\n</ul>\n</li>\n<li><strong>My Stylists Card:</strong>\n<ul>\n<li>A list of favorite or pre",
    "start_char": 3000,
    "end_char": 3500,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "viously booked stylists.</li>\n<li>A button to &quot;Book a new appointment&quot;.</li>\n</ul>\n</li>\n<li><strong>Share and Earn Card:</strong>\n<ul>\n<li>Information about the referral program.</li>\n<li>A button to &quot;Share with friends&quot;.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Bottom Navigation:</strong></p>\n<ul>\n<li>&quot;Home&quot;</li>\n<li>&quot;Book&quot;</li>\n<li>&quot;History&quot;</li>\n<li>&quot;Profile&quot;</li>\n</ul>\n<hr>\n<p><strong>Page: Affiliate Dashboard</strong></p>\n<p><strong>Layo",
    "start_char": 3500,
    "end_char": 4000,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "ut:</strong></p>\n<ul>\n<li>A header with the application logo and a user profile button.</li>\n<li>A main content area with a two-column grid.</li>\n<li>A bottom navigation bar.</li>\n</ul>\n<p><strong>Header:</strong></p>\n<ul>\n<li>Left: ClientPass Logo</li>\n<li>Right: User Profile Button (opens a dropdown with &quot;My Links&quot; and &quot;Logout&quot;)</li>\n</ul>\n<p><strong>Main Content (Left Column):</strong></p>\n<ul>\n<li><strong>My Earnings Card:</strong>\n<ul>\n<li>&quot;Total earnings&quot;</li>",
    "start_char": 4000,
    "end_char": 4500,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "<li>&quot;Earnings this month&quot;</li>\n</ul>\n</li>\n<li><strong>My Referrals Card:</strong>\n<ul>\n<li>&quot;Total referrals&quot;</li>\n<li>&quot;Referrals this month&quot;</li>\n</ul>\n</li>\n</ul>\n<p><strong>Main Content (Right Column):</strong></p>\n<ul>\n<li><strong>My Links Card:</strong>\n<ul>\n<li>A list of referral links.</li>\n<li>A button to &quot;Create a new link&quot;.</li>\n</ul>\n</li>\n<li><strong>Top Performing Links Card:</strong>\n<ul>\n<li>A list of the top 5 performing links with their s",
    "start_char": 4500,
    "end_char": 5000,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "tats.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Bottom Navigation:</strong></p>\n<ul>\n<li>&quot;Home&quot;</li>\n<li>&quot;Marketplace&quot;</li>\n<li>&quot;Links&quot;</li>\n<li>&quot;Profile&quot;</li>\n</ul>\n<hr>\n<p><strong>Page: Affiliate Marketplace</strong></p>\n<p><strong>Layout:</strong></p>\n<ul>\n<li>A header with the application logo and a back button.</li>\n<li>A main content area with a list of products.</li>\n<li>A search bar and filters.</li>\n</ul>\n<p><strong>Header:</strong></p>\n<ul>\n<li>Left: Bac",
    "start_char": 5000,
    "end_char": 5500,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "k Button (to Affiliate Dashboard)</li>\n<li>Center: &quot;Affiliate Marketplace&quot; title</li>\n</ul>\n<p><strong>Main Content:</strong></p>\n<ul>\n<li><strong>Search and Filters:</strong>\n<ul>\n<li>Search input field.</li>\n<li>&quot;Category&quot; dropdown filter.</li>\n<li>&quot;Commission Rate&quot; range slider filter.</li>\n</ul>\n</li>\n<li><strong>Product List:</strong>\n<ul>\n<li>A grid of product cards.</li>\n<li>Each card shows:\n<ul>\n<li>Product image</li>\n<li>Product name</li>\n<li>Commission rat",
    "start_char": 5500,
    "end_char": 6000,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "e</li>\n<li>A button to &quot;Get Link&quot;.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>Page: Open Chair Alerts</strong></p>\n<p><strong>Layout:</strong></p>\n<ul>\n<li>A header with the application logo and a back button.</li>\n<li>A main content area with a list of alerts.</li>\n</ul>\n<p><strong>Header:</strong></p>\n<ul>\n<li>Left: Back Button (to Suite Tools)</li>\n<li>Center: &quot;Open Chair Alerts&quot; title</li>\n</ul>\n<p><strong>Main Content:</strong></p>\n<ul>\n<li><strong>Alerts List:</",
    "start_char": 6000,
    "end_char": 6500,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "strong>\n<ul>\n<li>A list of open chair alerts.</li>\n<li>Each alert shows:\n<ul>\n<li>The service requested.</li>\n<li>The time window.</li>\n<li>The location (zip code).</li>\n<li>A button to &quot;Accept&quot; or &quot;Decline&quot;.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>Page: Post Open Chair Form</strong></p>\n<p><strong>Layout:</strong></p>\n<ul>\n<li>A header with a back button and a title.</li>\n<li>A main content area with a form.</li>\n</ul>\n<p><strong>Header:</strong></p>\n<ul>\n<li>Left",
    "start_char": 6500,
    "end_char": 7000,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": ": Back Button (to Suite Tools)</li>\n<li>Center: &quot;Post Open Chair&quot; title</li>\n</ul>\n<p><strong>Main Content:</strong></p>\n<ul>\n<li><strong>Form Fields:</strong>\n<ul>\n<li>&quot;Service&quot; dropdown (e.g., Haircut, Coloring).</li>\n<li>&quot;Time Window&quot; selector (e.g., 9am-12pm, 1pm-5pm).</li>\n<li>&quot;Zip Code&quot; input field.</li>\n<li>&quot;Date&quot; picker.</li>\n</ul>\n</li>\n<li><strong>Submit Button:</strong>\n<ul>\n<li>&quot;Post Open Chair&quot; button.</li>\n</ul>\n</li>\n</ul",
    "start_char": 7000,
    "end_char": 7500,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": ">\n<hr>\n<p><strong>Page: Client Referral Form</strong></p>\n<p><strong>Layout:</strong></p>\n<ul>\n<li>A header with a back button and a title.</li>\n<li>A main content area with a form.</li>\n</ul>\n<p><strong>Header:</strong></p>\n<ul>\n<li>Left: Back Button (to Client Dashboard)</li>\n<li>Center: &quot;Refer a Friend&quot; title</li>\n</ul>\n<p><strong>Main Content:</strong></p>\n<ul>\n<li><strong>Form Fields:</strong>\n<ul>\n<li>&quot;Friend's Name&quot; input field.</li>\n<li>&quot;Friend's Email&quot; inpu",
    "start_char": 7500,
    "end_char": 8000,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "t field.</li>\n<li>&quot;Select a Stylist&quot; dropdown.</li>\n<li>&quot;Personalized Message&quot; textarea.</li>\n</ul>\n</li>\n<li><strong>Submit Button:</strong>\n<ul>\n<li>&quot;Send Referral&quot; button.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>Page: Stylist Profile</strong></p>\n<p><strong>Layout:</strong></p>\n<ul>\n<li>A header with a back button and a title.</li>\n<li>A main content area with the stylist's information.</li>\n</ul>\n<p><strong>Header:</strong></p>\n<ul>\n<li>Left: Back Button (to Pro",
    "start_char": 8000,
    "end_char": 8500,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": "Dashboard)</li>\n<li>Center: &quot;My Profile&quot; title</li>\n</ul>\n<p><strong>Main Content:</strong></p>\n<ul>\n<li><strong>Profile Header:</strong>\n<ul>\n<li>Profile picture.</li>\n<li>Stylist's name.</li>\n<li>&quot;Edit Profile&quot; button.</li>\n</ul>\n</li>\n<li><strong>About Section:</strong>\n<ul>\n<li>A short bio.</li>\n<li>&quot;Years of Experience&quot;.</li>\n<li>&quot;Specialties&quot;.</li>\n</ul>\n</li>\n<li><strong>Services Section:</strong>\n<ul>\n<li>A list of services offered with prices.</li",
    "start_char": 8500,
    "end_char": 9000,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  },
  {
    "doc_id": "68e2fa2077e8ead370b13d8d",
    "content": ">\n<li>A button to &quot;Add a new service&quot;.</li>\n</ul>\n</li>\n<li><strong>Portfolio Section:</strong>\n<ul>\n<li>A gallery of photos.</li>\n<li>A button to &quot;Upload a photo&quot;.</li>\n</ul>\n</li>\n<li><strong>Reviews Section:</strong>\n<ul>\n<li>A list of reviews from clients.</li>\n</ul>\n</li>\n</ul>\n<hr>",
    "start_char": 9000,
    "end_char": 9309,
    "source_file": "WIREFRAMES.md",
    "frontmatter": {
      "id": "68e2fa2077e8ead370b13d8d",
      "revision": 8
    }
  }
]